이 책은 1996년 영국   에서 출판된   교수의   를 번역한 것이다
 역자는 이 책을 1997년 초가을 미국 의   서점에서 처음 구입하였다
 서가에서 집어들고 그 자리에 서서 약 반 시간 남짓 읽는 동안 이 책이야말로 컴퓨터 언어분석에 관한 한 귀중한 교과서라고 확신하게 되었다
 그 후 틈나는 대로 흥미있는 부분들을 먼저 골라서 읽기 시작하였고 특별히 기간을 정해서 번역을 완료할 것이라고 생각하지는 않고서 틈틈이 부분적으로 원고를 작성하기 시작하였다

이 책은 8개의 장과 부록들로 이루어져 있다
 물론 분석자료는 의   등의 영문학 작품들이고 분석방법 자체도 영어에 초점이 맞추어져 있다
 간단히 내용을 소개한다면 1장에서 언어분석에 컴퓨터를 이용해야 하는 이유를 예를 들어 설명하고, 2장에서는 자료수집방법에 대해서 구체적으로 논의한다
 3장부터 6장까지는 수집한 자료를 준비작업을 거쳐 분석하는 과정을 역시 간단하면서도 구체적인 예들을 들어 가면서 논의한다
 여기에서 소개되고 논의되는 주요 개념들로는 빈도목록 , 문맥행 목록, 연어분석 , 통사소 분석 , 단어소, 단어소 분석, 태깅 , 파싱, 하위언어, 말모둠 등이 있다
 이 개념과 용어들은 컴퓨터 언어분석에 관심이 있고 장차 실제로 연구하고자 하는 사람들이라면 반드시 이해해야 하는 것들로 독자들은 부담없이 책을 읽고 예를 검토하다 보면 자연스럽게 그 개념과 용어들을 익힐 수 있게 되어 있다
 7장에서는 앞에서 논의한 컴퓨터 언어분석 기본작업들이 미래에 어떻게 응용될 수 있을 것인가에 대해서 구체적이고도 친근한 예를 들어 논의하면서 컴퓨터 언어분석이 단순히 학술적 목적만이 아니고 문서작성-, 사전편찬, 컴퓨터 보조 언어학습,    , 전문가 시스템 , 기계번역 , 발화인식  등의 제분야에서 널리 응용될 수 있다는 것을 자연스럽게 소개하고 있다
 8장에서는 실제작업의 예를 통해서 이 책 전반부에서 논의했던 개념과 작업단계들을 단계적으로 검토한다
 부록에서는 컴퓨터 언어분석에 이용할 수 있는 몇 가지 컴퓨터 언어들을 소개하고 그 중에서 저자가 가장 추천할 만하다고 생각하는  언어를 선택하여 그 언어로 컴퓨터 분석작업을 하는 과정을 실제 스크립트를 곁들여 보여주고 있다

오늘날 확대일로에 있는 인터넷과 관련철학 및 기술 그리고 하루가 다르게 신장되고 있는 멀티미디어 기술의 중심에 서서 컴퓨터는 이 모든 엄청난 변화를 통제하고 있다
 이 모든 변화의 기저에는 컴퓨터를 이용한 언어와 기타자료의 처리가 필수요건으로 자리잡고 있다
 그러나 이것은 앞에서 말한 기술 대변혁의 그늘에 가려서 해당분야의 일부 전문가들을 제외하고는 일반대중에게 별로 알려져 있지 않은 상태이다
 저자가 이 책을 통하여 이렇게 그늘에 가려져 있는 부분들을 일반독자들에게도 친숙해질 수 있게 만들기 위하여 노력한 것을 높이 사야겠다
 이러한 저자의 노력 덕택에 이 책은 컴퓨터 관련분야 전문가는 물론이고, 컴퓨터와 그 응용에 대한 아주 초보적인 지식만을 가지고 있는 일반인이라고 해도 충분히 소화할 수 있다는 탁월한 특징을 가지고 있다

역자로서 독자들에게 드리고 싶은 조언은 결국 이 책에서 논의되고 제시된 대부분의 내용이 영어와 영어자료, 혹은 서구어와 서구어 자료를 기본으로 한 것들이기 때문에 한국어를 비롯한 비서구어흔히 말하는 2-바이트 언어들로의 적용에는 제약이 있을 수 있다는 점이다
 그럼에도 불구하고 이 책을 한국어로 옮기기로 마음먹게 된 것은 그만큼 이 책이 컴퓨터 언어분석에 대한 일반독자들의 이해를 도울 수 있을 것이라는 확신에서였다

마지막으로 이 책의 출판을 쾌히 허락해주신 고려대학교 前출판부장 최동호 교수님, 現출판부장 전성기 교수님, 고려대학교 언어과학과 이기용 교수님, 최재웅 교수님, 강범모 교수님, 고려대학교 언어과학과 대학원생들 그리고 출판과정에서 많은 도움을 아끼지 않은 고려대학교 출판부 직원들께 깊은 감사를 표한다
 아울러 사전편찬학 강의를 통하여 역자에게 컴퓨터를 이용한 언어분석의 길을 알려 주었고 지금은  어디에선가 사전편찬과 개발을 위한 벤처 연구에 열중하고 있을 
  에게도 감사를 표한다

이 책은 언어분석에 있어서 컴퓨터의 잠재적 유용성에 대한 독자들의 인식을 돕기 위해서 쓰여졌다
 이 책에는 독자들이 선정하거나 수집한 말모둠의 특징을 발견하고, 또 그 말모둠에서 찾을 수 있는 정보들을 찾기 위해서 이용할 수 있는 간단한 여러 가지 도구들에 대해서 설명해 놓았다

1장은 컴퓨터를 이용하는 이유에 대해서 살펴보는데, 과연 컴퓨터를 이용할 것인지 혹은 이용하지 않을 것인지를 알아내고,컴퓨터를 이용하기로 한 경우 전체 프로젝트중의 어느 부분에 대해서 이용할 것인지 결정을 내릴 수 있게 해준다

2장은 말모둠의 선정, 설계 및 작성 그리고 컴퓨터로 읽을 수 있는 분석대상 텍스트에 대한 기본적인 내용에 대해서 설명해 놓았다

3장에서는 첫 번째 분석도구인 단어빈도목록을 설명하면서 그 이용방법과 또 그것을 이용해서 발견할 수 있는 결과에 대해서 살펴본다

4장에서는 빈도목록에서 선정된 단어들을 원래의 문맥 속으로 복구시킴으로써 연구원이 문맥 속에서의 텍스트 환경에 원하는 만큼 초점을 맞추어 연구할 수 있게 해준다

5장에서는 단어빈도목록과 문맥행 목록을 결합시킴으로써 단어들 주변의 텍스트 유형에 대한 자동정량분석과 확인을 할 수 있게 해주는 연어분석에 대해서 설명해 놓았다

6장에서는 분석에 필요한 추가정보를 제시하기 위해서 텍스트를 태깅하고 파싱하는 방법과 그 장점에 대해서 얘기하고, 또 하부언어와 자연언어처리의 기본에 대해서 설명한다

7장에서는 상용 및 학술용 작업에 이용할 수 있는 자연언어처리 응용 프로그램에 대해서 간략히 살펴본다

8장에서는 사례연구를 통해서 언어분석 도구프로그램들을 이용하는 연구의 구체적인 예들에 대해서 살펴본다

1장과 4장에는 독자들이 주요개념들을 잘 이해했는지를 확인하고 그 개념들을 실제로 응용할 수 있는 방법들을 살펴보기 위해서 연습문제가 포함되어 있다

부록들은 분석용 프로그램을 스스로 개발하고자 하는 사람들에게 도움이 될 수 있다
 부록 1에서는 주요 프로그래밍 언어들을 제시하고 그 언어들이 언어분석에 적합한지를 살펴본다
 부록 2는 언어분석용 도구 프로그램 개발에 특별히 유용하게 쓰일 수 있는 언어의 작동용례를 간략히 살펴보았다
 부록 3에는 본문에서 논의한 간단한 내용에 따라서 구체적인 설명을 곁들인 프로그램의 예들이 들어 있다

독자들의 컴퓨터 전문지식이나 경험의 정도와는 상관없이 이 책은 언어분석을 위해서 컴퓨터를 이용하는 것이 어떤 장점과 가능성을 갖고 있는지를 알 수 있게 해줄 것이며, 또 연구를 가장 효율적이고 효과적으로 진행할 수 있게 해줄 것임을 믿어마지 않는다

많은 사람들이 이 책의 저술에 직접적 혹은 간접적으로 기여하였다
 먼저 필자에게 컴퓨터를 이용한 언어연구에 대해서 가르쳐준 분들과 또 지난 6년간 필자로부터 그것을 배운 이들에게 감사를 전하고 싶다
 필자를 가르쳐준 분들 중에는  대학의  와  , 사의  같은 분들이 있는데, 이 분들은 이 분야에 대해서 내게 최초로 관심을 갖게 해 준 분들이다
 필자에게 배운 학생들 중에서는 특히 , , ,  그리고 에게 감사하고 싶은데, 이들은 수업시간에 끊임없는 제안을 해주었고, 또 이 책의 원고 교정작업을 하게 되었을 때에도 아무런 불평도 하지 않았으며, 예와 연습문제 작성에도 좋은 아이디어를 주었다
 5년 전 필자에게 이 책의 저술을 권고했던  에게도 특별한 감사의 뜻을 전하고 싶다

이 책의 실제 집필작업에서   , 특히  ,  ,   그리고 시리즈 편집자인  와  의 격려와 도움은 작업을 훨씬 수월하게 해주었다

몇 년 전 필자는  작품의 철자변이형에 대해 연구했던 적이 있다
 14세기 중세영어에 대해 생소한 독자들을 위해서 참고로 말한다면 그 당시 철자법은 표준화되어 있지 않아서 같은 원고 내에서도 철자변이형들을 찾아볼 수 있다
 예를 들어서,  에 나오는 , ,  그리고  등은 모두 같은 뜻을 갖는 영어단어들이다
 이 작업을 하기 위해서는 우선 철자변이를 보이는 모든 단어형태들을 찾아야 했다
 그렇게 함으로써 그 단어형태들을 바탕으로 하여 이 작품의 철자체계에 대해 설명하기 위해서 어떤 대치규칙들을 만들어야 할 지를 결정할 수 있었기 때문이었다
 필자는 이 작업을 위해서 컴퓨터를 이용하기로 하였다

컴퓨터를 이 작업에 이용하기로 결정한 가장 중요한 이유는 작업의 규모였다
 이 작업을 수작업으로 한다는 것은 이론적으로는 가능하다
 가령 선정된 텍스트를 끝까지 읽어서 그 안에 나타나는 모든 단어형태들을 나열하고, 그 형태들의 철자가 변이형인지 아닌지를 가리기 위해서 비교하여 그 변이유형을 정리요약한 후에 규칙을 찾아내고, 검토된 텍스트 내에서 과연 일관되게 그 규칙이 적용될 수 있는지를 따져보는 등등…… 방대한 의 작품들을 이런 방식으로 분석하기 위해서 소요될 엄청난 시간을 생각한다면 전체작업을 수작업으로 한다는 것은 어차피 실제로는 불가능했을 것이기 때문에 아예 이 가능성은 고려할 필요조차 없었다
 애초부터 컴퓨터를 이용할 경우에 있어서 작업의 속도와 정확성은 이 연구의 가장 중요한 필수조건들 중의 하나였던 것이다

그렇다고 해서 컴퓨터가 이 작업을 수작업으로 했을 때와 동일한 방법으로 수행하였다고 말하고자 하는 것은 아니다
 사실, 컴퓨터를 이용하기로 한 까닭에 작업방식에 있어서 상당한 변동과 제약이 있었고, 또 문제가 많이 발생했는데, 이 문제를 해결하려고 하다 보니 컴퓨터를 이용한 언어분석의 주요 장점과 단점들을 잘 보여주는 좋은 예들도 많이 찾아낼 수 있었다
 이 장에서는 일반적인 컴퓨터 이용방법에 대해서 논의하고, 프로젝트 자체에 대해서는 8장에서 사례연구의 예를 통해서 논의하기로 한다

만일 이 프로젝트를 수작업으로 하기로 결정하고 시작했다면 입수할 수 있는 몇 가지 권위 있는 최신판  전집들 중에서 한두 가지 정하거나, 심지어는 비록 입수하기에 어려움이 있었을지는 몰라도 몇몇 원본 원고들 중에서 텍스트를 선정할 수도 있었을 것이다
 더 나아가서 충분한 시간만 있었다면 몇 가지 다른 자료들을 비교하여 그 결과들 중에서 가장 눈에 띄는 유형들을 찾아 그 유형들로부터 변이형의 정도를 설정할 수도 있었으리라고 생각된다
 프로젝트의 진행을 위해서 컴퓨터를 이용하기로 결정한 것은 컴퓨터로 읽어들일 수 있는 전자 텍스트가 필요하였다는 것을 의미하는데, 이 것은 이 1957년 편집한   전자 텍스트를   로부터 구입함으로써 해결할 수 있었다
 이 텍스트는 분량이나 텍스트 자체, 또는 판본을 놓고 보았을 때 결코 가장 이상적인 것은 아니었다
 반면에, 개별적인 선정과정을 통해 선정된 특정 텍스트들을 전자 텍스트로 변환하는 것 또한 소요시간이나 경비를 생각할 때 그렇게 바람직하지는 않았다

적당한 텍스트를 구하기가 어려웠다는 것은 분명히 아주 심각한 문제였다
 그러나 프로젝트가 진행되면서 막상 이 문제에 봉착하긴 했어도 가장 큰 문젯거리는 아니었으며 선정된 텍스트를 이용하여 상당히 좋은 결과를 얻을 수 있었다
 연구 프로젝트의 수행을 위해서 컴퓨터를 이용하는 방법의 적절성을 평가하기 위해서는 전자 텍스트의 존재여부는 분명히 아주 중요한 고려사항이다
 앞으로는 전세계적으로 주요 텍스트 보관소에 보관되어 있는 전자 텍스트를 이용하게 됨으로써 이러한 문제들을 상당히 줄일 수 있게 될 것이라고 믿는다
 텍스트에 대해서는 2장에서 상세히 논의한다

프로젝트용으로 선정된 텍스트는 이미 전자 텍스트로 되어 있긴 했어도 막상 사용하기 위해서는 약간의 사전 준비작업이 필요했다
 텍스트가 메인프레임 컴퓨터로만 읽을 수 있는 자기 테이프에 기록되어 있었기 때문에 필자가 이용하기로 한   호환 컴퓨터에 맞는 크기와 형식으로 만들기 위해서는 변환해야 했는데, 이 작업에 며칠이 걸렸고 전문가의 도움을 상당히 많이 받아야 했다
 본작업에 앞서서 해야 했던 모든 부수작업들은 컴퓨터를 이용하게 됨으로써 야기된 것이라서 만일 수작업으로 했더라면 이 작업들은 전혀 할 필요가 없었을 것이다
 그러나 준비과정에 소요되는 시간은 컴퓨터를 이용한 분석처리작업과 수작업 분석작업에 걸리는 소요시간을 고려하여 결정해야 한다
 일단 자료가 준비되면 컴퓨터를 이용하는 경우 훨씬 빨리 분석작업을 할 수 있다
 이 프로젝트의 예를 놓고 볼 때, 특히 자료의 양이 많은 경우에는 준비작업에 소요되는 추가시간은 별로 큰 부담이 되지 않았다

텍스트를 프로젝트에 이용할 컴퓨터 기종과 호환적으로 변환하기는 했어도 그것을 효과적으로 분석하기 위해서는 추가적인 예비처리를 해야 했다
 텍스트가 모두 대문자로 되어 있었던 것은 별로 큰 문제는 아니었다
 왜냐하면 컴퓨터를 적절하게 이용하여 대문자와 소문자의 차이를 제거할 수 있었기 때문이다
 텍스트의 다른 중요한 특징은 텍스트 행마다   내용과는 무관한 정보들이 포함되어 있었다는 점인데, 이 정보들이 실제작업에 혼동을 일으키는 일이 없도록 하기 위해서 원래의 텍스트와는 구분해야 했다
 컴퓨터로 텍스트를 처리하는 프로젝트에 있어서 그 진행과정에서 야기될 수 있는 일반적인 문제점들에 대해서는 2장에서 논의한다
 그리고   텍스트 처리과정에서 발생한 문제들에 대한 구체적인 해결방법에 대해서는 8장에서 논의한다
 컴퓨터를 이용하여 텍스트를 처리하려고 하는 경우에 위에서 말한 여러 요인들로 인하여 추가적인 시간과 노력이 소요될 수 있다는 사실에 대해서는 미리 알고 있는 것이 좋다

단어를 가려내고 비교하는 과정을 수작업으로 했더라면 지루하기는 했겠지만 작업방식은 비교적 간단명료했을 것이다
 텍스트에서 선정된 단어들을 카드에 기록하여 사용하기 편하게 알파벳 순서로 나열하면 된다
 새 단어형태가 발견될 때마다 이미 카드에 등록된 기존 단어형태와 비교검사하여 그 새 형태가 혹시 기존 단어형태의 철자변이형인지를 평가만 하면 되었을 것이다
 단어형태를 비교하기 위해서 그 문맥을 검토해야 했는데, 행번호와 같이 텍스트 상에서의 해당단어의 위치를 자세하게 밝히기 위해서 필요한 정보들을 각 단어형태의 새 철자변이형이 발견될 때마다 카드에 기록하면 된다
 그러나 이처럼 단어형태끼리 비교하는 작업은 틀림없이 카드의 숫자가 늘어나면서 점점 더 번거롭고 하기 어려워지게 되었을 것이다

실제 작업방식은 상당히 달랐다
 처음에 모든 단어형태들의 목록을 만들고 각 단어형태의 출현빈도를 기록하기 위하여 컴퓨터를 이용하였다
 이 작업을 하기에 아주 유용한 언어분석 프로그램의 일반적 특징에 대해서는 3장에서 설명한다
 이렇게 함으로써 앞에서 언급했던 색인카드 방식을 쓸 필요가 없었는데, 왜냐하면 각 단어형태가 나타날 때마다 나중에 참고할 수 있도록 그 행번호를 자동으로 컴퓨터가 기록할 수 있었기 때문이다
 처음에는 이 방법은 아무런 단점도 없고 다만 효율성만을 극대화시켜주는 듯 해보였다
 컴퓨터에 텍스트를 입력시켜서 연구원이 수작업으로 작성한 단어형태 목록과 정확히 일치하는 목록을 훨씬 빠르고 정확하게 작성할 수 있었다

그렇지만 사실은 작업이 그렇게 간단하지만은 않았다
 사람이 작업한다면 어떤 것이 단어인지를 가려내는 것은 거의 문제가 없었을 것이다
 하이픈, '-'이나 기타 표기부호들이 때때로 작은 문제점들을 야기시킬 수 있겠으나 사람이 작업한다면 이런 문제들은 직관적으로 해결할 수 있어서 상당히 일관되고 정확한 결과를 얻을 수 있었을 것이다
 하지만 컴퓨터에 있어서는 단어경계가 심각한 문제를 야기할 수 있기 때문에 그것을 올바르게 처리할 수 있는 방법을 구체적으로 밝혀주어야 한다
 이 때문에 단어목록을 작성하기 전에 단어경계에 대한 자세하고 완전한 분석이 먼저 이루어져야 한다
 텍스트 내용상의 중요한 특징을 다루는 데에 있어서 아무리 사소한 실수라도 단어목록의 정확성을 떨어뜨리게 되고, 따라서 단어형태 정보출처로서의 그 목록의 가치도 떨어지게 될 것이기 때문이다
 이러한 문제들과 연관하여 자주 겪게 되는 문제들에 대해서는 3장에서 논의하기로 한다
 그리고  텍스트에서 찾아볼 수 있는 구체적인 문제들에 대해서는 8장에서 논의한다

컴퓨터를 이용하여 단어목록을 만드는 작업은 이론적으로는 수작업 방법과 거의 동일한 절차를 따른다
 철자변이형일 수 있는 단어들을 찾는 것은 상당히 복잡한 과정이었는데 컴퓨터를 이용한 분석방법은 컴퓨터와 인간 연구원 사이의 의미심장한 차이점을 엿볼 수 있게 해준다
 가령 새로운 단어형태를 이미 발견된 하나 혹은 그 이상의 다른 형태들과 비교하기 위해서 인간 연구원이 어떻게 할 것인지를 예로 들어서 생각해보자
 카드색인과 대조하여 단어형태를 가려내고 확인해 가면서 인간 연구원들이 텍스트를 읽고 이해한다고 가정하면, 그들은 앞에 놓여있는 단어형태의 뜻에 대해서 적어도 대강의 짐작은 하게 될 것이다
 심지어는 카드색인을 확인하기도 전에 그 형태와 동일하게 사용될 수 있고, 또 그것을 대표할 수 있는 기존의 다른 단어형태들에 대해서 이미 대강 알고 있을 수도 있다

비록 산만하기는 하여도 인간의 기억력은 특히 패턴과 그 변이형에 대해서는 극도로 강한 특징을 보인다
 이 특징으로 인하여 확인과정이 약간 쉬워질 수 있다
 왜냐하면 가장 관련성이 있다고 여겨지는 부분에 관심을 집중시킬 수 있기 때문이다
 만일 이렇게 관심을 집중시키지 않는다면 수작업 확인과정은 조만간 아주 번거롭게 되고 결국은 거의 불가능하게 되기 쉽다
 각 단어형태를 다른 단어형태들과 일일이 대조해야 한다
 왜냐하면 인간 연구원은 미리 같은 단어의 상이한 두 가지 철자변이형들 사이에 존재할 수 있는 차이점에 대해서 그 성격이나 정도를 미리 알 수가 없기 때문이다

그러나 인간 연구원은 컴퓨터와 비교하여 아주 두드러진 장점을 가지고 있다
 이들은 읽은 텍스트는 이해하기 때문에 단어들을 확인해가는 동안에 잠재적으로 특정 단어형태의 변이형 여부에 대하여 판단을 내릴 수 있다
 그리고 이 판단은 비교대상 단어형태가 사용되는 문맥이나 텍스트의 언어에 대한 구체적인 지식 등과 같은 복잡한 요인들에 근거한 것이다
 컴퓨터는 다만 프로그램에 입력이 되어 있을 때라야만 이러한 지식을 가질 수가 있다
 단어형태의 변이형 여부에 대한 판단을 내리는 과정에서 인간 연구원이 사용하게 되는 모든 요인들에 대하여 충분히 설명한다는 것은 불가능하지는 않지만 무척 어려운 일이다
 이것이야말로 컴퓨터를 이용한 거의 모든 언어분석에 있어서 가장 중요한 문제이다
 그러면서도 또한 이런 종류의 작업에 컴퓨터를 이용함으로써 누릴 수 있는 중요한 장점들중의 하나이기도 하다

이 파라독스는 언어분석에 있어서 인간의 직관이 중요한 역할을 할 때마다 여러 가지 위험성도 수반된다는 사실에 기인한다
 주된 위험성은 연구원이 미리 기대하고 있던 것을 찾는 경향이 있게 될 것이라는 사실인데, 이는 연구대상분야에 대한 지식이 연구원들의 판단에 영향을 미치기 때문이다
 이 경우에서처럼 분석에 필요한 항목을 찾는 것이 주된 작업이 될 경우에 이러한 경향은 중요한 문제가 될 수 있다
 이미 언급한 바 있듯이 단어형태 비교에 있어서 거의 필수적인 지름길로서 인간의 기억능력이 갖는 주의집중 효과는 철자변이형에 대한 기존지식으로부터 영향을 받게 될 가능성이 있다
 이로 인하여 단어형태 파악과정에서 야기될 수 있는 혼동은 컴퓨터를 이용하여 작업할 경우에 피할 수 있다
 왜냐하면 컴퓨터는 연구원의 직관에 의존하여 프로그램되지는 않기 때문이다
 물론 컴퓨터를 이용한 분석에는 이에 못지 않은 단점도 있다
 예를 들어서, 본 프로젝트에서는 철자변이형을 찾는 규칙들을 간단하게 만들어서 단지 한 문자에서만 차이를 보이는 단어형태들을 찾아서 추가분석을 위하여 나열하도록 했다
 이렇게 하는 것만이 유일한 해결방법은 아니었지만 이렇게 하면 8장에서 언급하는 바와 같은 중요한 장점들이 있었다
 이렇게 함으로써 많은 잠재적 철자변이형들을 추가분석에서 제외시킬 수 있었고, 그 결과 얻어진 견본은 전체적으로 인간 연구원의 편견의 영향을 받지 않게 되었다

일단 실제작업을 해보면 필요한 소프트웨어를 만들기 위해서 여러 번 시도한 후에야 분석대상 텍스트의 특징이 완전히 파악되는 일이 흔히 일어난다
 완전한 소프트웨어를 만들기 위해서는 구체적으로 프로그램을 작성하여 그 결과를 확인해보고 필요한 수정을 하는 과정을 반복해야 한다
 몇 가지 처리과정을 반복해야 한다는 사실은 컴퓨터를 이용함으로써 얻을 수 있는 처리속도의 신속성이라는 장점을 퇴색시킬 수 있으나 대용량 자료의 처리를 요하는 작업에 있어서는 그다지 중요한 문제가 되지 않는다
 보다 중요한 것은 프로그램 개발의 복잡성인데 이것은 프로젝트의 성격과 기존 소프트웨어의 사용정도 및 여부 그리고 어떤 프로그래밍 언어를 선택하느냐에 달려 있다

언어분석 프로그램 개발작업은 결코 수작업 자료처리방법을 고안하는 것처럼 간단하지는 않다
 대부분의 컴퓨터 분석에서는 이와 같이 프로그램에 대해서 자세하게 살펴보는 추가단계가 필요하기 마련이다
 기존 컴퓨터 소프트웨어를 이용할 수 있다고 해도 자료형식이 그 기존 소프트웨어와 호환적이지 않아서 변환시켜야 하고, 또 그 결과에 대해서도 추가분석이 필요할 경우가 있다
   연구 프로젝트의 최종단계에서 이용된 모든 소프트웨어는 이 프로젝트만을 위해 특별히 개발되었으며, 그 결과 개발에 막대한 시간이 소요되었다
 예컨대, 원본 단어목록 작성 등의 몇몇 단계에서는 기존 소프트웨어를 사용할 수도 있었지만 연구의 특수성을 고려할 때 그렇게 하는 것이 가장 효과적인 해결책은 아니었다

일단 컴퓨터 이용 분석방법으로 결정한 후에는 처리과정은 물론 자동적이었고 처리속도도 상당히 빨랐다
 목록에 들어 있는 모든 단어형태들을 최종적으로 상호비교하는 데에는 30시간 이상이 걸렸으며 이 과정에서는 수없이 많은 문자 단위의 확인을 해야 했다
 그렇지만 이 과정에는 연구원들의 직접적인 간섭이 필요하지 않았기 때문에 연구원들은 그 시간동안 다른 작업을 할 수 있었다
 그러나 이것은 성공적인 최종작업에 소요된 처리시간만을 말한다
 최종 프로그램을 완성하기까지는 시험과 수정에 많은 시간이 소요되었다
 하지만 이 개발시간조차도 수작업 분석에 소요되는 시간에 비하면 훨씬 적은 시간이었다
 이 방법의 가장 큰 장점은 작업규모에 있다
 만일 분석대상이 양이 적은 텍스트였다면 수작업 분석이 더 빨랐을 것이다

컴퓨터 처리에 있어서 속도와 더불어서 고려해야 하는 또다른 측면이 있다
 일반적으로 컴퓨터를 이용하게 되면 수작업 분석과는 달리 분석에 있어서 완전한 일관성을 유지할 수 있다
 그렇다고 해서 이것이 무조건 좋은 것만은 아니다
 왜냐하면 프로그램上의 어떠한 실수까지도 완전히 일관적으로 실행되는 반면에 수작업 분석을 하는 경우에는 분석 중간중간에 방법상의 실수를 발견할 수 있어서 너무 많은 시간과 노력이 낭비되기 전에 교정할 수 있기 때문이다
 성공적인 프로그램의 개발은 믿을만한 분석결과가 얻어지기 전에 반복적으로 철저한 실험, 평가 그리고 여러 번에 걸친 수정이 이루어져야 한다
 하지만, 가능한 한도 내에서 모든 절차를 완수하였다고 해도 전체결과를 자세히 점검해보면 다시 문제들이 발견되기도 한다
 물론 수작업에서도 실수는 발생한다
 그러나 그 경우에는 대개 작업자의 오해나 부주의, 피로, 지루함 등과 같은 요인들로 인해 야기된 것들이라서 충분히 이해되고 수정할 수 있는 문제들인 경우가 많다
 따라서 최종결과에 미치는 전반적인 영향은 훨씬 작긴 하지만 컴퓨터 분석에서와 마찬가지로 이 문제들을 완전히 제거하기에는 상당한 어려움이 따른다
 분명히 말할 수 있는 것은 방법상의 실수를 발견하고 제거한 후에 전체 분석과정을 반복하는 것이야말로 컴퓨터를 이용할 때 현실적으로 할 수 있는 유일한 방법이라는 것이다

지금까지 논의한 처리과정은  철자법 연구 프로젝트의 첫 번째 단계에 불과하다
 단어형태 목록을 바탕으로 하여 철자변이의 일반특징들을 요약하기 위해서는 훨씬 많은 분석을 거쳐야 했다
  8장에서 자세히 설명하지만, 이 과정에서는 단어형태들 사이에서 발견되는 차이를 유형별로 완전히 요약하여 그 상이한 단어형태들의 의미를 평가할 수 있도록 해야 했다
 이러한 종류의 분석은 컴퓨터를 이용할 경우 간단하고 분명하기 때문에 아주 신속하게 할 수 있었지만 만일 수작업으로 했다면 아주 어렵고 시간이 많이 걸리는 작업이었을 것이다

컴퓨터를 이용하지 않고서 어떻게 이 작업을 수행할 수 있을 지를 살펴 보자
 앞에서 말한 색인카드 방법을 사용하여 단어목록이 이미 만들어져 있다고 가정했을 때 일반적인 원칙을 가려내기 위해서 목록에 들어 있는 각각의 단어나 또는 단어집단에서 발견되는 잠재적 철자변이형들 사이의 차이의 유형을 찾아내고 분류해야 할 것이다
 한 예로, 이 장의 첫 부분에서 언급했던 라는 단어의 다른 형태들인 , ,  그리고 를 살펴보자
 이 형태들 사이의 차이를 수작업으로 분석할 경우 와 , 와  사이에 보이는 의 차이뿐만 아니라 와  그리고 와  사이의 어말 의 존재여부도 설명해야 한다
 이 작업을 가장 쉽게 하는 방법은 그 차이를 개별적으로 살펴보는 것이다
 그 경우에 ,  와 같이 어말 의 존재여부에서만 차이를 보이는 단어들 그리고 , 와 같이 의 존재여부에서만 차이를 보이는 단어들을 모두 모을 수 있다
 일단 분류근거를 마련한 뒤에 각 차이를 보이는 단어형태들의 수를 세어서 어떤 것이 가장 빈도가 높은지를 보고, 또 어떤 유형에 대해서 추가연구를 할 것인지 등도 평가할 수 있다

컴퓨터를 이용한 철자변이형 분석방법도 거의 비슷하게 진행되었다
 그렇지만 수작업은 거의 없었다
  1
3항에서 언급한 단어쌍 목록은 찾아낸 변이형 유형에 따라서 집단별로 쉽게 분석할 수 있었다
 단어쌍 목록은 컴퓨터로 작성되었기 때문에 나중에 자동적으로 요약하기 위하여 분석 프로그램에 입력시킬 수 있었다
 이렇게 함으로써 많은 시간을 절약할 수 있었을 뿐만 아니라 수작업으로 하는 것보다도 훨씬 더 정확한 결과를 얻을 수 있었다

일단 자료를 컴퓨터에 입력할 준비가 되면 자료를 골라서 필요에 따라서 어떤 형식으로든 그 결과를 출력할 수 있다
 여기에는 사람이 화면으로나 또는 서면으로 볼 수 있게 해주는 형식과 그 다음 처리단계에서 사용할 수 있는 컴퓨터 파일 형식이 있다
   프로젝트에서 첫 분석단계의 결과 생성된 단어쌍 목록은 컴퓨터 파일로 만들어져 1
6항에서 논의한 그 다음 단계의 처리를 거쳐서 변이유형을 찾아낼 수 있도록 하였다
 그 밖의 프로젝트 결과는 인쇄하여 평가하고, 그 결과를 더 좋은 방향으로 결정내리기 위해서 이용할 수 있었다
 어떤 단계에서든 자료를 선별하여 원하는 형태와 형식으로 결과를 볼 수 있었다
 이 작업을 수작업으로 하였다면 얻어진 결과를 다른 순서 혹은 형식으로 보기 위하여 자료를 재배열할 때마다 아주 힘들고 시간이 많이 걸렸을 것이다
 심지어는 색인카드를 다른 순서로 정렬하는 것조차도 어렵고 시간이 많이 걸리는 작업이다
 반면에 컴퓨터는 아주 빨리 그리고 손쉽게 여러 가지 자료를 다양한 순서로 정렬시킬 수 있다

이상에서  철자법 연구를 예로 삼아서 논한 바와 같이, 언어분석 프로젝트에서 컴퓨터를 이용하여 효율적 작업을 할 수 있다는 것이 언제나 이롭지는 않다는 것이 분명하다
 그래서 항상 방법을 결정하기 전에 모든 장점과 단점들을 자세히 살펴보아야 한다
 우선 결정에 영향을 미칠 수 있는 주요 긍정적 그리고 부정적인 요인들을 요약하여 살펴보는 것이 도움이 될 수 있는데, 그 중 상당수는 이미 철자변이형 작업을 통해서 예시되었다
 이 연구를 위하여 컴퓨터를 이용할 때의 주요 장점은 다음과 같다 :
처리속도, 정확성 그리고 일관성
결과 추가처리
자료처리, 선별, 분류 및 원하는 형식으로 출력할 수 있는 능력
인간 연구원의 편견 배제
한편, 주요 단점은 다음과 같다 :
전자 텍스트 자료의 제한성 및 그것을 가지고 적절한 처리를 하기 위해서 필요한 추가작업
컴퓨터를 이용한 분석처리에 따르는 수정작업
프로그램 개발과 시험에 관여되는 부수적인 작업
정상인의 배경지식이 컴퓨터에는 결여되어 있다는 점
이 모든 요소들이 프로젝트를 수행하는 데에 다 적용되는 것은 아니다
 그리고 실제로 컴퓨터를 이용하는 것이 최상의 선택인지를 결정하기 전에 연구수행에 있어서 이것들이 얼마나 적절하고, 또 그로 인하여 어떤 결과가 야기될 것인지 충분히 검토해야 한다
  연구에서처럼 어떤 경우에는 작업규모가 방대해서 단점이 있음에도 불구하고 어쩔 수 없이 컴퓨터를 이용하는 것이 유일한 방법일 수도 있다
 어떻게 결정해야 할지 애매할 경우에는 가장 좋은 결정을 내리기 위해서 구체적으로 분석해야 한다

프로젝트의 구체적 분석에서 무엇을 주로 분석할 것인지 고려하기에 앞서서 컴퓨터를 이용하여 하기 적합한 언어연구작업과 또 반대로 적합하지 않은 언어연구작업의 일반특징을 살펴보자
 가장 이상적으로 컴퓨터를 이용할 수 있는 프로젝트라면 많은 양의 자료가 이미 컴퓨터로 처리할 수 있는 형태로 되어 있으면서도 그것을 비교적 간단하게 분석하는 프로젝트이다
 이것은 기존 소프트웨어를 사용하면 적어도 부분적으로나마 할 수 있다
 이렇게 기존 소프트웨어를 사용함으로써 프로그램 개발을 최소화시킬 수 있다
 반대로 적은 양의 자료에 대한 복잡한 분석을 요하면서도 또한 광범위한 자료준비와 프로그램 개발을 요하는 프로젝트에는 컴퓨터를 효과적으로 이용하기 어렵다
 그러나 이런 경우라고 해도 컴퓨터를 이용할 경우에 얻을 수 있는 여러 가지 장점들을 고려한다면 충분히 그 가치는 있다

또, 같은 연구 프로젝트라도 상황에 따라서 어떤 경우, 즉 규칙성을 띤 작업의 경우에는 컴퓨터를 이용하고, 복잡하면서 조작이 어려운 경우에는 수작업 분석이 나을 수가 있다
  프로젝트의 경우에 단어쌍 선택과 변이형 유형요약 및 분석과 같은 작업들은 자동으로 처리할 수 있었지만, 변이형에 대한 평가는 수작업으로 이루어져서 나중에 컴퓨터로 처리할 수 있도록 별도로 기록하였다

최종결정을 내리기 위해서는 이제부터 자세히 설명하는 각 분야별로 제기되는 문제들에 대한 해결방안에 드는 총 소요비용을 계산 및 측정하고, 또 평가해야 한다

컴퓨터를 이용하는 경우 대두되는 첫 번째 문제는 분석자료가 이용하고자 하는 컴퓨터 하드웨어 및 소프트웨어에 적합하게 되어 있어야 한다는 것이다
 이에 관한 사항은 2장에서 자세히 논의한다
 그러나 프로젝트의 초기분석에 있어서는 다음 문제들에 대해 최소한 윤곽만이라도 잘 고려해야 한다

이 문제는 무엇보다도 연구대상 언어자료가 일반적이고 대표적인 것이 아니라 특수한 것인 경우와 밀접하게 연관되어 있다
 예를 들어서 19세기 영국 소설가인  의 문체를 연구한다고 가정하자
 그의 작품들은 비슷한 시기에 더 인기 있었던 다른 작가들 작품들과 비교했을 때에 일반 텍스트 자료 보관소에 보관되어 있을 가능성이 적다
 예를 들어서 , 나  같은 작가들은 - 또는 기타 자료 보관소에서 흔하게 찾아볼 수 있다
 반면에 만일 프로젝트용으로 필요한 자료가 대표적인 19세기 소설이라면 기존 전자 텍스트를 통해서 상당히 많은 양의 자료를 쉽게 모을 수 있을 것이다
 이런 점들로 인해서 입수가 용이한 자료 쪽으로 연구범위가 바뀌는 결과가 나올 수도 있는데, 이로 인하여 연구의 질이 손상되는 일이 발생하지 않도록 주의해야 한다
 결정을 내릴 때에는 작업에 영향을 미칠 어떤 요인이든지 잘 고려해야 한다
 또한 만일 -에 수록되어 있는 자료를 구입하기로 했다면 그 구입비용도 고려해야 한다

여러 출처로부터 전자 텍스트로 된 자료를 입수할 수 있다고 해도 그 자료는 연구에 곧바로 사용할 수 있는 형태로 되어 있지 않을 수도 있다
 이와 관련된 문제점 및 그 해결방법에 대한 세부사항들은 2장에서 논의한다
 1항에서 논의한  프로젝트에서 이미 공통적인 문제들을 살펴본 바 있다
  텍스트 자료 보관소에서 찾아낸 텍스트는 필사본이라서 프로젝트에 이용하려고 하는 컴퓨터에는 이용할 수 없었다
 자료형식을 변환시키는 일에는 비록 원본자료 및 작업에서 사용하고자 하는 장비와 호환성이 있는 하드웨어와 소프트웨어가 필요하긴 하지만 일반적으로 볼 때 비교적 쉬운 작업이다
 자료변환의 예는 2장에서 설명한다

더욱 복잡한 문제는 비록 자료는 입수하였지만 그 자료에 처리상의 문제를 야기할 수 있는 요소들이 포함되어 있는 경우에 생긴다
 한 예로서, 텍스트에는 연구에 필요하지 않으면서도 분석결과를 왜곡시킬 수 있는 특수기호들이 포함되어 있을 수 있다
 만일 이 특수기호들이 일관되게 포함되어 있어서 쉽게 찾아낼 수 있다면 별로 큰 문제가 되지는 않는다
 더 큰 문제는 역시 2장에서 자세히 논의하게 되겠지만 특수기호들을 삽입해야 할 때 발생하는데, 이 경우 상당히 많은 작업을 하게 될 수 있다
 더욱 문제가 될 수 있는 것은 아주 불규칙하게 나타날 수 있는 텍스트상의 실수들을 수정해야 하는 경우이다
 극단적인 경우에는 수작업으로 일일이 수정해야 한다
 전체적 결정을 내리는 과정에서는 모든 준비작업에 소요되는 시간이나 경비, 또는 이 두 가지 모두에 대한 전체비용을 계산해야 한다

자료입력을 위해서 사용할 수 있는 주요 방법들에 대해서는 2장에서 설명하는데 프로젝트를 위해서 어떤 입력방법이 가장 좋은 방법인지 선택하기 전에 먼저 어떤 유형의 자료를 다루게 될 것인지를 주의깊게 살펴보아야 한다
 일단, 입력방법이 결정되면 자료준비작업에서 했던 것과 동일한 방법으로 소요시간과 비용을 계산하여 최종결정을 내리게 된다

이 질문에 대답하기에 앞서서 연구프로젝트에서 하고자 하는 것이 무엇인지를 정확하게 이해해야 한다
 3장과 4장에서 논의하는 것처럼 빈도목록 이나 문맥행 목록 추출같은 가장 기초적인 언어분석 도구들을 이용하여 상당히 자세한 언어분석을 할 수 있다
 별도로 프로그램을 개발하지 않고 이 분석도구들을 용도에 맞게 수정하여 사용하면 비교적 적은 비용을 들이면서도 상당히 많은 시간을 절약할 수 있다
 어떤 경우에는 이러한 소프트웨어들을 소속된 학교나 또는 주변에서 무료로 구하여 사용할 수도 있다
 최소한 이런 종류의 소프트웨어를 사용함으로써 어떤 분야를 집중적으로 분석할 것인지를 결정하여 그에 맞는 자료들을 선정할 수 있고, 심지어는 추가분석에 사용할 수 있도록 이렇게 선정된 자료를 파일로 만들어 저장해 주기도 한다
 이미 무료로 사용할 수 있는 소프트웨어가 있는데도 불구하고 소프트웨어를 만드는 것은 매우 비경제적인 것이라서 별로 바람직하지 않다
 만일 있는 그대로, 혹은 수정한다거나, 혹은 준비한 자료를 본本처리과정에 앞서서 사전事前처리를 하는 데에 기존 소프트웨어를 사용할 수 있다면 반드시 그렇게 하는 것이 좋다
 분명한 것은 모든 소프트웨어가 일반인에게 무료로 공급되는 것은 아니라는 것이고, 또 어떤 소프트웨어를 사용하기 위해서 필요한 하드웨어 구입에 경비를 지출해야 할 수도 있다는 것이다

이것은 일반적으로 프로젝트 분석에서 가장 어려운 단계이다
 연구의 일부를 수작업으로 하고 있다면 연구 진척도에 따라서 그리고 프로젝트에서 구체적으로 필요할 때마다 세부적인 부분들을 수정할 수 있다
 컴퓨터를 이용한다고 해도 어느 정도까지는 이렇게 하기 마련이지만 만일 필요한 사항들에 대해서 먼저 자세하게 분석할 수 있다면 소프트웨어의 개발에 큰 도움이 될 것이며, 복잡한 프로젝트일 경우에는 이 단계를 거치지 않고서는 효과적인 프로그램의 개발이 어려울 수도 있다
 여기서 가장 어려운 점은 작업자들이 컴퓨터의 기능과 그 기본조작에 대해서 분명히 이해하지 못하고 있는 경우가 흔히 있다는 것이다
 만일 이 점을 기본적으로 잘 이해하고 있는 프로그래머나 다른 사람이 가까이 있어서 도움을 받을 수 있다면 이 점은 그다지 큰 문제가 되지는 않을 것이다
 그러나 여전히 컴퓨터에 대해서는 이해하고 있지만 실제 언어분석에 대해서는 이해하고 있지 못하다거나, 또는 그 반대의 경우에 의사소통에 문제가 생길 수 있다
 이 때문에 최소한 텍스트 처리에 있어서의 주요 단계들을 이해하고 있어야 한다
 일반적으로 전용 소프트웨어를 개발하는 경우 그 소프트웨어를 통해서 연구목적을 성공적으로 구현하기 위해서는 텍스트 처리에 있어서 필요한 가장 기본적인 측면들까지도 상세하게 규정해주어야 한다

한 예로 짧은 텍스트에서 단어숫자로 표현할 수 있는 평균문장길이를 계산하는 간단한 경우를 살펴보자
 이 경우 만일 수작업으로 한다면 거의 문제가 없을 것이다
 즉, 각 문장 내 단어숫자를 세고 보통 하는 대로 평균숫자를 계산하면 된다
 컴퓨터를 이용하는 경우 소프트웨어로 처리할 수 있게 단어와 문장의 개념을 정의해주지 않는다면 단어나 문장이라는 개념은 무의미하다
 그리고 평균치 계산도 구체적으로 설정해 주어야 한다
  프로젝트로부터 입수한 의 소설     의 전자 텍스트판 도입부에서 발췌한 다음 텍스트는 이 문제점들을 잘 보여주고 있다
 행번호는 원래의 텍스트에는 없으나 참고용으로 추가했다

이 텍스트는 행 순서로 나열되어 있으며 각 행단行端에는 행단표식'¶'이 붙어있다
 비록 6행처럼 문단의 끝이 행단에 오는 경우가 있기는 하지만, 각 행에 반드시 한 문장씩 포함되어 있지는 않다
 원본의 입력방식 때문에 어떤 경우제 16행에는 단어가 행단에서 잘린 경우도 있다
 이런 단어는 일반적인 텍스트 인쇄관행에 따라서 하이픈으로 연결되어 있다
 텍스트 처리에 있어서의 문제점은 대부분의 프로그래밍 언어가 인간처럼 정상적인 텍스트 경계표식을 인식하는 것이 아니고 문자나 혹은 행 단위로 텍스트를 인식하여 전체파일을 처리한다는 것이다
 사용할 소프트웨어로 연구대상 자료의 기존단위를 연구에 필요한 단위로 변환해줄 수 있어야 하는데, 이 작업은 수작업으로는 전혀 상상조차도 할 수 없는 일이다

분석의 첫 단계인 텍스트를 분석에 사용할 수 있는 문장으로 나누는 작업에서는 문장경계를 찾아야 한다
 앞에서 논의했던 것처럼 자료의 양이 적은 경우에는 별로 큰 문제가 되지 않을 것이다
 왜냐하면 자료에서 사용되는 유일한 문장경계표식은 마침표밖에 없기 때문이다
 좀더 텍스트 견본의 크기가 커지면 다른 경계표식들이 사용될 수 있지만 이 표식들을 찾아내는 것은 별 어려움이 없다
 그러나 이런 표식들이 항상 문장의 끝을 표시하기 위해서만 사용되는 것은 아니다
 왜냐하면 마침표는 생략형을 표시할 때에도 사용되기 때문이다
 따라서 이러한 다양한 용례를 구분할 수 있는 방법을 개발해야 한다
 행단에서 하이픈으로 잘린 단어를 복구시켜서 연결하는 것도 어려운 문제가 될 수 있으나 그래도 이것은 상대적으로 해결하기 쉽다

가장 일반적이면서도 명심해야 할 점은 연구에 있어서의 컴퓨터의 필요성 그리고 연구방법上의 컴퓨터 이용의 한계를 이해해야만 한다는 것이다
 일단 컴퓨터 이용의 필요성과 가능성 사이의 관계에 대해서 적절한 결정을 내린 뒤에는 컴퓨터 분석과 수작업 분석을 어떻게 적절한 비율로 혼합할 것인지를 결정할 수 있다
 컴퓨터 이용의 필요성과 가능성 사이의 관계에서 생각할 수 있는 모든 중요한 요소들이 빠짐없이 고려되었는지를 살펴보기 위해서는 전반적인 요구사항들을 자세하게 살펴보고, 컴퓨터의 정확한 응용방법을 찾게 될 때까지 그 요구사항들을 세분하여 점차 구체적인 처리단계들로 나누어서 생각하게 해줄 수 있는 공식적인 방법을 채택해야 한다
 앞에서 사용한 예를 통해서 자세하게 살펴본다면, 이 공식적인 방법이라는 것은 연구에 필요한 사항들에 대해서 바로 다음과 같은 일반적인 진술을 통하여 밝혀가는 것부터 시작할 수 있다

각 문장에 포함되어 있는 단어숫자를 세고 그 평균숫자를 계산한다

이는 다시 다음과 같은 세 가지 요소들로 분석할 수 있다:
1
 텍스트를 문장으로 재구성하고 그 숫자 계산
2
 텍스트에 포함되어 있는 단어숫자 계산
3
 전체 단어숫자를 문장숫자로 나누어 한 문장 내의 평균단어숫자 계산
첫 번째 단계는 이미 논의한 바와 같이 더 세분할 수 있다
 그리고 이 세부사항들을 기초로 하여 소프트웨어를 구체적으로 개발할 수 있다:
 문장경계표식들을 구체적으로 밝힌다

 텍스트의 끝을 포함한 문장경계의 숫자를 센다

앞에서 제시한 작은 텍스트 견본에서 문장경계는 매우 단순하다: 마침표만 사용되었는데 이 마침표는 어떤 다른 목적으로도 사용되지 않는다
 의문부호, 감탄부호 그리고 생략현상에서 사용되는 마침표 등과 같은 다양한 부호들이 포함된 텍스트는 설명이 더 복잡하다
 빈칸과 문장경계에 의존하여 단어경계를 밝히는 데에도 이와 비슷한 과정을 적용할 수 있다

이러한 방식을 통해서 특정 프로그래밍 언어를 사용하지 않고서도 상세한 전산화 작업방법을 구성할 수 있다
 소프트웨어 개발을 위한 프로그래밍 언어의 선택은 처리과정의 세부사항들을 결정하는데 있어서 중대한 영향을 미칠 수 있지만, 각 세부사항들 간에는 공통성이 있기 때문에 이러한 분석을 통해서 프로그래밍 언어의 선택과 개발전략의 결정에 유용한 근거를 발견할 수 있다
 부록 1에서는 가장 인기 있는 프로그래밍 언어들 중에서 몇 가지 언어들의 주요특징들을 개략적으로 소개했다

전체작업을 수작업과 컴퓨터를 이용한 작업으로 배정하는 것은 때로는 어려운 일일 수 있다
 컴퓨터를 이용하는 이유는 그렇게 함으로써 시간이나 돈, 또는 이 두 가지 모두를 절약해준다거나, 연구의 질을 향상시켜 준다거나, 기타 다른 전반적인 장점을 제공해줄 수 있다는 것을 확신하기 때문이다
 많은 경우에 컴퓨터를 이용함으로써 비용절감이나 질적향상을 기할 수 있지만 이것은 컴퓨터를 가장 효과적으로 이용할 때에만 가능하다
 컴퓨터의 효과적 이용과 관련된 몇 가지 사항들을 살펴보기 위해서 이 항에서는 운율체계 연구절차를 어떻게 설계할 것인지에 대해서 살펴보기로 하자

아동언어습득에 관심이 있는 한 여학생이 아동언어습득에서의 자장가의 역할과, 또 자장가의 운율체계에 대해서 연구하려고 한다고 하자
 특히 이 여학생은 자장가에서 특별히 자주 사용되는 운율이 있는지, 만일 그러한 운율이 있다면 왜 그 운율들이 더 자주 사용되는지를 연구하려고 한다
 이에 대한 자료는 이 주제에 대한 표준 참고서인        1951에서 발췌하였다
 이 책에는 550개의 다양한 길이의 자장가 텍스트와, 또 관련된 참고사항들이 자세히 수록되어 있다
 이 작업을 위해서는 다음 사항들을 조사하여야 한다 :
각각의 자장가에서 운율체계 찾기
각 운율체계의 숫자를 세고 목록작성
그리고 나서는 이 두 가지 사항을 과연 수작업으로 조사할 것인가 아니면 컴퓨터를 이용하여 조사할 것인가를 결정해야 한다

수작업으로 운율체계를 찾는 일은 상당히 쉽다
 책에 수록되어 있는 자장가들 중에서 운율유형이 들어 있는 충분한 숫자의 자장가들의 가사를 검토하여 그 결과를 기록하면 된다
 같은 작업을 컴퓨터로 할 경우에는 전체 자장가들의 가사를 컴퓨터가 이해할 수 있는 형태로 변환하고, 운율체계를 분석해줄 수 있는 소프트웨어를 개발해야 한다
 이 두 가지 모두 간단한 작업은 아니다
 자료입력에 사용할 수 있는 주요방법들은 2장에서 소개한다
 그러나 어떤 방법을 선택하든지 그 방법을 550개의 자장가 가사에 적용시킨다는 것은 상당한 시간과 노력을 요하는 작업이다
 소프트웨어의 개발은 더욱 문제가 많다
 영어철자가 완전히 음성적이지 않다는 사실은 문제의 핵심과는 별다른 관계가 없기 때문에 말할 필요도 없다
 그리고 프로그램은 수작업으로 운율체계를 찾아내는 작업과 비슷하게 연구원이 시간을 들여야 하는데, 즉, 컴퓨터를 이용하는 사람이 끊임없이 관리를 해야 한다거나, 혹은 기본 영어철자법 형태를 자세하게 규정하는 복잡한 규칙이나 예외목록 등을 필요로 하게 될 수도 있다
 상황에 따라서 이러한 종류의 작업을 요하는 프로젝트는 컴퓨터를 이용하는 것이 별로 바람직하지 않을 수도 있다

일단 운율체계가 설정되면 하나하나 직접 해당운율의 숫자를 센다
 그러나 운율체계를 전자 텍스트 형식의 파일로 입력하는 데에는 추가적인 노력이 거의 필요없다
 일단 세부사항이 입력된 뒤에 그 파일을 알파벳 순서에 따라 소-팅하여 동일한 운율체계가 나타나는 예들이 나란히 나열되도록 한 뒤, 그 숫자를 세는 간단한 프로그램을 개발하면 된다
 프로그램에 대한 자세한 내용은 부록 3을 참조하기 바란다
 이 방법의 추가적인 장점은 운율체계 사이의 유사성이 비록 연구원의 눈에는 명백하게 뜨이지 않아도 소-팅된 목록에는 확연히 나타날 수 있다는 점이다
 분명히 일단 자료가 컴퓨터 파일로 작성되면 그에 대한 다른 연구조사를 하기에도 아주 쉬워진다
 장단점을 비교해 보았을 때, 전체작업에서 이 부분을 컴퓨터로 작업하는 것은 충분히 가치가 있는 것이라고 생각된다

운율체계를 찾는 작업은 수작업으로 하였는데 연구원 한 명이 모두 8시간 작업하여 완료했다
 아주 길거나 복잡한 유형이 유형들 중에는 때로는 표준 운율유형의 대체유형들도 포함되어 있었다의 운율체계를 갖고 있는 자장가를 조사하는 데에는 약간의 문제가 있었다
 그러나 이 문제들은 분석용 소프트웨어를 사용해서는 해결이 어려웠을 것들로 결국은 수작업으로 처리했어야 했을 것들이다
 운율체계에 대한 세부사항들을 컴퓨터에 입력하는 데에 1시간 넘게 걸렸고, 해당운율의 숫자를 세는 프로그램을 개발하여 자료를 입력하여 실행하고, 그 결과를 인쇄하기까지 모두 약 10분쯤 더 걸렸다

자장가 가사를 완전히 컴퓨터에 입력하고, 이 자료를 분석하기 위해서 사용할 소프트웨어를 개발하는 데에 얼마나 오랜 시간이 걸렸을지 측정하기는 어렵지만, 어쨌든 그렇게 했더라면 훨씬 더 많은 시간이 걸렸을 것이다
 물론 컴퓨터 입력작업을 통해서 전자 텍스트 자료를 확보하였고, 영어철자법의 본질에 대한 훨씬 더 많은 정보를 찾아낼 수 있었을 지는 몰라도 이러한 사실들이 반드시 특정연구의 목적을 달성하는 데에 별다른 혜택을 주었다고 보기는 어렵다

모든 연구과제에는 나름대로의 특수한 문제들이 있기 마련이지만, 어떤 연구방법을 선택해야 할 것인지를 고려해야 하는 상황에서는 살펴보아야 하는 기본사항들이 대부분 동일한 경우가 많다
 앞에서 살펴본 예에서 볼 수 있는 주요문제들은 자료준비를 하거나, 또는 복잡한 소프트웨어를 개발하는데 있어서 모두 매우 시간이 많이 걸릴 수 있다는 점이다
 이 두 가지 중의 어느 것이든 필요한 방법을 선택하기에 앞서서 모든 대안들을 주의해서 살펴보아야 한다
 어떤 연구과제들은 아주 복잡해서 적당한 소프트웨어를 성공적으로 개발했다 해도 수작업으로 그 과제를 진행하는 것보다 실제로 시간이 더 걸릴 수 있다
 물론 앞에서 설명한 프로젝트는 그 규모가 아주 작은 것이었다는 것을 염두에 두어야 한다
 대규모 연구의 경우에는 다른 연구방법을 고려할 여지가 거의 없다
 그러나 대안으로 선택할 수 있는 방법들에 소요되는 시간 및 비용계산을 가능한 한 정확히 해두는 것이 좋다
 다음 항에서 이 작업에 필요한 사항들에 대하여 논의한다

일단 컴퓨터를 어떻게 이용할 것인가에 대한 상세한 분석이 이루어진 뒤에는 완전한 비용내역을 준비하기 위해서 다음과 같은 작업 확인서 를 이용할 수 있다
 프로젝트에 소요되는 비용을 예측하기 위해서는 상황에 따라서 시간이나 비용, 또는 이 둘 다를 고려해야 한다
 어떤 경우에는 프로젝트 속성상 반드시 이 비용예측 과정을 거쳐야 하는 경우도 있다
 작업 확인서를 이용하면 비교작업에 대한 정확한 근거를 용이하게 볼 수 있게 해주며, 또 비교할 필요가 없는 부분도 알 수 있게 해준다
 각 질문 다음에 그 질문에 대하여 해답을 찾을 수 있는 가능한 방법을 고딕체로 제시해 놓았다

얼마나 많은 자료를 처리하게 될 것인가?
이것을 알아내기 위해서는 견본숫자를 세어 그로부터 결과를 예측해야 한다

수작업으로 분석하게 되면 얼마나 시간이 걸릴 것인가?
역시 소규모 견본을 골라서 완전히 수작업으로 분석했을 때에 걸리는 시간을 측정하여 그로부터 결과를 예측할 수 있다

자료를 전자 텍스트 형태로 입수할 수 있는가?
이것은 말처럼 쉽지는 않다
 연구의 질을 저하시키지 않고서도 전자 텍스트를 입수하여 원래의 텍스트 대신 사용할 수 있다
 그리고, 물론 이 방법이 가장 바람직하다

만일 전자 텍스트 자료를 구할 수 없을 때 어떻게 텍스트 자료를 전자 텍스트 자료로 변환시킬 수 있을 것이며, 또 그에 소요되는 비용은?
자료입력 방법에 대해서는 2장에서 살펴본다
 일단 가장 적합한 방법을 찾아낸 뒤에는 앞에서처럼 견본자료를 가지고 실험을 한 뒤에, 그 결과를 전체자료의 크기로 확대한 뒤 계산하여 소요시간과 비용을 예측할 수 있다

만일 전자 텍스트 자료를 구할 수 있을 때 그 자료를 컴퓨터로 처리하기에 앞서서 어느 정도나 준비해야 하는가?
일단 어떤 매체와 형식으로 되어 있는 자료를 입수할 것인지를 확정한 뒤, 컴퓨터 전문가에게 문의한다
  2장에서 이 작업에 필요한 주요사항들에 대해서 논의한다
 다시 말하지만, 이 의문을 해결할 수 있는 가장 효과적인 방법은 작은 견본자료를 통해 얻은 결과를 전체자료로 확대하여 계산하는 것이다

전체 혹은 부분 처리과정에 있어서 기존 소프트웨어를 사용할 수 있는가?
기존 소프트웨어 중에는 표준운용체계에서 사용할 수 있는 도구들이 있다예컨대, 소-팅 프로그램, 텍스트 검색용 도구 프로그램 등과 같은 것들은 소규모 문서작성 소프트웨어 팩키지에서 흔히 찾아볼 수 있다
 물론 이들 외에도 빈도목록이나 문맥행 추출 소프트웨어 등과 같은 일반적인 언어분석 도구들도 있다이 프로그램들에 대해서는 3장과 4장에서 논의한다
 항상 주변의 여러 전문가들과 상담하고 또 항상 유연하면서도 풍부한 상상력을 유지하도록 하는 것이 좋다

소프트웨어와 자료가 호환성을 유지하게 하기 위해서는 그 소프트웨어나 자료를 얼마나 수정해야 할 것인가?
이 또한 전문가의 충고가 필요한 부분이다
 여기에 영향을 미칠 수 있는 요소들로는 소프트웨어에 입력하게 될 자료의 기존형식과 자료를 어떤 형식으로 입력할 것인가, 소프트웨어를 사용하면서 결정해야 할 선택사항들 그리고 원하는 결과를 얻기 위해서 해야 하는 사전 및 사후처리 등과 같은 것들이 있다

새로운 소프트웨어를 개발할 필요가 있는가?
이 문제는 에서 언급된 선택사항들을 고려한 뒤에야 결정할 수 있다
 연구목적을 달성하는 데에 관여되는 여러 가지 과업과, 또 그 연구목적들을 어떻게 가장 효과적으로 달성할 수 있을 것인지에 대해서 철저하게 분석하고 난 뒤에야 처리과정에서 필요한 여러 가지 사항들을 알아낼 수 있고 필요한 소프트웨어를 구체적으로 결정할 수 있다

어떤 프로그래밍 언어를 사용할 것인가? 그리고 필요한 전문지식을 얻기까지 얼마나 많은 시간과 비용이 소요될 것인가?
선택된 프로그래밍 언어용用 컴파일러와 또 프로그램 개발환경 구입에 비용이 들 수 있다
 프로그래밍 언어에 대한 일반적인 내용은 부록 1을 참고하기 바란다
 선택한 프로그래밍 언어의 사용법을 배우는 데에는 시간이 많이 소요되고 상당히 어려울 것이며, 또 전문가의 충고가 필요할 수도 있다
 그 소요시간을 예측하기는 상당히 어렵지만 대개는 예상보다 시간이 더 소요된다

기타 비용은?
전문가에게 프로그래밍을 의뢰하면 비용이 많이 든다
 그러나 비용보다 시간이 더 중요한 경우에는 이도 고려해야 한다
 또한 여기에는 소프트웨어 개발에 소요되는 시간에 대한 추가비용도 포함시킬 수 있다
 그 소프트웨어를 완전히 테스트하고 수정하는 데에 소요되는 시간도 포함시켜야 한다

결정에 필요한 다른 요인들은? 이 질문에는 특정 작업방법의 선택에 따라 달라질 수 있는 처리성격의 차이들도 포함됨
연구규모나 속성 등에 따라서 컴퓨터 이용이 불가피한 경우가 있다
 작업 확인서의 다른 항목들도 연구에 필요한 아이디어를 제공해준다는 점에서 중요하다

이 장에서는 컴퓨터를 이용한 언어연구의 장점과 단점을 살펴보았다
 특정 연구 프로젝트를 위해서 컴퓨터를 이용하기로 결정하기 전에 여러 가지 대안들을 평가하는데 있어서 컴퓨터 이용에 소요되는 추가비용과 그 비용을 절약할 수 있는 방법에 대해서 완전히 분석하고, 또 그 분석에 곁들여서 프로젝트에서 특별히 필요로 하는 기타사항들도 함께 고려하여야 한다

1
   철자변이형 연구  프로젝트용으로 5항에서 제시한 질문서의 질문에 대해 대답해보라
  의 텍스트는 20,000행이고 포함되어 있는 단어는 모두 180,000개이다

2
 텍스트에서 나타나는 수동태 문형의 용례를 연구하려고 한다
 어떻게 해
야 하는지 설명해보라:
 수작업으로 할 경우;
 컴퓨터를 이용할 경우

3
 컴퓨터를 이용하여 운율체계를 찾는 방법을 제시하고, 어떤 문제들이 있
을 수 있는지 설명하라

컴퓨터를 이용하여 언어연구를 해보면 수작업 연구에서의 자료입수 가능성과 컴퓨터를 이용한 연구에서의 자료입수 가능성이 매우 다르다는 것을 곧 알게 된다
 이 문제는 1장의 3
1
1항에서 언급하였는데 프로젝트에 직접적인 영향을 미칠 수 있기 때문에 조금 더 자세히 논의하겠다

몇 가지 예외들이 있긴 하지만, 대부분의 언어에는 전자 텍스트 형태보다는 인쇄되어 있는 형태의 자료들이 훨씬 더 많이 그리고 다양하게 존재한다
 이에 대한 주요 예외들로는 오늘날 갈수록 더욱 중요성을 띠어가고 있는 전자우편-이나 이와 유사한 방법들 그리고 문서작성 프로그램으로 작성된 서류 등과 같은 컴퓨터 텍스트들이 있다
 이 유형에 속하는 자료들로는 최근에 인쇄된 출판물들이 속하나, 이들 출판물들에 대한 저작권이나 기밀유지에 어려움이 있어서 일반 연구원들이 입수하기에는 어려움이 있다
 저작권이나 기밀유지 문제에 대해서는 3
3항에서 더 자세히 논의하겠다
 책이나 원고로 되어있는 자료도 그에 못지 않은 제약이 있지만, 이는 연구원이 확고한 결심을 한다면 아무리 희귀한 책이나 귀중한 원고라고 해도 그 내용을 충분히 자세하게 살펴볼 수 있다
 이 자료들, 혹은 더 오래된 다른 자료들이 전자 텍스트 형태로 변환되어 있지 않다면 프로젝트를 시작하기 전에 먼저 변환시켜야 한다

1장에서 이미 지적했듯이 자료입수 가능성은 연구범위에 영향을 미칠 수 있다
 그리고 전자 텍스트 형태의 자료입수에 따르는 문제로 인하여 연구방법의 선택에도 상당한 제약이 따를 수 있다
 이 문제에 대해서는 컴퓨터를 이용한 연구방법의 장점과 단점을 논의하는 연구의 초기 분석단계에서 고려해야 한다
 이 장에서는 검토할 자료의 선택에 필요한 고려사항들을 논의하고, 또 자료를 입수하여 그 자료를 연구작업에 적절하게 만들기 위해 사용할 수 있는 주요 방법들에 대해서 살펴본다

연구기준에 따라서 프로젝트용으로 입수된 컴퓨터에 입력할 수 있는 자료들을 보관용 텍스트에 포함되어 있는 임의의 자료들과 구분하여 일반적으로 말모둠이라고 부른다
 다음 항에서는 연구용 말모둠 설계에서 고려해야 할 사항들을 살펴본다

연구목적이 무엇이든 말모둠을 통해서 그 연구목적을 달성하는 것은 당연한 일이다
 기존 말모둠을 사용할 수도 있는데, 이 경우에는 이 항에서 제기하는 문제점들 중의 몇 가지는 관련성이 없게 된다
 그러나 적절한 자료선택을 하기 위해서는 모든 것을 다 고려하는 것이 좋다

연구 프로젝트 자료의 입수 가능성을 고려하기 전에 연구목적을 정확히 정해야 한다
 이 작업은 생각만큼 쉽거나 간단하지는 않다
 비록 항상 그런 것은 아니지만, 대개의 말모둠은 언어자료를 많이 모아 둔 견본이며, 말모둠 자료 그 자체보다는 훨씬 더 큰 규모인 전체자료에 대한 결론을 찾아낼 수 있도록 해주는 데에 그 목적이 있다
 이것은 특정 말모둠에 한 언어현상에 대한 모든 것이 포함되어 있는 경우에도 일반적으로 적용되는 사실이다

전형적인 예로서 1장에서 논의한  프로젝트를 들 수 있다
 이 말모둠에는 의   전문이 들어 있기는 해도 그렇다고 해서 이것이 견본이 아니라고 말할 수 없다
 비록 연구목적은 이 작품에 나타나는 철자변이형들의 특징을 찾아내는 것이라고 해도, 이 텍스트 일부나 전체를 수록한 다른 필사본들이 있기 때문에 찾고자 하는 모든 해당자료들이 이 말모둠 속에 다 들어있다고 말하기는 힘들다
   필사본을 가지고 연구한 결과 얻은 결론은 당연히 그 필사본 내에서 찾아볼 수 있는 철자변이형들에 대한 증거를 보여줄 수 있지만,    필사본은 아마도 그 필사작업을 담당했던 필생筆生, 들의 글에 불과할 것이기 때문에 찾고자 하는 언어자료의 견본에 불과하다고 말할 수밖에 없다
 다른 필생들이 제작한 사본들에 대해 정확히 밝힐 수 없고, 또 그 사본들이 분실되었다는 사실은 연구의 기본개념 설정에 아무런 영향도 주지 않으며 다만 이로 인해서 연구에 사용할 대표적인 견본을 작성하기 힘들어질 뿐이다

대표성은 말모둠 설계에서 가장 중요한 문제이다
 만일 견본을 통해서 유용한 결론을 도출할 수 있다면 이 견본은 모집단 자료들과 충분한 유사성을 지니고 있어야 한다
 이 유사성 자체에 대해서도 많은 연구가 되기도 했는데, 이것은 미리 알아낼 수는 없다
 그래서 다른 선택근거가 필요하다
 연구결과야말로 채택된 연구방법의 적절성을 확인할 수 있는 유일한 근거이기 때문에 프로젝트에 사용할 최종 말모둠 선택을 잘하기 위해서는 전체 말모둠에 대한 예비연구를 해야 한다
 이에 대한 자세한 사항은 프로젝트에 따라서 상당히 달라질 수 있는데, 작업을 시작하기 전에 철저히 고려해야 한다

일단 이상적인 연구대상 말모둠의 내용이 구체적으로 정해지면 그 말모둠 자료들 중에서 얼마나 연구에 사용할 것인지 결정해야 한다
 조사대상 언어자료에 포함되어 있는 연구대상 분야의 견본이라고 볼 수 있는 말모둠의 대표성은 연구 프로젝트의 필요성을 따질 때에 그 규모에 따라서도 영향을 받는다
 비록 비교적 적은 양의 텍스트라고 해도 그 언어의 가장 보편적인 특징들을 잘 보여줄 수 있어야 한다
 그리고 만일 그 특징들이 연구의 주요주제라면 비교적 적은 양의 말모둠으로도 충분할 수 있다
 어느 특정 연구 프로젝트에서 필요로 하는 말모둠의 적절한 규모가 어느 정도인지 미리 알아내는 것은 불가능하지는 않지만 일반적으로 상당히 어렵다
 다시 한번 말하지만 특정 연구 프로젝트에 필요한 사항들을 미리 예상할 수 있는 가장 효과적인 방법은 비교적 적은 규모의 말모둠을 자료로 사용하여 예비연구를 하고, 필요하다면 그 예비연구 결과를 확대해석하는 것이다

전자 텍스트의 입수방법은 여러 가지가 있다
 어떤 경우에는 텍스트가 이미 전자 텍스트 형태로 되어 있는 경우도 있다
 또는 그렇게 되어 있는 텍스트를 일반회사나 학술기관으로부터 구입하거나 무료로 구할 수도 있다
 사용하는 컴퓨터 하드웨어와 소프트웨어에 맞게 자료를 준비하는 과정에서 약간의 추가작업이 필요할 수 있는데, 이에 대해서는 4항에서 자세히 살펴본다
 어떤 경우에는 텍스트가 인쇄물 또는 사본 형태로만 존재하기도 한다
 이 때에는 이 텍스트를 전자 텍스트로 변환해야 한다

네 가지 주요 개발사업을 통해서 지난 몇 년간 컴퓨터로 읽을 수 있는 텍스트의 종류와 양은 크게 증가하여 왔다:
대규모 텍스트 보관소의 확충
인터넷이라고 불리는 전세계적 컴퓨터 네트워크 체계의 확장
국내 - 시장의 중요성 증대
새 출판물 편집시 문서작성 프로그램 사용
컴퓨터를 이용한 언어연구를 위한 이러한 개발사업들에 대한 상세한 내용은 다음에서 살펴본다

다년간 대규모 학술기관들을 중심으로 컴퓨터로 읽어들일 수 있는 텍스트 수집작업이 점진적으로 이루어졌다
 텍스트 보관소의 숫자와 보관중인 텍스트의 범위도 상당히 증가하고 있는 중이다
 영어텍스트를 보관하고 있는 주요 보관소들 중에는   와   가 있는데, 이 두 곳에는 인터넷을 통해서 무료로 구할 수 있는 방대한 텍스트가 보관되어 있다
 인터넷의 안내 및 검색기능을 이용하면 많은 텍스트 보관소와 그곳에 보관되어 있는 텍스트들을 발견한 수 있다

만일 말모둠을 전적으로 텍스트 보관소에 보관중인 자료들만을 중심으로 하여 제작한다면 분명히 그 구성은 보관소에 보관중인 텍스트의 범주로만 제한될 것이고, 이로 인하여 매우 심각한 제약을 받게 된다
 주요 보관소에 보관되어 있는 자료들은 주로 문학 텍스트에 편중되어 있는데, 그 중에도 특정시기로만 국한되어 있는 경우가 많다
 예컨대   의 영어자료들 중에는 고대영어와 중세영어 텍스트가 비교적 방대하게 보관되어 있고, 또 19세기 문학작품들도 상당히 방대하게 보관되어 있다
 이 경우, 이 시기에 대한 역사적 연구를 하는 사람들에게는 이 자료들이 아주 유용하겠지만, 현대영어로 되어 있는 작품들을 연구하는 사람들에게는 그 유용성이 훨씬 덜하다

주요 국제 학술기관들과 상용商用 컴퓨터 사이트들을 연결해주는 네트워크 체계가 존재한지는 상당히 되었으며, 이를 이용한 전자우편이나 다른 형태의 파일전송을 통한 정보교환을 가능하게 해왔다
 이 국제적 네트워크 시스템은 현재 일반적으로 인터넷물론 정치가나 언론인들은 이보다 조금 더 낭만적으로 들리는 '정보 초고속도로 '라는 용어를 선호하지만으로 알려져 있다
 지난 몇 년간 이 시스템은 엄청나게 확장되어 왔고, 또 사용이 쉽고 편하게 발전해 왔다
 인터넷은 거의 모든 컴퓨터에서 접속이 가능하게 되었다
 인터넷을 이용하기 위해서 부수적으로 필요한 하드웨어는 모뎀이라고 불리는 통신장비인데, 모뎀과 그 작동에 필요한 소프트웨어를 사용하여 컴퓨터를 전화선에 연결할 수 있다

학술용 컴퓨터 시스템에 접속할 수 있다면 대개는 인터넷에 연결할 수 있는데, 인터넷을 가장 적절하게 이용할 수 있는 방법에 대해서는 가까이 있는 전문가의 조언을 받아야 한다
 만일, 이러한 컴퓨터 시스템에 접속할 수 없을 경우에는 최상의 접속  가능성을 모색하기 위해서 필요한 모든 하드웨어와 소프트웨어에 대해서 정밀하게 검토해 보아야 하며, 이렇게 해서 결정된 방법에 소요되는 비용은 전체 프로젝트 견적에 포함시켜야 한다

인터넷에 접속함으로써 얻을 수 있는 주요 장점들 중의 하나는 앞에서 언급한 많은 텍스트 보관소들이 인터넷에 연결되어 있어서 적어도 텍스트들 중의 일부라도 인터넷을 통해서 입수할 수 있다는　것이다
 어떤 경우에는 사전준비 없이 또는 무료로도 인터넷을 통해서 직접 옮겨올 수 있는데, 이렇게 하면 보통 최소의 노력과 최소의 비용 또는 무료로 보관소에 보관되어 있는 다양한 텍스트들을 이용할 수 있게 됨으로써 말모둠 구축에 많은 도움이 될 수 있다
 이런 방식으로 입수된 텍스트에는 대개 몇 가지 이용조건이 붙는다
 그러나 이 조건들은 주로 이 텍스트를 상용商用으로 이용하는 경우에만 적용되며, 학술연구용으로 이용할 경우에는 거의 영향을 미치지 않는다

파일전송 시설은 인터넷 시스템의 필수적인 부분인데, 일단 적당한 사이트를 발견하게 되면 표준 파일전송 소프트웨어를 사용하여 필요한 텍스트를 개인 컴퓨터로 전송할 수 있다
 사용하는 소프트웨어의 정확한 성격은 상황에 따라 다르지만, 국제 컴퓨터 사용자들은 이의 표준화와 단순화라는 두 개의 목적을 추구하기 위하여 노력하고 있다
 따라서 대부분의 학술용 사이트에 보관중인 파일들은 일반 문서작성 프로그램보다도 사용하기 쉬운 프로그램을 사용하여 전송할 수 있다

1장에서 논의했던 프로젝트에 사용된   텍스트는 인터넷 파일전송이 실용화되지 않았던 시기에   로부터 입수했다
 이 텍스트는 대용량 메인프레임 컴퓨터로만 읽을 수 있는 자기磁氣 테이프에 들어 있었다
 이렇게 테이프에 들어 있는 자료는 프로젝트에 사용할 컴퓨터에 호환적인 저장매체로 옮기기 위하여 컴퓨터 전문가들의 도움을 많이 받아야 했고, 메인프레임 컴퓨터상에서 텍스트 편집 프로그램을 이용하여 상당한 양의 사전작업을 해야 했다
 물론 테이프는 우편으로 우송할 수밖에 없었는데, 그 결과 텍스트를 받아서 이용하게 되기까지는 각각 며칠씩 더 걸리게 되었다
 최근에 같은 곳으로부터 입수된 텍스트는 사이트의 목록을 통해서 정밀하게 검색한 후 인터넷상에서 몇 가지 아주 간단한 명령을 통해서 불과 몇 분만에 입수할 수 있었다

어떤 경우에는 특정 사이트에 있는 텍스트가 다른 컴퓨터로는 전송되지 않을 수도 있는데, 이런 경우에는 연구목적을 위해서 다른 사이트를 통해서 직접 접속할 수도 있다
 이 경우에는 대규모 말모둠에 일반인 자격으로 접속하게 되는 것이 보통인데, 호스트 사이트에서 사용할 수 있는 소프트웨어를 통해서만 텍스트를 보고 분석할 수 있으며, 따라서 하고자 하는 작업의 성격에 제약이 가해질 수도 있다
 이러한 종류의 제약들은 그러한 대규모 참고 말모둠에 접근할 수 있다는 것을 생각하면 대단한 것은 아니다
 사의 영어은행  은 현재 이런 방식으로 운영되고 있다
 다음 항에서 언급되듯이 말모둠이 -에 수록되어 제공되는 경우도 있는데, 이런 경우에는 원하는 소프트웨어를 이용하여 자료를 분석할 수 있다

텍스트 말고도 다양한 소프트웨어를 인터넷 사이트에서 구할 수 있는데, 이 경우에는 인터넷 사이트가 전국적, 혹은 국제적 소프트웨어 보관소로서의 역할을 하는 셈이다
 구할 수 있는 소프트웨어들은 컴퓨터 사용자들의 다양한 요구에 부응할 수 있는 것들로서 어떤 것들은 언어분석 목적으로 유용하게 사용할 수 있다
 이들 각각의 소프트웨어마다 상이한 사용조건이 붙는다
 대개는 범용 소프트웨어  가 많아서 무료로 사용할 수 있다
 어떤 경우에는 공유 소프트웨어도 흔하게 볼 수 있는데, 이 소프트웨어들은 필요에 부합되는지를 확인하기 위하여 무료로 사용해 볼 수 있지만 만일 사용하기로 결정한다면 등록비를 지불해야 한다
 사용조건은 대개 해당 소프트웨어에 따라 오는 별도의 파일에 명시되어 있다

이러한 사이트에서 구할 수 있는 소프트웨어와 그 소프트웨어 사용 설명서는 상이한 표준으로 제작되어 있기 때문에 사용 전에 연구목적에 적합한 지 정밀하게 평가해야 한다
 또한 컴퓨터에 설치하기 전에 그 소프트웨어가 바이러스에 감염되어 있다거나, 또는 다른 악성 문제점들을 포함하고 있지 않은 지 분명히 확인해야 하는데, 그렇게 하기 위해서는 가까이 있는 전문가의 도움을 받아야 할 경우도 있다
 여러 가지 잠재적인 문제점들이 있음에도 불구하고 이러한 사이트들에서 구할 수 있는 소프트웨어는 분석도구로서 아주 유용하게 사용할 수 있어서 적어도 연구목적의 일부분을 충족시킬 수는 있다
 소프트웨어 보관소와 또 어떤 소프트웨어들이 현재 보관되어 있는 지를 자세히 알기 위해서는 일반 인터넷 주소 찾기 기능  을 이용하면 된다

지극히 저렴한 대용량 저장매체라는 특성으로 말미암아 -은 복잡한 컴퓨터 게임이나, 백과사전 그리고 기타 참고도서 등과 같은 대용량 저장매체를 필요로 하는 멀티미디어 응용프로그램의 저장매체로 채택되었다
 여기에는 일반적으로 큰 용량의 텍스트와 함께 시각영상, 짤막한 비디오 자료와 음향 등이 포함된다
 만일 보통 650  정도로 알려져 있는 - 저장용량을 전적으로 텍스트만을 저장하는 데에만 할애한다면 엄청난 양의 텍스트를 저장할 수 있다
 더 복잡한 컴퓨터 게임에 대한 수요의 급속한 증가에 따라 일반인에게도 - 드라이브가 점점 더 널리 보급되게 됨에 따라서 전자출판의 개발도 가속화되게 되었고, 이로 인하여 -에 많은 텍스트를 저장하여 출판하게 되었다
 이들 중에는 언어연구 프로젝트에 유용하게 사용할 수 있는 것들도 많다

이러한 형태로 구할 수 있는 텍스트는 3
1
1항에서 텍스트 보관소에 대해 소개하면서 언급했던 것과 유사한 문제점들을 안고 있다
 보관소에 저장되어 있는 많은 텍스트들이 이러한 - 모음집, 그것도 한 장의 -에 저장되어 배포되는 경우가 많은데, 이는 왜냐하면 이 텍스트들이 일반에게 공개되어 있는 동일한 출처에서 입수한 것들이기 때문이다
 그러나 이러한 추세는 변화하고 있어서 출판업자들의 전자출판과 컴퓨터로 읽을 수 있는 텍스트의 잠재적 시장성에 대한 인식은 점점 더 증가하고 있다
 특히, 정기간행물 출판업자들은 정기적으로 텍스트를 -으로 출판하고 있는데 이로 인하여 신문이나 잡지의 전문을 쉽게 구입하여 분석용으로 사용할 수 있게 되었다
 주요 문학작품선집인 - 영시선英詩選 데이터베이스가 또한 개발 중에 있고, 일부는 도서관 같은 곳에서 흔히 찾아볼 수 있다

좀더 구체적인 수요자들을 위해서는 몇 가지 완전하거나 또는 부분적인 말모둠이 이런 - 형태로 구입할 수 있게 되어 있다
 이에는 다음과 같은 것들이 있다 :
, -/ , 와 - 말모둠,
그리고  말모둠의 통시부문 등을 포함한 영어 말모둠 중의  은  ,  - 그리고  환경에서 사용할 수 있다

사의 단어은행-
대영왕립말모둠   
-으로 입수할 수 있는 텍스트의 최대 단점은 텍스트 저장형태라고 할 수 있다
 한 장의 -에 들어갈 수 있는 비교적 대규모의 저장용량에도 불구하고 많은 텍스트들이 너무 방대해서 주어진 공간 안에 다 저장하기 위해서는 그 자료들을 상당히 압축해야 한다
  -에 따라오는 소프트웨어는 이렇게 압축된 텍스트를 풀 수 있게 해주긴 하지만 그 텍스트들을 다른 더 표준적인 소프트웨어를 사용하여 분석하기 위해 다른 저장매체로 옮기기가 불가능할 수 있다
 그렇게 할 수 있다고 해도 사용계약서에 언급된 판권보호를 위해서 금지되어 있는 경우가 많다
 이러한 제약들은 프로젝트 평가를 하는데 있어서 매우 주의해서 고려해야 한다

이제는 대부분의 출판물들이 문서작성 프로그램이나 또는 탁상출판 소프트웨어로 작성되기 때문에 전자 텍스트가 자동으로 만들어지기 마련이다
 비록 출판업자들이 텍스트 사용에 틀림없이 제약을 가하고, 또 사용료를 받으려고 하긴 하겠지만 어떤 경우에는 그러한 자료들을 무료로  입수할 수 있다
 이렇게 할 수 있는 가장 좋은 방법은 출판사와 직접 연락하여 연구의 성격을 설명하고, 판권보호 안전장치에 대해서 강조를 하는 것이다
 그리고 나서 연구성격, 출판사에 돌아갈 이점 예컨대, 해당 출판사의 홍보 그리고 텍스트에서 얻어지는 자료의 잠재적인 상업적 용도 등에 대하여 지속적인 협상을 할 수 있다

어떤 경우에는 저작권자가 상업출판업자가 아닐 수 있다
 예컨대, 만일 학술저작에 대한 연구를 하는 경우라면 학술기관 내에서 문서작성 프로그램으로 편집된 다량의 텍스트를 구할 수 있는데, 단순히 이 텍스트의 사본을 기증하도록 유도함으로써 좋은 결과를 얻게 될 수도 있다
 이런 경우라 해도 텍스트를 작성한 사람은 내용에 대한 권리보호를 받고, 또 자료의 용도에 대하여 확인을 받으려고 할 수도 있다

컴퓨터를 이용한 텍스트 작성이 증가하면서 문서작성 프로그램으로 작성된 텍스트의 출처는 더욱 다양해지고 있다
 업무용 통신, 전자우편 메시지 그리고 초기 교육단계에 있는 아동들의 글짓기 등은 다량의 자료를 구할 수가 있다
 이 각각의 텍스트들은 수집방법과 필요한 형식상의 안전성 면에서 연구자에게 다른 문제들을 야기할 수도 있다
 그러나 상업 출판업자들에 대해서 했던 것과 마찬가지로 개인이나 조직과 직접 연락하여 연구목적을 설명하는 것이 가장 좋은 방법이다

만일 3
1항에서 설명한 출처들을 검색했는데도 불구하고 연구에 필요한 텍스트를 찾지 못했다면 필요한 텍스트를 어떻게 전자 텍스트로 변환할 것인지를 고려해야 한다
 이를 위한 주요방법들에 대해서는 다음 항에서 설명한다
 그러나 어떤 방법을 사용할 것인지를 결정하기 전에 텍스트 저작권 소유자에 대해서도 고려해야 한다
 지적 재산권 관계 법령은 복잡하고 국가마다 상당히 다르다
 그러나 가장 기본적인 고려사항은 텍스트를 전자 텍스트 형태로 변환하기 전에 저작권 소유자의 허락이 분명히 필요하다는 사실이다
 연구 프로젝트에 있어서의 텍스트 사용 관련 법률규정에 대한 몇 가지 고려사항들에 대해서는 3
3항에서 논의한다

텍스트는 분석에 앞서서 일반적인 텍스트 파일로 변환시킨 뒤에 플로피 디스크나 하드 디스크 같은 저장매체에 저장하여 컴퓨터로 처리할 수 있게 해야 한다
 만일 텍스트가 인쇄되어 있다거나, 또는 필사본 형태로 되어 있다면 이 자료들을 컴퓨터 파일로 변환하여야 한다
 왜냐하면 컴퓨터는 종이에 인쇄되어 있거나 필사본으로 되어 있는 글은 처리하지 못하기 때문이다
 물론 컴퓨터가 인쇄된 텍스트를 전혀 처리하지 못한다는 말은 아니다
 그러나 인쇄된 텍스트를 스캐닝하고 그것을 화상 이미지로 저장하여 그 화상을 문자로 인식하는 일은 극히 복잡하고 느리며, 또 실수가 많이 생기기 마련이다
 이 때문에 텍스트 스캐닝은 보통 자료입력과는 별도로 수행되며, 그 결과는 컴퓨터 파일로 저장되어 분석하기 전에 정확히 변환되었는지 확인해야 한다

텍스트를 스캐닝하고 인식하는 과정에는 특수한 하드웨어, 즉, 스캐닝 장비 그리고 이 장비와 같이 사용할 수 있는 텍스트 인식 소프트웨어가 필요하다

3
2
1  스캐닝 하드웨어　 소형이라서 손에 들고 사용할 수 있는 형태를 포함해서 4 크기의 탁상 스캐너 그리고 대형 스캐너 등 다양한 하드웨어가 있다
 손에 들고 사용할 수 있는 스캐너는 가격이 저렴하지만 비교적 좁은 범위의 텍스트만을 스캔할 수 있고, 흔히 4 용지 한 장을 스캐닝하기 위해서는 한 페이지를 두세 번에 나누어서 해야 하며, 언어자료 관련 연구작업용으로는 너무 느리고 정확성이 떨어진다
 반면,    과 같은 대형 스캐너들은 대용량 텍스트를 빠르고 정확하게 처리할 수 있지만 비싼 가격과 크기 때문에 지속적으로 대용량 텍스트 스캐닝을 하는 대형기관이나 주요 연구 프로젝트에 제한적으로 사용된다
 예를 들어서, 이런 스캐너들은 흔히 공공도서관에서 시각장애자들을 위한 자동독서 시스템의 장비로 이용된다
 몇몇 대규모 학술기관에서도 이런 종류의 장비를 갖추고 스캐닝 서비스를 하기도 한다
 탁상 평면 스캐너는 스캐닝 하드웨어들 중에서 중간계층에 속하는 것으로서 주종을 이루는데, 비교적 사용이 쉽고 상당히 많은 양의 텍스트를 꽤 빠르고 정확하게 스캐닝할 수 있다

3
2
1  문자 인식 소프트웨어   스캐닝된 화상畵像 이미지를 텍스트로 변환하기 위해서는 그것을 문자로 인식할 수 있는 소프트웨어가 필요한데, 이러한 소프트웨어는 흔히   , 광학 문자 인식 소프트웨어라고 불린다
 이 소프트웨어 또한 인식 가능한 텍스트의 복잡성이나 다양성 정도에 따라서 다양한 종류가 있는데, 레이저 프린터로 완벽하게 인쇄된 원본을 제외한 다른 텍스트를 스캐닝할 때 정확도를 유지하기 위해서는 고급 평면 스캐너와 상당히 비싼 문자인식 소프트웨어가 필요하다

그러나 프로젝트가 끝난 뒤에는 계속 사용할 가능성이 없는데도 불구하고 소규모 연구 프로젝트만을 위해 사용할 목적으로 고급 스캐너와 문자 인식 소프트웨어 구입에 과다한 비용을 지출하는 것은 좋은 방법은 아니다
 다행히 몇몇 회사에서 다양한 스캐닝 서비스를 제공하고 있는데, 이 회사들을 통해서 비교적 저렴한 가격으로 인쇄된 텍스트를 전자 텍스트 파일로 변환할 수 있다

스캐너 사용에 있어서의 가장 주된 문제는 인쇄되어 있는 문자 인식과정에서 인식실수가 발생할 수 있다는 것이다
 다음 예는 스캐닝한 서류를 교정하지 않은 결과이다
 참고목적으로 스캐닝된 원본에는 없는 행번호를 첨가하였다
 원본 텍스트는 빅토리아 시대에 인쇄된 책의 사본으로서 을 이용하여 스캔하였다:
인쇄되어 있는 원본 텍스트가 상당히 낡은데다가 이 낡은 원본을 보호하기 위해서 복사하여 그 복사본을 스캐닝했음에도 불구하고 변환된 파일은 상당히 높은 정확도를 유지하고 있다
 그러나 2행'' 대신 ''과 16행'' 대신 ''에 명백한 실수가 보인다
 그리고 13행에도 사소한 실수가 보인다
 13행에서는 ''가 아니고 ''여야 한다
 그러나 이것은 주변 텍스트와 비교해도 별로 두드러지지 않는다
 따라서 다른 두 가지 실수보다 교정하기가 훨씬 어렵다
 아무리 스캐닝이 잘 되었다고 하더라도 약간의 실수는 불가피하며 스캐닝된 텍스트를 연구에 적절하게 사용할 수 있도록 만들기 위해서는 상당한 교정작업과 수작업 편집을 해야 한다
 텍스트 교정을 위한 자동적, 또는 반자동적인 방법에 대해서는 4
2항에서 논의한다

스캐닝은 원본 텍스트가 소프트웨어로 인식될 수 있을 정도로 분명하게 인쇄되어 있을 경우에는 아주 유용하고 효과적인 방법이다
 텍스트의 형태나 상태가 스캐닝에 부적합한 경우에는 텍스트를 타이핑해서 컴퓨터에 입력시켜야 할 경우도 있다
 이 작업을 하게 되면 스캐너와 그에 필요한 문자 인식 소프트웨어 대신에 인간 타이피스트로 대체하여 효과적으로 작업할 수 있다
 타이피스트가 상당한 타이핑 능력과 또 관련 텍스트 유형에 대한 적절한 지식을 가지고 있다면 결과는 스캐닝한 경우보다 더 정확하다
 반면, 무척 시간이 걸릴 수 있다
 그리고 연구원이 직접 자료를 타이핑하여 입력하는 대신에 일반 타이피스트를 고용한다면 그 입력비용이 아주 비싸질 수 있다

그러나 어떤 경우에는 선택의 여지가 없는 경우도 있다
 문자 인식 소프트웨어는 인쇄품질이 좋은 텍스트 원본은 상당히 잘 인식할 수 있지만 텍스트 형태가 상당히 복잡하거나 원본이 인쇄되어 있지 않고 필사본인 경우에는 스캐닝 작업을 원활하게 할 수 없거나 또는 전혀 불가능하다
 예를 들어서, 전자출판용으로 의  전문을 전자 텍스트 형태로 변환하기 위해서 했던 작업을 예로 들어보자
 이 사전의 텍스트는 18세기에 인쇄된 원문을 팩스로 받은 것이다
 키보드 입력은 비용이 많이 들었던 관계로 광범위한 문자체를 인식할 수 있게 문자인식훈련을 시킬 수 있는 정교한 을 사용해서 스캐닝하였다
 스캐닝의 정확도는 50% 미만이었고, 그 결과는 전혀 작업에 이용할 수 없었다
 결국 높은 비용에도 불구하고 이 사전의 제 1판과 4판은 전문 자료입력회사에 의뢰하여 타이피스트를 고용해서 키보드로 입력해야 했다

타이피스트에 의한 키보드 입력이 비싼 이유는 정확도를 높이기 위한 방법을 채택하기 때문이다
 키보드 입력실수로 야기된 오타를 찾아내고 교정하기 위해서 전체자료를 다시 한번 완전한 두 번째 타이핑 과정을 거쳐서 검증을 한다
 두 번째 자료입력 단계에서 컴퓨터는 두 번째 타이핑 과정의 모든 키보드 작동을 처음 입력된 자료와 비교하여 차이가 발견되면 그 이유를 찾아내도록 지적한다

정확도 증진도 증진이지만 키보드 직접입력의 주된 장점은 입력과정에서 추가정보를 입력할 수 있다는 것이다
 이에 관해서는 4
3에서 논의한다

지금까지 텍스트 스캐닝과 키보드 입력을 논의하면서 우리는 연구자료 원본이 인쇄되어 있거나 필사본인 것으로 가정했다
 발화 언어자료는 소리형태로 되어있는 정보를 컴퓨터에 입력시키기 전에 문자형태로 변환하는 사전事前 처리단계가 필요하다는 점에서 좀더 복잡하다
 만일 발화언어자료의 대본으로 작업한다면 이는 분명히 이미 글로 된 형태이며, 따라서 위에서 언급한 방식대로 처리할 수 있다
 그렇지 않다면 궁극적으로 컴퓨터로 분석하고 처리할 수 있는 자료형태로 변환시키기 위해서 어떤 방식으로든 대본제작에 필요한 절차를 선택하여 이행해야 한다

물론 컴퓨터에 발화자료를 입력하여 직접 처리하게 하거나, 또는 자동적으로 그것을 문자형태로 변환할 수 있다면 훨씬 더 편리할 것이다
 이를 위해서는 에 해당하는 음성언어인식 소프트웨어를 개발해야 한다
 비록 음성인식 분야에 있어서 약간의 진보가 이루어지긴 했어도7장 참조 아직 음성을 언어로 처리할 수 있게 해주는 효과적인 번역방법은 없다

앞에서 말한 텍스트를 컴퓨터로 처리할 수 있는 형태로 변환시키기 위한 모든 방법들은 이미 연구대상으로 선택된 텍스트를 합법적으로 사용할 권한을 확보한 경우에만 사용할 수 있다
 수작업으로 할 경우에는 이것은 별로 중요한 문제가 아니다
 왜냐하면 학술 출판물의 경우에는 텍스트 검색과 그 결과로 얻어진 내용을 적절히 인용하는 것은 널리 용인되어 있는 일반적 관습이기 때문이다
 컴퓨터를 이용함으로써 야기될 수 있는 가장 중요한 문제는 텍스트를 전자형태로 저장하게 된다는 것이다
 이것은 출판물에 포함되어 있는 출판사 소유 저작권 규정에서 구체적으로 금지하고 있어서 만일 텍스트를 전자형태로 저장하게 되면 국가마다 다르게 규정해 놓은 복잡한 지적 재산권 관련법규를 위반하게 될 수도 있다
 그러나 이 복잡한 문제를 피할 수 있는 기본적인 방법이 있다

확실히 해둘 것은 텍스트의 저작권에 대한 정확한 사항을 확인해보는 것이다
 만일 사용하려고 하는 텍스트가 꽤 오래 전에 출판되었다면 저작권 시효가 지났는지도 모른다
 정확한 시효기간은 국가마다 다르기 때문에 확인해 보아야 한다
 오래된 작품이라고 해도 새 판본이 출판된 경우에는 저작권이 갱신되었을 경우가 있다는 것을 잊지 말아야 한다
 이 점은 전자 텍스트로 출판된 경우에도 적용된다

일단 저작권자가 확인되면 공식적으로 그 텍스트를 연구목적으로 사용할 수 있도록 허가해 줄 것을 요청하는 편지를 써서 보내야 한다
 여기에서 연구성격, 텍스트를 어떤 저장매체에 저장할 것인지 그리고 그것을 이용해서 어떤 형태로 출판하게 되고, 또 허가해줄 경우에 어떤 식으로 답례할 것인지에 대해 구체적으로 설명해야 한다
 텍스트 보관소를 통해 구한 텍스트는 저작권과 사용허가에 대한 문제들은 텍스트를 보관소에 처음 접수시킬 때 이미 정해지는 것이 일반적인데, 해당 텍스트를 입수하기 위해서 인터넷으로 접속할 때 저작권과 관련된 사용조건에 동의하도록 되어 있다

텍스트를 입수하거나, 혹은 가장 적합한 방법을 통하여 특별히 입력하게 되었다 해도 그 텍스트는 여전히 약간 수정할 필요가 있다
 자료의 형식적, 논리적 형식이 사용하려고 하는 하드웨어나 소프트웨어에 적합하지 않다거나, 또는 텍스트에 아주 중대한 실수가 있을 가능성도 있다
 또한 모든 것이 완벽한 텍스트라고 해도 필요상 다른 사항을 추가해야 하는 수도 있다
 이 항에서는 가장 문제가 될 수 있는 분야들을 살펴보고 그것을 극복할 수 있는 유용한 방법들에 대해서 알아본다

컴퓨터로 처리할 수 있는 텍스트는 -이나 다른 형태로 인터넷 사이트에서 받을 수 있지만 이미 사용중인 하드웨어나 소프트웨어에는 호환적이지 않아서 사용하지 못할 수도 있다
 그 이유는 보통 텍스트의 형태, 즉 다른 말로 말하자면 텍스트가 저장된 저장매체나, 텍스트의 논리적 형태와 관련이 있다
 이 두 가지 모두가 사용중인 하드웨어, 소프트웨어와 호환성이 없다면 적절한 변환과정을 거치지 않고서는 자료를 사용할 수 없다
 여러 가지 변환방법들이 있는데, 다음 항목들에서 논의하는 일반적인 방법들이라면 어떤 돌발적인 상황이라고 해도 다 해결할 수 있다

컴퓨터가 상업적 혹은 학문적 목적으로 다양하게 사용되기 시작한 이후 다양한 형태의 물리적 저장매체가 개발되어 왔다
 컴퓨터 역사의 초창기에는 대형 메인프레임 컴퓨터가 일반적이었는데, 자료교환 목적을 위해 주로 자기磁氣 테이프를 저장매체로 사용했다
 개인용 데스크탑 컴퓨터가 도래함에 따라 모든 저장목적으로 플로피 디스크가 자기 테이프를 대체하게 되었으나 그 크기, 저장밀도, 혹은 자료형식에 있어서 단일기준이 없었다
 그 결과 여러 가지 기준이 채택되어 현재까지 사용되어 왔다
 자기 테이프 카트리지나 카세트는 몇몇 개인 컴퓨터 시스템에서 아직도 사용되고 있긴 하지만 대개는 대규모 저장 혹은 비상용 사본 저장 등의 용도로 사용되고 있다

대부분의 구형 컴퓨터에서는 직경 5
25인치짜리 디스크가 사용되었으나 현재의 기준규격은 3
5인치이다
 비교적 최신 모델에 이르기까지 여러 규격의 디스크가 사용되어 왔지만 다양한 디스크 규격과 호환성이 있는 디스크 드라이브가 필요하다
  3
5인치 기준규격의 디스크에 있어서도 두 가지 저장밀도가 있어서 0
72 혹은 1
44 자료를 저장할 수 있고 5
25인치 디스크에 있어서도 상황은 비슷하다
 이밖에도 현재 가장 일반적으로 사용되고 있는 두 가지 주요 개인 컴퓨터들 -  호환 와   - 에 있어서 동일한 디스크에 각각 완전히 다른 저장방식을 사용하고 있다
   호환기종 컴퓨터에서 사용할 수 있도록 포맷된 디스크들은 특별한 소프트웨어가 있어야만   컴퓨터에서 사용할 수 있고,   컴퓨터용으로 포맷된 디스크는  호환 에서는 사용할 수 없다
  운용체계로 운용되는 컴퓨터에서는 흔히  호환 나   컴퓨터와는 완전히 다른 저장방식을 사용하지만 -로 저장된 디스크는 읽을 수 있다
 
이런 복잡한 상황은 결국 연구용 텍스트들이 사용하려는 하드웨어와 운용체계에 호환적이고 또 적정규격의 저장매체에 저장하여 사용할 수 있어야 한다는 것을 의미한다
 주요 변환방법들에 대해서는 다음에서 논의한다
 개별자료마다 있을지 모르는 문제점들을 해결하기 위한 가장 적절한 방법의 결정은 주변에 있는 전문가가 간단히 할 수 있는데, 이렇게 함으로써 좌절감을 방지할 수 있고 시간과 노력의 낭비도 줄일 수 있다

4
1
1  이중 디스크 드라이브    만일 텍스트가 사용하려고 하는 컴퓨터에 맞는 디스크와는 다른 규격의 디스크에 저장되어 있긴 하지만 자료형식은 같은 경우에 두 가지 규격 모두를 읽을 수 있는 디스크 드라이브를 갖춘 컴퓨터가 필요하다
 드라이브의 저장밀도 또한 중요하다
 고밀도 저장이 가능한 드라이브는 보통 같은 형식의 저밀도 저장 디스크를 읽고 쓸 수 있다
 그러나 항상 적합한 디스크를 사용해야 한다
 예컨대, 저밀도 3
5인치 드라이브가 설치된 -호환 컴퓨터를 이용하려고 하는데 자료는 현재 다른 -호환 컴퓨터용 고밀도 5
25인치 디스크에 저장되어 있다면 5
25인치 드라이브와 3
5인치 드라이브를 둘 다 갖춘 -호환 컴퓨터를 사용하여야 한다
 그러한 컴퓨터에 갖춰진 두 가지 디스크 드라이브는 고밀도와 저밀도 디스크를 모두 읽고 쓸 수 있고 3
5인치 드라이브용 디스크에 자료를 복사하기 전에 그 디스크가 저밀도이고, 또 저밀도로 포맷되었는지 정확히 확인해야 한다

이와 같은 경우에는 자료를 복사하는 디스크가 저용량 디스크이면 더 많은 숫자의 디스크가 필요하다
 만일 특정파일이 크기가 너무 커서 새 디스크의 최대용량을 초과하게 되면 그 파일들을 작은 디스크에 맞게 하기 위해서 텍스트 편집기나 파일 분리 소프트웨어를 사용하여 작게 나누어 저장해야 한다

만일 파일형식을 완전히 다른 유형의 컴퓨터에 사용할 수 있는 형식으로 변환해야 한다거나, 적절한 유형의 이중 디스크 드라이브를 갖춘 컴퓨터가 없다면 자료를 한 컴퓨터에서 다른 컴퓨터로 직접 전송하는 방법이 있다
 이 작업을 하기 위해서는 두 컴퓨터를 연결하는 특수 케이블을 사용하거나, 또는 두 컴퓨터가 동일한 네트워크나 적절한 통신시설과 연결되어 있어야 한다
 이것은 인터넷을 통해서 자료를 보관소가 있는 사이트로부터 전송받기 위해서 사용할 수 있는 방법이다
 그러나 이 방법은 또한 같은 책상에 두 대의 컴퓨터를 나란히 놓고서 자료를 한 형식에서 다른 형식으로 변환하기 위해서도 유용하게 사용할 수 있다
 통신용 소프트웨어는 거의 대부분의 컴퓨터에서 사용할 수 있게 되어 있다
 그리고 자료가 적합하지 않은 형태로 되어 있는 경우에 두 컴퓨터 사이에 그 자료를 원래의 상태대로 전송할 수 있게 하기 위해서 극도로 표준화되어 있다
 컴퓨터 사이의 정보교환에 관해서 주로 고려해야 할 점들은 4
1
2에서 간단히 설명한다

일단 텍스트 파일을 적합한 저장매체에 적절한 크기와 정확한 형식으로 변환하여 컴퓨터로 읽어들일 수 있는 파일로 변환한 뒤에는 그 파일이 논리적으로도 적절한 형식을 갖추게 해야 한다
 대부분의 텍스트 연구 소프트웨어에 대해서는 다음의 몇몇 장에서 논의하기로 한다
 그리고 텍스트가 표준화된       형식, 또는 흔히  표준이라고 불리는 형식으로 되어 있으면 대부분의 프로그램은 이를 직접 사용할 수 있다
   표준은 오래 된 것으로 컴퓨터 역사의 초창기부터 비롯되었는데, 그 당시에는 컴퓨터에서 사용가능한 문자가 단지 128자밖에 안되었다

강세표시가 붙지 않는 표준 로마 알파벳 문자들을 제외한 문자들을 표기화하는데 있어서 이것은 상당한 의미를 함축하고 있다
 이 문자들 이외의 문자가 텍스트에서 사용된다면 어떤 다른 표기법으로 표기할 수밖에 없다
 흔히 원본에서 한 문자로 표기된 텍스트를 컴퓨터로 처리할 수 있게 하기 위해서는 두 개, 혹은 그 이상의 문자들을 조합하여야 한다
 한 예로,  영어 말모둠의 통시通時 자료들 속에는 현재 영어에서 사용되지 않는 문자들이 포함되어 있다
 이 문자들은  체계에서는 제공되지 않기 때문에 그 표기를 위해서는 두세 문자를 조합해야 한다
 예컨대, þ''은 +로 표기한다
 말모둠 처리에 사용하는 모든 소프트웨어는 이 특별한 표기관습을 처리할 수 있어야 한다
 그리고 만일 소프트웨어에서 이를 적절히 처리하지 못한다면 그 경우에는 텍스트 파일을 수정하여 분석결과가 잘못 나오는 일이 없도록 해야 한다

텍스트가 처음부터  형식으로 되어 있지 않을 가능성도 있다
 만일 문서작성 프로그램이나 탁상출판 프로그램을 사용하여 작성된 텍스트 파일의 경우에는 텍스트 포맷팅 , 페이지 형태, 텍스트에 포함된 도표나 그림 등과 같은 추가정보들을 포함하고 있을 가능성이 있다
 이 추가정보로 인해서 단순한  형식 파일과는 크게 다를 수 있는데, 선택한 소프트웨어로 파일을 처리하기 전에 그 파일을 적절하게 변환시켜야 한다
 대부분의 문서작성 프로그램이나 탁상출판 프로그램에는 파일형식 변환기능이 포함되어 있는데,  는 보통 그중의 한 선택사항으로 포함되어 있다
 텍스트 변환을 하면 문자체, 크기, 문단 들여쓰기 등과 같은 정보들이 모두 사라진다는 것에 주의해야 한다
 이들 중 하나라도 작업에 중요하다면 파일을 원형 그대로 처리할 수 있는 소프트웨어를 찾거나 개발해야 한다

어떻게 입수하였는지를 불구하고 여러 이유로 인하여 텍스트에는 실수가 포함되어 있기 마련이다
 여기에는 스캐닝하는 과정에서의 부정확한 문자인식에 의한 오타, 텍스트 입력시時 혹은 원본자료 작성시의 오타 등과 텍스트의 일부분이 생략, 중복되었거나, 혹은 틀린 위치에 오는 것 등이 포함된다
 입력과정에서 실수를 최소화해야 하는데 아무리 꼼꼼하게 살펴본다고 해도 항상 약간의 실수는 남아있기 마련이다
 실수교정은 연구에 사용할 자료를 준비하는 데 있어서 중요하지만 시간과 비용이 많이 소요되는 작업이다
 그래서 실수교정을 어떻게 할 것인가를 결정하기 전에 적정 실수율을 결정해야 한다
 결과에 중대한 영향을 미치지 않는 실수들은 교정할 필요가 없다
 그리고 대개는 자료가 얼마나 정확한 지 알아보기 위한 예비연구를 시행하는 것이 좋다
 일단 필요한 실수발견과 적절한 실수교정 정도를 결정한 뒤에는 보조적으로 컴퓨터를 이용하여 그 작업을 더욱 효과적으로 하거나, 또는 아예 전적으로 컴퓨터를 이용하여 할 수도 있다

텍스트 교정을 위해서 컴퓨터를 이용하는 방법 중에서 가장 간단한 것은 텍스트 파일의 철자검사를 하는 것이다
 요즘 모든 문서작성 프로그램들은 이 기능을 가지고 있는데 만일 텍스트 파일이 철자검사 프로그램에 사용할 수 있는 형태라면 철자검사 기능을 사용하여 많은 오타들을 찾아낼 수 있다
 물론 이 방법은 1장에서 논의한 기본 프로젝트인   텍스트에 사용하기에는 적절하지 않다
 그리고 또한 텍스트 철자변이형을 연구하는 프로젝트에도 사용하기에 적절하지 않다
 당연히 철자검사 기능은 철자검사 프로그램용 단어사전에는 들어있지 않은 철자실수만을 찾아낸다
 예를 들어서, 텍스트에 이라는 단어가 있는데 어떤 이유에서인지 그 단어가 로 입력되었다면 그 단어는 찾을 수 있다
 하지만, 그 단어가 로 입력되었다면 전혀 찾을 수 없다
 많은 경우에, 두 번째 실수는 연구결과를 더욱 심각하게 왜곡시킬 수 있으며 후속단계에서도 못 찾을 가능성이 더 크다

컴퓨터는 자동실수교정을 위하여 이용할 수 있다
 그러나 다만 그 실수들이 일관되게 반복되고 또 그것을 정확하게 찾아낼 수 있을 때라야만 사용이 가능하다
 예를 들어서, 하이픈으로 잘린 단어들의 경우에 행단 하이픈을 찾아서 다음 행 앞에 오는 나머지 문자들과 연결시켜주는 간단한 프로그램을 만들었다고 하자
 그런 프로그램은 하이픈을 일반 대시와 구분할 수 있어야 하고, 또 단어의 끝을 인식할 수 있어야 한다
 그러나 이들은 전혀 중요한 문제가 되지는 않는다
  8장의 2
1항에서는 문제점들에 관련된 더욱 실질적인 예들을 자세히 살펴보겠다
 그리고 그 문제를 해결할 수 있는 프로그램은 부록 3에서 설명해 놓았다

이와 비슷하게 만일 한 단어가 스캐닝 과정의 문제나 혹은 타이피스트의 실수로 일관되게 잘못 입력되었다면 모든 틀린 형태를 자동으로 교정할 수 있다
 물론 이 작업을 확실히 실행하기 전에 그 실수가 일관된 실수라는 것과, 또 그 실수들 중의 어떤 것도 다른 단어의 정확한 형태가 될 수 있는 가능성이 없음을 확인해야 한다
 아주 흔하게는, 조금이라도 의심된다면 '바꾸기' 기능을 실행하기 전에 확인해보기 위해서 문서작성 소프트웨어의 '찾아 바꾸기  ' 기능을 사용할 수 있다

문학 텍스트에서 흔히 볼 수 있듯이 원본 텍스트에 행번호가 붙어 있으면 컴퓨터를 이용해서 신속하게 행 숫자를 세어서 전체 행 숫자와 대조하며 확인할 수 있지만 그 밖의 생략되거나 중복된 부분을 찾기 위해서 컴퓨터를 이용하는 것은 상당히 어려운 일이다
 만일 텍스트의 일부가 단순히 틀린 위치에 놓여 있다면 이런 방법으로 그 사실을 찾기는 힘들다
 그러나 텍스트가 완전하기만 하다면 전체결과를 그다지 크게 왜곡시키지는 않을 것이다

텍스트의 정확도가 중요한 경우에는 컴퓨터를 이용하는 대신에, 혹은 컴퓨터 이용과 병행하여 수작업 확인작업을 해야 한다
 텍스트 전반에 걸친 교정작업이야말로 정확성을 확신할 수 있는 유일한 방법인데, 그 유용성은 전적으로 교정작업자의 기술과 신뢰성에 따라서 결정된다
 이 방법은 또한 시간이나 비용, 또는 이 두 가지 모두 소요될 수 있는 방법이기도 하다
 어떤 경우, 특히 특별한 표식부호와 같은 기타 정보들이 추가되어 있는 것을 찾아내야 하는 경우에는 텍스트의 정확성을 결정하기 위해서 신중한 판단이 요구된다
 그리고 교정작업자는 프로젝트를 완전히 이해하고, 또 편집상의 결정을 내릴 수도 있어야 한다

실수 교정작업과는 별도로 분석에 앞서서 텍스트에 기타정보를 추가해야 할 경우도 있다
 예컨대, 적절한 수준 내에서 특정형태의 분석만이 실행될 수 있도록 하기 위해서 텍스트의 각 부분마다 명칭을 붙여야 하는 경우를 들 수 있다
  3
2
2항에서 언급한 의 의 전자 텍스트에서 상당히 복잡한 예를 찾아볼 수 있다
 전체 텍스트를 입력하는 동안 각 사전항목 내에서의 텍스트의 성격을 표시하기 위하여 특별한 표시부호들이 추가되었다
 프로젝트 초기단계에서 선택한 의 예를 다음에서 살펴보자:
위의 예에서 원본 텍스트의 각 요소들은 별도의 행에 입력되며 각 행은 '@'과 그 뒤에 번호를 붙인 표식으로 표시된다
 이 표식들은 사전항목 내에 포함된 상이한 정보들을 나타낸다
 예를 들어서 '@1'은 표제어 명칭이고 '@2'는 이 이　표제어에　부가한 문법정보이며, '@3'은 어원정보, '@4'는 표제어의 개별의미, 등등
 이 체계는 필요해서 만든 구체적인 것이지만 텍스트 준비과정, 저장 그리고 연구에 있어서의 일반적인 필요성으로 인하여 이를 위한 텍스트 부호화안 -   이라는 표준체계를 개발하는 단체가 구성되어   - 이라는 표식체계를 채택하였다
  은 현재 텍스트 보관소에 보관할 텍스트의 준비작업용으로 광범위하게 사용된다

표식부호 추가와 관련되어 있는 주요문제는 텍스트를 위한 구체적인 부호화 체계의 설계와 채택뿐만이 아니라 그 구체적인 응용에 있어서 필요한 판단수준 등이 있다
 만일 그 부호들을 키보드 입력자가 텍스트로부터 자료를 입력하는 동안 같이 입력한다면 가장 효율적이긴 하겠으나 자료입력을 시작하기 전에 키보드 입력자들을 철저하게 훈련시켜야 하며, 입력이 진행되는 동안 엄정한 관리감독을 해야 한다
 비록 그렇게 해도 그 결과를 프로젝트에 사용하기 전에 일일이 수작업 확인작업을 해야 한다

1
	영국의 초등학생들이 읽을 만한 가장 대표적인 문어체 형식의 글 말모둠에 포함시킬 수 있는 유형의 텍스트는?
2 
	일반 구어체 영어를 컴퓨터로 처리할 수 있는 말모둠을 설계하고 자료수집작업을 진행하는 방법은?
3
	현재까지 컴퓨터로 처리할 수 있는 형태로 되어 있지 않은 중세 텍스트를 사용하여 말모둠을 구축하려고 한다
 자료입력에 사용될 수 있는 여러 방법들의 장단점에 대해서 논의하라

말모둠이 준비되면 구체적인 조사를 하기 전에 먼저 그 자료를 대강 살펴보아야 한다
 사전事前조사하기에 가장 좋은 방법은 텍스트의 빈도목록을 작성하는 것이다
 간단히 말하면, 빈도목록은 말모둠 내에서 텍스트를 구성하는 단어들을 각 단어의 출현빈도와 같이 보여준다
 이 빈도목록은 다양한 순서로 작성할 수 있는데, 단어 이외의 다른 단위에 대해서도 작성할 수 있다
 빈도목록은 아주 간단한 것이기는 해도 강력한 도구가 될 수 있다

단어 빈도목록은 텍스트에 나타나는 각 단어형태와 동일한 단어형태를 찾아서 일정한 순서로 그 단어들과 각 단어들의 출현빈도와 기타 관련정보를 같이 제시해준다
 이 단계들 중에서 어느 하나도 쉬운 것은 없다
 잠재적인 문제들에 대해서는 2항에서 논의하기로 하자
 당분간은 가장 중요한 문제인 '동일단어형태  '라는 개념을 명백한 것으로 간주하고, 또 그 단어형태들을 쉽게 정의하고 찾아낼 수 있다고 가정한다
 빈도목록 작성의 한 예로서   에 포함되어 있는   의     에서 발췌한 짧은 텍스트를 살펴보자 :
         
         ;    , ,   ,         

이 짧은 텍스트를 간단한 단어 빈도조사 프로그램을 이용해서 분석하면 다음과 같은 목록을 얻을 수 있다:
단어 빈도조사 프로그램에 대해서는 부록 3에서 자세하게 설명하였다
 이 빈도목록은 단어형태의 어순에 따라서 만들어졌다
 비록 이렇게 하는 것이 어떤 목적으로는 편리할 지 몰라도 때로는 텍스트 예비조사를 하기 위해서는 다음처럼 출현빈도의 역순으로 작성하는 것이 더 유용할 수 있다 :
이상의 텍스트는 아주 짧기 때문에 한 번 이상 출현하는 단어형태는 세 개뿐이라는 점을 제외하고는 별로 흥미로운 점을 찾아볼 수 없지만 기본개념은 잘 보여준다
 다음 항에서는 이 목록의 특징에 대해서 자세히 살펴본다

 전체 텍스트를 이용하면 위의 일부 텍스트로 작성한 목록보다 훨씬 더 재미있는 목록을 작성할 수 있다
 다음 목록에서는 빈도의 역순으로 나열된 목록에서 가장 빈도가 높은 30개 항목을 보여주고 있다:
전체 텍스트에는 6,986개의 상이한 단어형태로 된 75,214개의 단어가 있다
 다시 말하면, 위의 목록은 6,986행이나 되는 전체목록에서 30행만을 보여주고 있다
 각 단어의 평균출현빈도는 10
8이다
 이는 75,214를 6,986으로 나누어서 얻은 결과 전체목록에서 5,999개의 단어는 10번 미만 나타나고 2,996개의 단어는 단 한 번만 나타난다

이 통계의 의미에 대해서는 다음의 1
3항에서 약간 더 자세히 살펴보기로 한다
 그러나 목록만 놓고 볼 때 몇 가지 흥미로운 사항이 있다
 목록의 30개 단어 모두가 문법어 로서 텍스트 구성에서 중요한 역할을 하지만 의미에는 직접적이거나 독립적으로 기여하지는 않는다는 것이다
 전통품사론의 용어를 빌리자면 이런 문법어로는 관사와 , 접속사,  그리고 , 대명사, , , 등 등이 있다
 전체목록에서 독립의미구성에 기여하는 첫 번째 단어는 으로 137번의 출현빈도를 보이고, 그 다음이 134번의 빈도를 보인 , 115번의 빈도를 보인  그리고 98번의 빈도를 보인 이다
 제일 처음 출현하는 고유명사는 로서 92번의 빈도를 보이고,  이 59번 그리고 이 55번이다
 이 사항들은 그 자체만으로는 거의 쓸모가 없다
 그러나 자료로 선정된 텍스트의 성격에 대한 지식 또는 다른 텍스트들을 연구하여 얻은 지식과 합치면 그 텍스트에 대한 예비조사를 하거나 텍스트의 주요특징 연구에 유용한 자료를 제공해줄 수 있다

빈도목록은 다른 텍스트를 대상으로 작성된 비슷한 종류의 목록들과 비교해보면 그 유용성을 알 수 있다
 이 목록과 일반 대규모 말모둠을 이용하여 작성된 목록을 비교해 보면 그것을 알 수 있다
 표 3
1에서는  단어 빈도목록 중에서 10개의 단어들을 1991:143가 인용한  말모둠의 단어 빈도목록에 나타나는 10개의 단어들과 비교하여 나란히 보여주고 있다

이 두 목록의 비교에서 가장 중요한 특징은 와 의 위치의 차이라고 할 수 있다
 두 목록에 나타나는 단어들 중에서 빈도순서로 볼 때 6번째까지의 단어들을 비교해보면  목록에서는 와 이 7번째와 8번째로 빈도가 낮은 반면에  목록에서는 5번째와 6번째에 나타나고 있다
 더욱 놀라운 것은  목록에서 8번째에 오는 가  목록에서는 3번째에 오며,  목록에서는 6번째 단어인 가 전체  목록에서는 전혀 눈에 뜨이지 않는 56번째 위치에 온다는 것이다
 비록 두 텍스트가 규모에 있어서 큰 차이가 나는 관계로 두 목록 사이에서 단어들의 절대빈도를 비교한다는 것은 별다른 사항을 발견하는 데에 도움이 되지는 않아도 이 두 목록을 비교해보면 더욱 놀라운 결과를 얻게 된다
 만일 의 상대빈도를 가장 빈도가 높은 단어와 비교하여 비율로 나타낸다면  목록에서는 거의 68%나 되는 반면에  목록에서는 21%밖에 되지 않는다
 에 대해서도 같은 비교를 해보면 각각 42%와 4%가 된다
 비록 유의도有意度를 결정하기 위해서는 통계분석을 해야 하긴 하지만, 이것은 상당히 의미심장한 차이라고 하지 않을 수 없다

에 대해서 조금이라도 알고 있는 사람이라면 왜 이 차이가 나는지 설명할 수 있다
  은 1인칭 서술체로 되어 있기 때문이다
 유명 영문선집에는 대부분 1인칭 서술체가 사용되긴 하지만, 텍스트 전체가 이렇게 되어 있는 경우는 거의 없다고 할 수 있다
 반드시 빈도목록을 사용했기 때문에 해당 텍스트에 대해서 어느 시점까지 알려지지 않았던 사항이 밝혀지게 되었다고 말할 수는 없다
 그러나 이것은, 만일 예를 들어서 여러 종류의 텍스트를 서술형식에 따라서 분류해야 한다면 이 분류작업을 자동화시킬 수 있는 절차의 개발에 아주 유용한 근거가 될 수 있다

현재로서는 빈도목록을 통해서 텍스트의 기본특징을 찾는 데에 유용하게 쓰일 수 있는 특징들을 찾을 수 있다
 이 빈도목록은 또한 추가 연구대상 단어를 선택하는 데 있어서 기본이라는 점에서 아주 중요한 가치를 지닌다
 빈도목록을 통해서 각 단어들이 텍스트 내에서 얼마나 유의하게 사용되는 지를 알 수 있고, 다른 말모둠들과 비교함으로써 비정상적 분포상황을 한 눈에 알아볼 수 있다
 빈도목록을 조사하는 과정에서 생긴 의문점들은 다른 연구방법들을 사용해서 계속 연구할 수 있다
 다음 장에서는 특별히 텍스트 내에서 단어형태에 대한 더 자세한 정보를 찾기 위해 사용할 수 있는 문맥행 목록 에 대해서 자세히 살펴본다
 이 문맥행 목록의 용도는 단어 빈도목록을 주의해서 살펴보면 더욱 정확하게 알 수 있다

이 간단한 도구를 효율적으로 사용하기 위해서는 찾아낸 정보를 가능한 한 가장 적절한 형태로 제시해 주어야 하며, 또 이 목록 내에서의 단어들의 나열순서도 아주 중요하기 때문에 필수적으로 고려해야 한다
 1
2항에서는 역순 빈도배열 이외의 배열방법들에 대해서 살펴보고 이런 방법들을 사용해야 하는 이유에 대해서 논의한다

내림차순 빈도 배열순서는 텍스트나 말모둠 전체를 연구하거나 그 텍스트나 말모둠의 구성성분들을 다른 텍스트나 말모둠의 구성성분들과 비교하기 위한 목적으로 아주 효과적으로 사용할 수 있다
 그러나 이 순서는 문장 내에서의 개별단어의 역할을 살펴보는 데에는 별 도움이 되지 않는다
 왜냐 하면 목록을 이렇게 내림차순으로 배열하면 그 목록에서 개별단어를 찾아내기가 어렵기 때문이다
 이 때문에 빈도순 목록 이외에도 인쇄하는 경우에는 알파벳 순서로 단어형태를 배열한 목록 그리고 컴퓨터로 읽어들일 수 있는 목록의 경우에는 단어형태를 검색할 수 있는 목록이 필요하다
 단어를 알파벳 순서로 검색할 수 있다면 그것도 아주 편리한 방법인데, 그 이유는 연구대상 단어를 전체목록에서 찾아야 하는 경우도 있기 때문이다

전통적인 알파벳 순서로 된 목록은 개별 단어형태들에 대한 조사 및 연구를 쉽게 해줄 뿐만 아니라 비슷한 문자열로 시작되는 단어들을 한 곳에 오게 해주기도 한다
 만일 텍스트에 나타나는 어떤 단어형태의 다른 굴절형을 지닌 단어를 조사하려는 경우에 이 목록은 유용하게 쓰일 수 있다
 그러나 만일 연구대상이 개별 단어형태보다는 단어유형이라면 단어의 어미형태가 어두형태보다는 더욱 유용할 것이다
 이 경우에는 역순으로 나열된 단어형태들을 그 알파벳 순서로 나열해 놓은 목록이 아마 더욱 유용할 것이다
 이 과정에서 야기될 수 있는 기술적인 문제들은 해결하기가 별로 복잡하지 않다
 그리고 그 결과는 상당히 많은 것들을 보여줄 수 있다
 부록 3에 이와 관련된 프로그래밍을 어떻게 할 것인가에 대해서 몇 가지 제안을 해놓았다
 다음에 제시한 목록은  목록에서 일부를 발췌한 것인데, 이 부분목록에 대해서는 이미 1
1항에서 논의한 바 있다
 이 목록은 역逆알파벳 순서로 소팅되어 있고 어미가 -인 단어들이 포함되어 있는 부분에서 인용하였다 :
소팅은 단어의 원래의 철자법의 역순으로 되어 있기 때문에 이 순서를 이해하기가 쉽지 않을 수도 있다
 목록 앞부분에 나오는 8개의 단어들을 다음과 같이 역순으로 나열해보면 이것을 분명하게 알 수 있다 :
이 목록의 장점은 이렇게 나열함으로써 접두사의 영향을 줄일 수 있어서 와 라는 단어들 그리고 와 , 와 와 같은 단어들이 한 곳에 오게 해준다는 것이다
 그렇지만 이 목록이 연구에 필요한 완전한 근거를 제공해줄 수 있는 것은 아니고, 다만 어떤 다른 순서로 나열하는 것보다도 특정사실에 대한 더 많은 정보를 제공해줄 수 있기 때문에 연구의 출발점으로서 유용하게 사용될 수 있다는 것이 특징이다

빈도와 알파벳 순서를 이용하여 개별단어들이 갖는 중요한 정보를 보여줄 수 있는 목록을 작성할 수 있지만 텍스트의 구조에 대해서는 거의 아무런 정보도 보여주지 못한다
 경우에 따라서는 이와는 다른 순서로 나열하는 방법이 유용하게 쓰일 수 있다
 이 순서를 사용하면 마치 홈 드라마에서 출연자들의 이름이 출연순서대로 화면에 나타나는 것과 같은 형태로 텍스트에서 단어들의 최초출현 순서대로 나열할 수 있다
 다음 목록 또한  텍스트를 대상으로 작성되었는데, 세 번째 칸은 텍스트 내에서 해당단어의 최초출현 순서를 나타내는 번호이다
 이 번호를 목록에 포함시켜 인쇄할 필요는 없지만 나중에 참고작업 할 때에는 유용하게 쓰일 수 있다

다음은 원본 텍스트의 첫 부분이다 :
원문 편지와 비교해 보면 원래 프로그램 상에서 제외된 숫자를 제외하고는 13번째 단어까지는 빠진 단어가 하나도 없이 나열된 것을 알 수 있다
 이 13번째 단어는 가 다른 용례로 사용되어 2번째 출현한 경우이다
 이 짧은 예에서 또 하나의 예외는 26번째 단어인데 가 2번째 나타난다
 텍스트에 나타나는 전체 단어숫자의 15분의 1밖에 안되는 5,000개의 단어들을 목록에서 찾아보면 단어들이 누락되는 경우가 더 빈번해진다
 다음 문장을 보자 :
위의 문장은 다음과 같이 분석된다 :
이렇게 작성된 목록은 그냥 살펴보기에도 아주 흥미롭지만 체계적으로 사용하면 더욱 효과적으로 응용할 수 있다
 가장 중요한 응용방법 중의 하나는 텍스트의 성격의 차이를 찾는 것이다
 빈도는 비슷하나 최초출현하는 위치가 매우 다른 경우에는 이 위치에서 주제의 변화가 일어난다거나, 혹은 그 변화된 주제를 논의하기 위하여 사용하는 어휘유형에 변화가 일어난 위치를 나타내 준다
 이것을 연구하기 위해서는 먼저 빈도순서에 따라 단어들을 나열하고 그 단어들 중에서 동일한 출현빈도를 갖는 단어들을 최초출현 순서대로 나열해놓은 목록을 만들면 더욱 큰 도움을 받을 수 있다
 다음 예는  텍스트에서 이런 형식으로 작성한 목록의 일부를 보여주고 있는데 25번의 출현빈도를 갖는 단어들을 최초출현 순서에 따라서 나열하여 보여주고 있다 :
이 목록에 나열된 단어들 중에서 어떤 단어도 텍스트의 구조적 특징에 대한 결정적 단서를 제공해주지는 않는다
 그래서 텍스트에서 이 단어들이 하는 역할에 관해서 알기 위해서는 더 많은 연구를 해야 하지만 고유명사인 과 를 통해서 이 목록으로 어떤 일을 할 수 있는 지를 알아볼 수는 있다
 은 18,274번째 단어로 최초출현하고 는 36,803번째 단어가 출현하고 나서야 출현한다
 텍스트를 조사해보면 은 6장에서 서술자 - 여기까지는   - 에게 보내는 편지에서 최초출현하고 는 13장에서 괴물이 에게 말하는 대목에서 최초출현한다
 텍스트에 나타나는 고유명사와 그 고유명사가 최초출현하는 부분을 보여주는 전체목록을 비슷한 방법으로 쉽게 만들 수 있다
 목록에 나타나는 어떤 단어에 대해서라도 4장에서 논의하게 되는 문맥행 목록을 이용하면 가장 정확하게 연구할 수 있다

지금까지 살펴 본 여러 가지 목록들은 개별 단어형태를 철자순서로 나열한 것들이다
 이런 방식으로 단어들을 나열하면 결과적으로 프로젝트에서 연구의 대상이면서 또 상호간에 밀접하게 연관되어 있는 단어형태들을 분리시킬 수 있게 된다
 이 연관성을 가장 잘 보여주기 위해서는 한 단어에서 여러 가지 굴절과정을 거쳐 만들어진 다양한 단어형태들을 한 곳에 모아서 각 형태의 차이점들을 일목요연하게 보여줄 수 있도록 나열하는 방법이 있다
 이렇게 여러 가지 굴절과정을 거쳐 만들어진 서로 연관된 단어형태들을 포함하는 '단어'의 개념을 표현하기 위해서는 단어소라는 표현을 쓰는데, 이렇게 각 단어소에 속하는 모든 단어형태들의 목록을 작성하는 작업을 일반적으로 '단어소 작성작업'이라고 한다

단어소 작성작업은 목록의 기본 나열순서와는 무관하다
 단어소 작성작업을 통해서 단어형태들은 목록에서 같은 단어소 밑에 다 모이게 된다
 다음은 앞의 1
1항에서 소개한  목록의 일부를 이 방식으로 처리한 예이다 :
수작업으로 작성된 위의 목록은 전체목록을 알파벳 순서로 나열한 것을 조사하여 다른 형태의 단어소들을 찾아서 첨가시켰다
 단어소의 기본항목에 부여된 빈도는 전체빈도인데 이 경우에는 빈도순으로 정렬된 목록 내에서의 위치를 조정하기 위하여 사용되었고, 들여쓰기 된 줄에는 개별 단어소 형태들의 빈도를 보여주고 있다
 단어소 작성작업은 쉬운 일은 아니지만 자동으로 실행할 수 있다
 이 프로그램의 제작방법에 대해서는 2항에서 논의한다

앞에서 논의한 목록들은 비록 특징에 따라서 각각 좀더 특정 연구 프로젝트에 사용하기에 더 적합한 것들이 있기는 하지만 그밖에도 일반적으로 다양한 연구 프로젝트용으로 적절하게 사용할 수도 있다
 경우에 따라서는 특정 프로젝트에서 필요로 하는 것이 좀더 구체적이어서 반드시 특정 빈도목록을 사용해야 하는 경우도 있다
 다음 예들을 통해서 어떤 경우에 그렇게 해야 하는지 살펴보자

1
2
4  상관 단어형태들을 한 곳에 모으기   이미 1
2
3항에서 빈도목록을 사용한 단어소 작성작업에 대해서 논의했다
 그러나 프로젝트의 성격에 따라서는 다른 형태나 또는 다른 순서로 나열된 목록이 필요할 수 있다
 1장에서 논의했던  텍스트의 경우와 같이 상당히 복잡한 철자변이형이 포함되어 있는 텍스트들은 만일 같은 단어의 다양한 철자법을 고려한 빈도목록을 작성할 수 있다면 훨씬 분석이 용이해진다
 그리고 이러한 목록 없이는 단어소 작성작업은 거의 불가능할 것이다
 비록 상당히 지루하고 시간소모적이면서도 또한 결과의 정확성이나 포괄성에 대해서 장담할 수 없긴 해도 이 작업을 수작업으로 할 수도 있다
 철자변이형 규칙을 찾아내는 데에 도움이 될 수 있는 자동 배열방법들은 1장에서 이미 논의했고 또 8장에서 더욱 자세히 논의하게 될 프로젝트에서 이루고자 하는 목표들중의 하나이다

주제나 의미상으로 연관되어 있는 단어들을 한 집단으로 묶어주는 작업은 매우 유용한 작업이기는 하지만 자동화시키기가 상당히 어렵다
 텍스트 편집 프로그램이나 문서작성 프로그램을 이용하여 전체목록대개는 철자순서로 나열된 것이 가장 사용하기 편하겠지만에 대한 예비조사를 시행하고, 그로부터 선별하여 연관된 단어별로 분류한 목록을 작성할 수 있다
 이 방법의 한 예로서  목록에서  이 창조한 괴물을 칭하는 단어명사들을 살펴보자
 다음 목록은 10번 혹은 그 이상의 출현빈도를 보이는 단어들만을 찾아서 그 단어들을 텍스트의 구체적인 내용에 근거하여 주제별로 배열해 놓은 것이다 :
이 단어들이 텍스트 내에서 갖는 중요성은 다음 장에서 문맥이해를 위하여 살펴보게 될 행들을 이용하여 살펴보도록 하자
 이 단어들을 한 곳에 모으는 일은 빈도목록이 없었다면 비록 불가능하지는 않았겠지만 훨씬 더 어려웠을 것이다

1
2
4  단어의 길이에 따른 배열   이 배열순서는 특히 단어의 길이와 알파벳 순서나 빈도순서와 결합하면 단어형태의 복잡성을 살펴보기 위해서 유용하게 사용할 수 있다
 이 배열방법은 또한 단어의 평균길이와 다양한 길이의 단어들의 빈도분포 등과 같은 통계계산을 하기 위해서 사용할 수 있으며 이러한 종류의 연구로부터 추가적으로 파생하는 보다 구체적인 연구의 출발점으로 사용될 수도 있다

1
2
4  기타 언어단위들   지금까지의 논의에서는 텍스트의 모든 개별단어들을 빈도조사의 대상이 되는 단위로 간주했었다
 물론 단어만이 텍스트의 유일한 구성단위는 아니다
 구, 절, 문장 등의 단위들도 비슷한 방식으로 연구될 수 있다
 이러한 단위들을 연구하기 위하여 필요한 유일한 조건은 각 단위의 경계가 어떤 식으로든 컴퓨터가 감지할 수 있도록 분명히 설정되어야 한다는 것인데, 이를 위해서는 수작업으로 경계표식을 삽입할 수 있다
 표식부호를 첨가하는 데에 필요한 일반적인 고려사항들은 2장 4
3항에서 이미 논의한 바 있다

만일 텍스트를 문법적 특징에 따라 구, 절, 문장, 또는 기타 단위들이 잘 보일 수 있도록 표식을 하거나 또는 어떤 식으로든 파싱을 해놓으면 빈도목록 작성에 유용하게 쓸 수 있다
 개별단어나 구의 품사나 문법적 기능에 따라서 명칭을 붙여놓으면 단어뿐만 아니라 그 명칭까지도 빈도목록 작성대상으로 삼을 수 있다
 6장에서는 컴퓨터 표식부호 첨가작업인 태깅과 파싱에 대해서 논의한다

지금까지는 아무리 간단한 형태의 빈도목록이라고 해도 그 목록을 통해서 목록작성에 사용된 텍스트의 주요특징들을 다 보여줄 수 있다는 것을 살펴보았다
 그러나 이 간단하지만 강력한 도구를 효과적으로 사용하기 위해서는 그 목록에 무엇이 누락되어 있는지도 알아야 한다

가장 명백한 한계는 단어 빈도목록의 기본적인 성격에서 찾아볼 수 있다
 즉, 텍스트에서 개별 단어형태를 추출해내야 한다는 것  때문에 빈도목록에는 특정단어가 원본 텍스트에서 나타나는 문맥이 제외될 수밖에 없다
 이렇게 함으로써 하나 이상의 의미를 갖는 단어형태들을 한 군데에 모아서 마치 같은 단어인 것같이 처리할 수 있게 해준다
 앞에서 본  텍스트 단어 빈도목록의 예는 이것을 보여주기에 충분하지는 않다
 그러나 다음의 간단한 예를 통해서 이 점을 분명하게 살펴볼 수 있다:
이 빈도목록은 알파벳 순서로 배열된  빈도목록에서 일부를 발췌한 것이다
  ,  그리고 은 분명히 구분되는 별개의 단어들이다
 반면에 와 는 동사, 혹은 명사 를 나타낼 수 있기 때문에 이 단어들이 사용되는 문맥을 알아야만 구분할 수 있다
 이 문제에 관해서는 2
2
3에서 구체적으로 다룬다
 그리고 필요한 정보의 검색을 위하여 사용할 수 있는 문맥행 추출 소프트웨어 에 대해서는 4장의 1
3항에서 다루겠다

지금까지의 빈도목록에서는 개별단어들에 대한 내용만을 보여주었을 뿐이다
 대부분의 단어빈도 측정 소프트웨어들은 아주 효용도가 높은 전체 빈도수를 보여준다
 그리고 때로는 이것을 바탕으로 상당히 다양한 통계자료들을 보여주기도 한다
 단어 빈도목록에서 계산할 수 있는 총합계 중에서 가장 일반적인 것은 보통 전체토큰 과 전체유형 이라고 할 수 있는데 이 두 가지 개념 사이의 차이를 알아야 한다
  
문맥에서 토큰이라는 것은 개별적으로 출현하는 한 단어형태를 말한다
 다음 문장을 보자 :
이 텍스트에는 총 67개의 단어 혹은 토큰이 사용되지만 상이한 단어형태 혹은 단어유형은 단지 49개에 불과하다
 빈도목록은 각 유형별로 발견된 토큰의 숫자를 보여준다
 이 경우에 다음의 10가지 단어유형은 하나 이상의 토큰을 가지고 있다 :
이들 단어유형들에는 전체토큰 중에서 총 28개가 포함된다
 나머지 39개의 유형들은 한 번씩만 나타나서 전체 67개의 토-큰을 구성한다

텍스트 내에서의 유형별 토큰의 분포는 어휘의 다양성 정도를 아주 유용하게 보여줄 수 있고, 또 상이한 텍스트에서의 어휘차이 조사에 출발점을 제시해주기도 한다
 목록에 포함된 정보를 통해서 여러 가지 통계를 산출해낼 수 있다
 가장 간단한 것은 유형별 토큰의 비율인데, 다른 말로 하면 상이한 각 단어형태들의 평균빈도를 말한다
 앞에서 예로 든 문장의 경우에는 이 비율은 69/49 혹은 1
41이다
 이것은 지극히 낮은 비율인데 그 이유는 말할 것도 없이 자료 텍스트의 크기가 작기 때문이다
 전체  텍스트를 놓고 보면 그 비율은 10
77이다
 이 수치는 텍스트 내에서의 전체토큰 숫자의 영향을 받기 때문에 텍스트 비교를 하는데 있어서 그 유용성을 높이기 위해서는 같은 크기의 텍스트 자료를 가지고 비교해야 한다

내림차순 빈도순으로 배열된 목록에서 산출된 전체 누적빈도는 고빈도 단어와 저빈도 단어 사이의 상대적 중요성을 효과적으로 보여줄 수 있다
 이 산출방법을 앞의 1
1항에서 보인  목록에 적용하면 표 3
2의 결과를 얻게 된다

원래의 빈도목록으로부터 이 수치들을 산출하기 위해서 사용하는 프로그램에 대해서는 부록 3에 설명해 놓았다
 이 수치를 통해  텍스트에 나오는 전체단어들 중 30개의 최빈단어들이 40%에 달하는 출현빈도를 보인다는 것을 알 수 있다
 전체목록에서 62개의 최빈단어들이 전체의 50%를 차지하지만 전체단어의 75%에 달하는 단어들 중에 584개의 단어들이 포함되어 있다는 것을 보여준다
 이 특징들은 상대단어밀도를 예비측정하기 위한 작업의 일환으로서 비슷한 크기의 다른 텍스트와 비교할 수 있다

단어빈도목록 작성을 위해서 여러 가지 통계수치를 계산해야 하지만 그 각각에 대한 설명은 언어분석에서의 컴퓨터의 용도 소개를 주목적으로 하는 이 책보다는 통계관련 교과서에서 다루는 것이 더 적절할 것 같다

1항에서 논의한 여러 가지 순서로 배열된 빈도목록을 작성하는 것은 결코 어려운 작업은 아니다
 다음에서 이 작업에 사용할 수 있는 일반적인 방법들을 각각의 사용과정에서 발생할 수 있는 주요문제들 및 그 해결방법을 곁들여 설명해 놓았다
  2
1항은 전용 소프트웨어를 개발한다거나 혹은 필요에 따라 기존 프로그램을 수정하려고 한다면 흥미로운 분야가 되겠지만 그럴 계획이 없다면 생략해도 좋다
 그러나 일반적으로 빈도와 관련된 문제들은 기존 소프트웨어를 수정하지 않고 사용해도 작업에 영향을 주기 마련이다
  2
2항과 2
3항은 가장 적합한 소프트웨어 팩키지를 선택하는데 있어서나 혹은 최소한 결과를 얻는 과정에서 겪게 될 문제들을 이해하는 데에 도움을 줄 수 있다
  2
4항에서는 단어 이외의 언어단위에 대한 분석을 하는데 있어서도 도움을 주기 위해서 단어빈도목록에 대한 문제를 조금 더 논의하였다

단어빈도목록 작성에는 다음의 두 단계가 필요하다 :
텍스트를 단어로 분리
동일한 단어형태의 숫자 계산
첫 단계에서는 컴퓨터로 텍스트 자료를 처리할 수 있도록 단어경계에 대해서 분명하게 정의해야 한다
 단어 내에 올 수 있는 문자들과 단어들 사이에 올 수 있는 문자들을 분명히 구분해야 한다
 이 작업은 생각만큼 쉽지는 않다
 왜냐하면 어떤 문자들은 두 영역에서 다 발견되기도 하기 때문이다
 이 문제에 대해서는 다음 항에서 더욱 자세히 논의하겠다
 일단 텍스트에 나타나는 모든 문자들을 두 범주로 나누어 컴퓨터가 단어들 사이의 빈칸을 구분하여 인식할 수 있게 해야 한다

텍스트에 나타나는 개별단어의 분류가 끝나면 그 단어들을 배열하여 숫자를 세어야 한다
 이 작업을 하기 위해서는 언어적인 요소와는 상관없이 컴퓨터의 기억용량이나 처리속도 등과 같은 요소들을 고려해야 한다
 일반적으로 다음의 두 가지 방법이 주로 많이 쓰인다
 비교적 간단한 방법으로는 다음의 삼 단계를 이용하는 방법이 있다 :
각 행에서 발견되는 개별단어를 저장한 파일 작성
이 파일에 들어있는 모든 동일한 단어형태들이 한 곳에 올 수 있게 파일을 알파벳 순서로 소팅
소팅된 목록에 나타나는 각 단어의 빈도계산
여기서 두 번째 단계는 이 일을 완벽하게 해줄 수 있는 기존 소팅 프로그램을 사용하여 할 수 있기 때문에 표준문자 이외의 문자를 처리해야 할 필요가 없다면 이를 위한 특별 프로그램을 만들 필요는 없다
 그리고 첫 번째와 세 번째 단계는 비교적 평이한 작업이므로 경험이 적은 연구원이라도 비교적 쉽게 할 수 있다
 이 말은 연구원이 전체작업에서 가장 중요한 부분인 단어경계를 정의하는 일에 전적으로 매진할 수 있다는 것을 의미한다
 이 방법의 가장 큰 문제점은 좀 느리고 번거롭다는 것이지만 별로 중요한 문제는 아니다
 왜냐하면 처리속도가 느려서 시간이 걸리기는 해도 컴퓨터가 처리작업을 하는 동안 연구원은 다른 작업을 할 수 있기 때문이다
 두 번째 장점은 이 방법을 쓰면 컴퓨터 기억용량에 아주 작은 부담만을 주게 된다는 것이다
 따라서 비교적 부담스럽지 않은 장비를 가지고서도 상당히 큰 자료파일을 처리할 수가 있다

이 방법을 대체할 수 있는 방법은 전적으로 컴퓨터의 기억능력을 이용하여 발견된 단어들과 그 단어들의 출현빈도를 저장하는 것이다
 텍스트에서 매번 단어를 찾을 때마다 컴퓨터의 기억영역을 검색하여 그 형태가 이미 전체숫자에 계산되었는지 확인한다
 만일 그 형태가 이미 계산되었다면 그 누적계수를 하나 더 늘리고 만일 그렇지 않다면 숫자 1에서부터 새로운 계산을 시작하도록 한다
 이 작업은 특정 프로그래밍 언어를 사용하면 상당히 용이한 일이지만 그 이외의 프로그래밍 언어를 사용하려고 한다면 데이터베이스의 구조나 컴퓨터 기억용량 조작법에 관한 상세한 지식이 있어야 한다
 이 방법은 또한 컴퓨터 기억용량에 무리를 주어서 상당히 강력한 컴퓨터가 아닌 한 대형파일을 처리하는 데에는 적합치 않을 수도 있다
 이 방법의 장점은 처리속도가 신속하다는 것이다

어떤 방법을 사용하든 최종목록의 순서는 작업상의 필요에 따라서 일반 소팅 프로그램을 사용하여 손쉽게 재배열할 수 있다
 이 소팅 프로그램들은 컴퓨터 기종에 따라서 그 정교성에서 차이가 날 수 있는데 만일 에 따라온 소팅 프로그램이 적합하지 않다면 그 대신 일반 상용 혹은 공개 소프트웨어 중에서 이를 대체할 수 있는 소팅 프로그램을 쉽게 구할 수 있다

단어빈도 프로그램의 설계에 영향을 미칠 수 있는 주요문제들로는 텍스트에 나타나는 개별단위들의 경계설정에 관한 문제와 또, 총숫자 계산에 있어서 이 단위들을 동일한 것으로 간주할 수 있는 근거에 관한 문제 등이 있다
 경계설정에 관한 문제는 두 부분으로 나누어 생각해 볼 수 있다
 먼저 2
1항에서 문자세트를 두 가지로 정의내리는 문제에 관해서는 언급했었다
 그러나 이 문제가 해결된다 해도 일반적으로는 구로 처리되어야 함에도 불구하고 연구목적상 한 단어로 다루어야 하는 언어단위들이 있다
 이 두 가지 문제에 대해서는 2
2
1항과 2
2
2항에서 다루겠다
 단위들의 동일성 문제에 관해서는 2
2
3항에서 살펴본다

2
1항에서 문자는 정상적으로 단어 내에 올 수 있는 것들과 단어 사이에 올 수 있는 것들로 나눌 수 있다고 말한 것은 약간 단순화시켜서 한 말이다
  텍스트에서 발췌한 다음의 짧은 예문을 보자 :
위의 글 중 '''와 '''에 나타나는 '''는 소유형을 나타내는 소유부호이다
 만일 연구목적에 특별히 소유형에 대해 조사하는 것도 포함되어 있다면 이 문자를 단어의 일부로 간주할 수도 있다
 같은 텍스트에서 발췌한 다음 글에는 같은 표식이 다른 용도로 쓰이고 있다 :
여기서는 앞의 글에서 나왔던 소유부호가 어두의 단일 인용부호인 '`'와 같이 와서 이 한 가족을 면밀히 관찰한 결과 알게 된 일련의 단어들을 인용하기 위해서 사용되고 있다
 이 부호들을 단어의 일부로 보지 않는 것이 좋다
 왜냐하면 그렇게 할 경우에는 같은 단어라고 해도 인용된 단어와 인용되지 않은 단어를 별개로 취급해야 하기 때문이다

하이픈도 비슷한 문제를 야기해서 어떤 텍스트에서는 대시로 사용할 수 있고 생략된 텍스트에서는 마침표 대신 사용할 수 있다
 이 모든 경우에 있어서 이 문자들을 어떤 문자세트에 배정하느냐에 따라서 분석결과가 불완전하게 나올 수 있다
 이 문제를 해결할 수 있는 방법은 2
3
1항에서 제안한다

지금까지 빈도목록에 관해 논의하면서 빈도목록 작성에서 빈도조사와 빈도계산의 기본단위는 단어로서 다른 단어와는 빈칸이나 기타 경계 문자들로 분리되어 있는 문자열이라고 가정해왔다
 앞 항에서 논의한 문제점들에도 불구하고 이 개념은 변함이 없다
 그러나 이 방법에는 중요한 문제들이 있다
 왜냐하면 사용하는데 있어서 불가분의 단어인 것처럼 여겨져 온 단어가 보통 하나 이상의 단어로 구성되어 있는 구로 표현될 수 있기 때문이다
 이들 중 어떤 것들, 예컨대   같은 것들은 완전히 굳어진 표현들이다
 따라서 그 사이에 다른 단어가 삽입되면 원래의 의미가 바뀌게 된다
  이나   등과 같은 구 동사 들은 그 구 안에 다른 단어들이 삽입되기도 한다
 일반적인 단어빈도목록 작성방법을 사용하면 텍스트에 이들을 표시하기 위한 특별부호를 더한다거나, 혹은 어떤 방식으로든 소프트웨어를 수정하지 않고서는 이것들을 한 단위로 처리할 수 없다
 그 가능성에 대해서 2
3항에서 논의한다

일단 텍스트를 적절한 단위로 나눈 후에는 빈도계산을 하는데 이 과정에서는 계산의 정확성을 확인하기 위해서 비교작업을 한다
 이 작업에서는 텍스트에서의 두 단위 사이의 동일성은 두 문자열을 전체적으로 비교하여 밝혀내기 때문에 별 문제가 없는 듯하다
 만일 두 문자열이 동일하다면 그 단위들은 같은 항목으로 간주된다
 이 방법을 적용하기 위해서는 대문자와 소문자를 동일하게 처리할 수 있게 해주는 특별한 절차를 밟아야 한다
 겉보기에는 쉬워 보이는 이 작업에도 두 가지 문제가 있다

첫 번째 문제는 거의 모든 텍스트에서 찾아볼 수 있는 것으로서 형태는 같지만 의미가 다른 동형어들로 인해서 생긴다
 만일 전적으로 문자열만을 비교한다면 텍스트 내에서의 상이한 역할에도 불구하고 그 항목들은 동일한 것으로 간주된다

한 예로,  텍스트에는 이미 언급한 단어빈도목록에 따르면 가 64번 나타난다
 자세히 살펴보면 이들 중 33번은 다양한 의미를 지닌 명사 로, 26번은  라는 동사의 일부로, 4번은  라는 동사의 일부로 그리고 1번은 동사 로 나타난다
 이 차이는 빈도목록을 작성하기 위한 계산과정에는 전혀 나타나지 않는다

빈도목록 작성에 사용되는 단어형태들의 동일성 문제에서 비롯되는 또 다른 문제는 별개의 어휘항목들 사이의 차이가 분명하지 않다는 것인데, 이에 대해서는 1
2
3항에서 단어소 작성시 주의할 점을 논의하면서 이미 설명하였다
 한 예로서 이미 앞에서 언급했던  텍스트에서  의 일부로 26번 출현하는 는 다음 단어형태 문맥에서 나타나는데, 이 단어형태들은 빈도목록에서 별도로 계산된다 :
이와 유사하지만 조금 더 특수한 문제가 1장에서 논의한 의 텍스트와 같은 다양한 철자변이형을 지닌 텍스트를 다룰 때 발생한다
 한 언어에 있어서 모든 현대적인 예들은 표준철자체계를 따른다
 그러나 외국어로 영어를 배운 사람이 쓴 영어 텍스트나 혹은 영국영어와 미국영어, 그것도 오래된 비표준 영어로 된 텍스트인 경우에 문제가 생길 수 있다
 단어소 문제에서와 같이 동일한 단어의 상이한 형태는 텍스트를 특별히 처리해주지 않는 한 별개의 단어로 계산된다

위의 2
2항에서 논의한 모든 문제들을 해결하기 위해서는 다음 방법들 중에서 하나를 선택할 수 있다
 첫 번째는 빈도목록 작성과정을 어떤 식으로든 수정하는 것이고, 두 번째는 텍스트를 수정하여 정상 처리과정으로 적절하게 처리할 수 있도록 하는 것이다

소프트웨어를 직접 제작하지 않거나, 혹은 소프트웨어를 사용하면서 해당부분을 수정할 수 있게 되어 있지 않은 한 이것은 가능한 방법은 아니다
 이 상황에서는 텍스트를 수정해야 하는데 이에 대해서는 다음 항에서 논의하기로 한다
 만일 빈도목록 작성방법을 약간 변경하기로 했다면 변경 후에 좋은 결과를 얻기 위해서는 변경하고자 하는 부분에 대해서 논리적으로 충분히 이해하고 있어야 한다
 여기서는 단지 아주 일반적인 사항만을 논의하기로 한다

문자세트를 단어내부에 올 수 있는 문자들과 단어 사이에 올 수 있는 문자들의 두 가지로 정의하는 데 있어서 문제가 있다면 이 문제는 소프트웨어로 발견하여 해결할 수 있다
 단어빈도 프로그램에 따라서는 특수문자가 들어있는 텍스트를 처리할 수 있도록 새로운 문자세트를 정할 수 있는 기능이 있어서 소프트웨어 자체를 변경시킬 필요가 없는 경우도 있다
 개별 경계문자들을 정의해주는 것만으로는 2
2
1에서 논의한 같은 문자의 중복된 사용과 같은 문제점들을 해결할 수가 없다
 그러나 처음부터 소프트웨어를 제작한다면 텍스트에서 ''' 문자 다음에 나타나는 문자들을 조사하여 해당문자의 용례를 판단할 수 있는 연산과정을 포함시키면 된다

구 인식은 더욱 복잡한 작업으로서 단어빈도목록 작성 프로그램을 사용하기에는 적합하지 않은 부분이다
 연구목적상 구 인식을 자동화해야 한다면 그 작업을 할 수 있는 소프트웨어를 구하거나 제작할 수 있는데 이런 소프트웨어를 이용하여 텍스트에서 자동으로 구를 표시한 뒤에 단어빈도조사 소프트웨어를 이용하여 분석하면 빈도계산을 할 수 있다
 아무 표식도 되어 있지 않은 텍스트에서 구를 인식할 수 있는 소프트웨어를 개발하는 작업은 그 자체로도 상당히 큰 연구 프로젝트일 수 있는데 개별단어 빈도목록이 그 개발작업의 기초라고 할 수 있다

동형어들을 구분하여 같은 문자열로 되어 있는 단어들이 다른 의미로 쓰일 수 있다는 것을 밝히는 것은 복잡한 작업이다
 이 작업은 자동화된 자연언어 이해 시스템의 효율성을 저하시키는 일반적인 문제점이기도 하면서, 이 분야에서 계속 연구하고 있는 연구자들이 아직도 성공하지 못한 연구작업들 중의 하나이다
 이 작업에서는 개별단어의 문맥이 연구대상인데, 어떤 경우에는 해당단어와 인접해 있는 키워드를 통해서 주된 의미를 밝혀낼 수 있다
 특정 텍스트를 대상으로 하여 이런 작업을 할 수 있는 소프트웨어를 제작하는 것은 이 책의 목적과는 동떨어진 것이지만비록 이 점에 대해서는 5장에서 조금 더 논의하긴 하겠지만 만일 그런 소프트웨어를 제작했다거나 혹은 그런 목적으로 사용할 수 있는 기존 소프트웨어를 구한다면 빈도목록작성 소프트웨어를 이용하기 전에 텍스트에 먼저 적용해서 실험해보는 것이 좋다
 중복사용으로 인하여 야기되는 문제를 해결하기 위한 알고리듬을 표식부호 삽입을 위해서 이용할 수 있는데 빈도목록 프로그램은 이 표식부호들을 인식하여 상이한 의미를 지니는 단어들을 별도로 셀 수 있다

사의 영어은행  의 자료를 이용하여 작성한 단어목록을 재배열하기 위해서 이용되기도 한 자동 단어소 작성방법은 상당히 효과적이다
 그리고 8장 2항에서 제시하듯이 철자변이형 인식작업이 전혀 불가능한 것은 아니다
 그러한 알고리듬을 연구에 응용할 수 있는 최상의 방법은 그것을 사후事後작업의 형태로 적용하는 것으로서 정상적인 단어의 문자열 비교를 통해 작성된 빈도목록에 그 방법을 적용하는 것이다
 이 경우에 다음과 같은 두 가지 장점이 있다: 첫째, 목록작성이라는 기계적 작업을 유사단어형태 인식작업과 분리시킬 수 있다는 것
 둘째, 그렇게 함으로써 유사단어 인식 알고리듬에서 수행할 작업을 줄일 수 있다는 것
 적절하게 소팅된 빈도목록은 원본 텍스트의 복잡한 형태보다는 그 처리과정에서 문제를 덜 야기한다
 이런 식으로 알고리듬을 이용하려면 이 알고리듬을 원본목록을 재배열하는데 사용할 프로그램 속에 포함시키거나 혹은 원본목록에 표시하여 일반적인 소팅 방법을 이용해서 쉽게 재배열할 수 있게 해야 한다
 이 방법의 이용에 있어서 가장 주된 문제점은 원하는 인식 알고리듬을 구할 수 있는가의 여부이다
 그리고 만일 높은 정확도가 요구되는 경우에는 다음 항에서 소개하는 방법을 이용하는 것이 좋다

2
3
1항에서 제안한 방법들은 문제점들을 컴퓨터를 이용하여 자동적으로 해결할 수 있고 또 자원을 더욱 효율적으로 이용할 수 있게 해준다는 점에서 아주 매력적인 듯하다
 그러나 새로운 소프트웨어의 개발 그 자체가 상당한 자원을 필요로 할 수 있다는 점을 상기해야 한다
 그리고 수작업에 걸리는 시간보다도 소프트웨어를 이용하여 자동 처리방법을 개발하는 데에 더 많은 시간을 소모해서는 안 된다는 것도 분명히 알아야 한다
 결정에 앞서서 소요비용과 해당방법의 장단점에 대한 적절한 비교를 해야 한다
 만일 자료 텍스트에 수작업으로 표식을 하고 수정하는 것이 가능하며, 또 그렇게 하는 것이 더욱 효율적이라면 이 작업을 할 수 있는 소프트웨어를 개발하는 것이 연구의 일부가 아닌 한은 수작업으로 하는 것이 훨씬 좋다
 물론 경우에 따라서는 연구규모상 수작업이 불가능한 경우가 있다
 만일 그럼에도 불구하고 연구목적에 적절한 소프트웨어를 구할 수 없는 경우에는 연구결과의 정확도가 낮아지게 될 수 있다

문자세트의 정의, 구 파악과 동형어 의미구별 등의 문제들은 빈도목록 프로그램을 사용하기 전에 텍스트를 수정하거나, 혹은 표식을 하여 해결하고 단어소나 철자변이형과 같은 문제들은 일단 빈도목록을 작성한 후에 그 목록을 재배열하면 해결할 수 있다
 두 경우에 모두 텍스트 편집 프로그램이나 문서작성 프로그램에 포함되어 있는 문자열 검색기능을 이용하면 큰 도움이 된다
 물론 텍스트에 사용된 모든 표식부호들은 이용하는 빈도목록 작성용 소프트웨어가 인식할 수 있어야 한다

비록 앞에서 논의한 문제점들로 인해 약간의 수정이 가해질 수 있긴 해도 지금까지는 빈도목록에서 개별단어를 기본으로 이용하게 될 것이라는 가정을 해왔다
 실제로는 다른 언어단위에 기초를 두고서 빈도목록을 만들어야 할 경우도 있다
 만일 그렇다면 다음과 같은 두 단계의 처리과정이 필요할 것이다 :
텍스트 내의 언어단위 조사 및 표시
표식이 붙은 언어단위를 바탕으로 한 빈도목록 작성
첫 번째 단계는 문제에 따라서 수작업, 혹은 컴퓨터를 이용하여 할 수 있다
 때로는 개별단어들 이외에도 구 구조들을 찾아서 그 숫자를 계산해야 할 경우도 있다
 만일 구 구조들이 예외없이  ,     혹은    과 같은 몇 개의 고정된 단어들의 연속에 불과하다면 원본에서 이들을 찾아서 그 안에 나타나는 개별단어들을 같이 연결해주는 간단한 프로그램을 만들 수 있다
 한 예로서  는  텍스트에 여러 번 나타난다
 다음은 원본 텍스트 파일에서 이 구가 들어 있는 행들을 발췌해 놓은 것인데 가 의 여러 형태와 결합되는 것을 보여준다 :
부록 3에 설명한 간단한 텍스트 처리용 프로그램을 사용하여 이 구들의 내부에 나타나는 빈칸들을 빈칸밑줄 기호로 대치할 수 있다 :
일단 이렇게 구들을 찾아내고 난 뒤에는 빈도목록 작성 프로그램이 구 구성요소들을 하나로 연결할 목적으로 사용된 빈칸밑줄 부호를 단어경계로 처리하지 않도록 해야 한다
 이 경우에는 구 내에 아무 단어도 끼어 있지 않고 또 형태에 있어서 거의 변이형이 없이 단순하다는 특징 때문에 구를 찾는 작업은 별 문제 없이 할 수 있다
 복잡한 예의 경우에는 수작업 혹은 보조 수작업이 필요할 수 있다

태깅이나 파싱이 된 텍스트의 경우에는 개별단어 이외의 언어단위를 기본으로 하여 빈도목록을 작성할 수 있다
 태깅과 파싱의 성격 그리고 그 사용 가능성에 대해서는 6장에서 다룬다

빈도목록은 말모둠 기초조사에 있어서 강력한 도구이다
 또한 빈도목록은 연구목적에 따라서 다양한 순서로 작성할 수 있고, 또 단어나 기타 언어단위를 대상으로 작성할 수 있다
 또한 빈도목록은 문맥목록이나 기타 다른 방법을 이용하여 계속적인 연구를 하는데 있어서 그 연구대상을 선택하는 데에 특별히 큰 도움을 줄 수 있다
 빈도목록 작성에는 다양한 기존 소프트웨어를 이용할 수 있다
 그리고 특별히 필요하다거나 혹은 목록작성에 많은 수정을 해야 한다면 별도의 프로그램을 제작할 수 있다

1
 전형적인 문장들이 포함되어 있는 다음 텍스트의 빈도목록을 작성하려고한다 :
빈도목록 작성 프로그램을 사용하면 어떤 문자들을 단어경계로 사용할 수 있을까? 또 그렇게 하면 어떤 문제가 있겠는가?
2
 다음 목록은 알파벳 순서로 나열한 단어 빈도목록이다 :
위의 목록을 사용하여 수작업으로 단어소 목록을 작성하는데 있어서 어떤 문제들을 생각할 수 있겠는가?
3
 다음은 자장가 운율체계를 살펴보기 위해서 작성한 빈도목록에서 가장 빈도가 높은 15개 항목들을 뽑은 목록이다
 ''는 '      '에서 찾아볼 수 있는 누적운율 과 같은 길고 복잡한 운율체계를 나타내기 위한 부호이다
 어떤 것들을 더 조사할 수 있겠는가?
3장에서 논의한 빈도목록의 가장 큰 장점은 텍스트 내의 단어들을 분리시켜서 텍스트를 그 구성성분의 요약으로 축소시켜 준다는 것이다
 그러나 이렇게 함으로써 비록 텍스트를 구성하는 단어들의 일반적 특징을 살펴볼 수는 있지만 그 단어들의 완전한 특징을 보여주는 문맥정보는 놓치게 된다
 문맥행 추출작업은 각 단어들을 원래의 문맥 속에 환원시켜 줌으로써 각 단어들의 자세한 용례와 행동을 잘 살펴볼 수 있게 해주는 간편한 도구이다
 이 장에서는 문맥행 추출 프로그램의 일반적 특징과 그 결과 그리고 여러 언어분석 도구들 중의 하나로서 이 프로그램을 이용하는 데에 있어서의 장단점들을 살펴본다

언어특징 연구의 근거로 텍스트를 이용하는 모든 연구 프로젝트라면 어떤 독특한 필요에 의한 것이라서 그에 따른 독특한 방법론이 필요한데 그러한 필요와 방법론은 모두 어떤 특징을 공유한다
 텍스트는 보통 그 안에 포함되어 있는 별개의 언어단위의 행동을 보여주는 증거로 이용된다
 그 해당단위가 개별단어인 경우에 찾을 수 있는 증거는 그 단위들의 통사적 혹은 의미적 특징, 철자, 발음 등이 있다
 거의 모든 경우에 각 단어가 나타나는 문맥도 그 연구대상에 포함되어야 한다
 텍스트의 이해를 위해서 이용할 수 있는 문맥행 추출 프로그램의 한 예로 3장의 1
2
4항에서 보인  빈도목록에서 발췌한 같은 주제에 대한 단어항목들을 들고 싶다

3장에서 나열했던 항목들은  이 창조한 생명체의 명칭으로 사용될 수 있다는 이유로 빈도목록에서 발췌한 것들이다
 빈도목록은 구체적인 주변내역이 포함되어 있는 텍스트로부터 단어를 독립적으로 추출해내어 별도로 연구하기 위한 방법으로 아주 유용하게 이용할 수 있다
 그러나 이와 같이 자세한 주변내역이 없다는 것은 이러한 명칭들이 실제로 어떻게 사용되고 있는지를 정확하게 살펴보는 데에 지장을 초래할 수도 있다
 이 말은 약간 역설적으로 들릴 수도 있으나 빈도목록은 단지 텍스트 연구에 있어서 제일 첫 번째 단계라는 것을 알아야 한다
 단어들을 주변문맥으로부터 분리해서 그 단어들을 개별단어로서 집중연구하여 그 단어들의 잠재적 언어행동에 근거하여 결정을 내려야 한다
 일단 단어를 선택하면 다시 그 단어들이 원래의 텍스트 내에 나타나는 환경을 고려하여 다음 단계의 연구를 진행해야 한다
 문맥행 추출 프로그램은 선택한 단어를 이러한 환경 속에서 찾아내어 그 단어들이 주변의 다른 단어들과 어떻게 관계되어 있는지를 연구할 수 있게 해준다

원래의 목록에는 다음 단어들이 포함되어 있다 :
이 단어들 중에서 , , 과  같은 단어들은 부정적 의미를 내포하고 있다
 그러나 ,  그리고  및 이 단어들의 복수형은 다분히 중립적인 느낌을 준다
 물론 이 단어들 중에서 어떤 단어가 어떤 식으로 사용되는지는 확실하게 알 수 없다
 이것을 확실히 알 수 있게 해주는 것은 문맥뿐이다
 빈도목록은 연구의 초점을 좁혀주는 한 간단한 방법이 될 수 있다

일단 단어들이 선택되면 문맥행 추출 프로그램을 이용하여 각 단어들이 사용되는 문맥행을 찾을 수 있다
 한 예로서,  의 문맥행 중에서 첫 20행을 살펴보자이 문맥행들은  과  가 제작하고   가 판권을 가지고 있는 라는 프로그램을 사용하여 발췌하였다
 :
이 예는 이런 종류의 문맥행 목록의 주요특징을 보여주고 있다
 텍스트에서 사용되는 은 원래의 문맥 속에서 좌우에 고정된 숫자의 문자들로 둘러싸여서 각 행의 중앙에 나타나고 있다
 이 경우 각 행은 문맥행 추출의 기초로 사용된 흔히 검색어-, 혹은 키워드라고 부르는 단어를 포함하여 80자 길이이다
 이와 같은 '문맥 키워드   혹은 ' 문맥행만이 유일한 형태는 아니지만 가장 보편적으로 이용된다
  2
2항에서는 다른 문맥을 설명한다
 이 목록의 작성에 사용된 소프트웨어를 포함하여 여러  프로그램에서 키워드의 좌우측에 오는 문맥의 길이는 가변적이다

제시된 행들의 또 다른 특징은 이 행들이 원래의 텍스트 파일에서의 순서대로 나열되어 있다는 것이다
 문맥행 추출 프로그램에는 행들을 다른 순서로 나열할 수 있게 해주는 보다 정교한 소팅 기능이 있는 것들이 있다
 이와 같은 대체 나열순서에 대해서는 2
4항에서 좀더 자세히 논의한다

의 문맥행을 자세히 살펴보면 분명히 어떤 패턴이 보인다
 여기서 연구하고자 하는 것은 의 창조물 명칭으로 사용되는 단어들의 용례들인데 이것은 결국 단어들이 명사로 쓰일 때에만 관심의 대상이 된다는 것을 말한다
  1행부터 3행까지,  6,  7,  9,  11,  13,  14,  17 그리고 18행에서는 모두 동사적 용례들이기 때문에 고려할 필요가 없다
 같은 검색작업을 97번의 출현빈도를 갖는 에 적용하면 전체에서 50번은 이런 방식으로 간단하게 문맥행을 검사하여 제외시킬 수 있다
 비슷한 방법으로 5, 10, 12, 15 그리고 16행에 나타나는 용례들도 의 창조물 명칭으로 사용되지는 않는다
 결국 위의 문맥행들 중에서 4, 8, 19 그리고 20행만이 가능성 있는 행이라는 것을 알 수 있다 :
같은 방식을 의 명사적 용례에 대해 적용해보면 조사대상으로 남는 것은 30행밖에 안 된다
 대개의 경우에 문맥행 목록에서 사용하는 80자 길이의 문맥으로는 용례를 완전하게 밝히기에 충분하지 않을 수도 있다
 그래서 프로그램 상에서 좀더 광범위한 주변 텍스트를 연구할 수 있게 해주는 기능이 필요할 수 있다
 목록에 나타나는 모든 단어들에 대해서 비슷한 방법을 적용할 수 있다
 해당 문맥행을 통해서 알게 된 정보를 사용하여 가능한 용어들 사이의 구체적인 비교를 할 수 있다

이런 식으로 문맥에 근거하여 개별단어들의 용례를 구분해내는 작업은 문맥정보를 이용한 가장 기본적인 작업이다
 다음 2항에서 논의하는 문맥행 추출 소프트웨어의 정상적인 특징에 대해서 설명하기 위하여 사용하는 예들은 문맥행 목록 사용결과의 해석을 위해서 사용할 수 있는 방법들을 보여주고 또 이러한 방법들을 쉽게 해주는 문맥행 추출 소프트웨어의 특징을 소개하기 위한 것이다

이 항에서는 문맥행 추출 프로그램 제작에 이용할 수 있는 방법들에 대해서 논의한다
 현재 여러 가지 아주 훌륭한 문맥행 추출 소프트웨어가 개발되어 있는데 극도의 정밀한 기능을 필요로 하는 연구 프로젝트를 제외하고서는 이들 중 어느 것이라도 이용할 수 있기 때문에 별도로 소프트웨어를 제작할 필요가 거의 없다
 그럼에도 불구하고 여러 프로그램들 중에서 현명하게 선택하고, 또 극단적인 경우에는 특별히 제작된 프로그램을 이용해야 하는 지의 여부도 정확히 알아내기 위해서는 선택하여 이용할 가능성이 있는 소프트웨어의 이용법을 이해해야 한다

문맥행 추출 프로그램은 다음과 같은 두 가지 주된 작업을 한다 :
텍스트 내에 나타나는 모든 키워드 검색
적당한 형식으로 검색결과 제시
2
1항에서는 이 두 가지 작업들 중 첫 번째 작업에 쓸 수 있는 방법들에 대해서 설명하고 2
2항에서 2
6항까지는 두 번째 작업에 일반적으로 쓸 수 있는 주요방법들을 설명한다

텍스트 안에 나타나는 키워드 검색방법을 선택하는 것은 보통 처리의 효율성에 따라서 결정된다
 대부분의 상용 문맥행 추출 프로그램에는 텍스트에 포함되어 있는 모든 단어에 색인을 부가하는 사전事前 처리과정이 있다
 다시 말하면 텍스트는 빈도목록 작성을 위해서 사용했던 방법과 비슷한 방법으로 개별단어들로 분석된다
 그리고 발견된 모든 단어의 목록과 그 단어들이 원본 텍스트 파일의 어느 위치에 나타나는가를 기록해 놓은 파일을 작성한다
 어떤 경우에는 원본 텍스트를 사용하는 대신 보통 검색과정이 최적의 상태에서 이루어지게 하기 위하여 원본 텍스트에 구조정보가 부가된 데이터베이스로 대체된다
 선택한 데이터베이스의 구조에 대한 세부적인 사항은 별로 중요하지 않다
 그러나 이 선택한 방법이 프로젝트를 위해서 어떤 상대적인 장점과 단점을 가지고 있는지를 잘 평가해야 한다

색인 작성방법은 처리시간을 단축시켜 줄 수 있다
 왜냐하면 색인파일은 원본 텍스트 파일보다 작고 또 검색이 용이하기 때문이다
 이 기술을 이용한 문맥행 추출 소프트웨어는 부산물로 빈도목록을 작성할 수 있게 되어 있어서 별도의 빈도목록 작성용 소프트웨어를 구입할 필요가 없다
 가장 큰 문제점은 사전 처리과정이 필요하다는 것이다
 이 때문에 전체공정에 처리단계를 추가해야 하므로 텍스트를 변경할 필요가 생겼을 때에는 불편할 수 있다
 검색과정에서 발견된 실수들을 교정하려면 텍스트를 수정해야 하는데 조금이라도 텍스트를 수정하게 되면 전체 텍스트 파일에 대한 색인작업을 다시 해야 한다
 이 작업은 텍스트 파일이 큰 경우에는 상당한 시간이 걸린다
 그러나 큰 텍스트 파일을 처리할 때에는 키워드를 찾는데 걸리는 처리시간을 절약하는 것이 무엇보다도 중요하다

텍스트 파일을 단어 이외의 다른 단위로 색인작업을 할 수도 있다
 조금 더 정교한 문맥행 추출 프로그램이라면 말모둠 안에 사용된 표식부호들에 대한 설명도 입력시킬 수 있어서 그 표식부호들에 대한 정보도 데이터베이스로 작성할 수 있게 되어 있다
 이것은 말모둠에 들어 있는 텍스트가 유의한 구조를 지니고 있을 때에는 더욱 유용하게 쓰일 수가 있어서 문맥행 목록을 작성하여 출력할 때에 그 구조를 보여줄 수가 있다
 예를 들어, 희곡 텍스트 말모둠에 막, 장 그리고 배역에 관한 추가정보를 포함시킨다면 이 정보들은 아주 유용하게 사용될 수 있다

특별히 처리과정상의 필요에 의해서 고유의 소프트웨어를 개발하여야 한다면 색인되지 않은 원본 텍스트 파일 검색용 소프트웨어를 제작하는 것이 훨씬 수월할 것이다
 이것은 비록 처리속도의 저하를 초래하기는 해도 더욱 정교한 프로그램 개발에 비용이 많이 소요된다는 것을 고려한다면 처리속도가 좀 느린 소프트웨어를 사용하는 것은 감수해야 한다

앞의 1
3항에서 언급한 문맥 키워드    혹은  출력방식은 여러 가지 다양한 일반 문맥행 추출 소프트웨어의 내용 출력방법들 중에서 가장 널리 쓰인다
 이 방식의 최대장점은 독자가 읽기에 수월하고 문맥차이를 발견하기도 쉽다는 것이다
 전체화면의 중앙에 키워드가 오는데 이는 독자가 행을 따라 읽어가면서 문맥유형에 주의해서 읽을 수 있는 가장 좋은 위치이다
 1
3항에서 든 예는 이것을 잘 보여주고 있다
 예에서 행은 원본 텍스트 파일에서 키워드가 나타나는 순서대로 나열되어 있다
 2
4항의 예는 인접한 문맥의 특정부분에 맞추어 행을 소팅했을 때 그 효과가 어떻게 배가倍加되는가 하는 것을 보여주고 있다

이러한 출력에 있어서의  출력방식의 기본적인 장점에도 불구하고 경우에 따라서는 문맥상의 다른 내용을 출력한다거나 또는 다른 형식으로 출력하는 것이 더 적절한 경우도 있다
 그래서 여러 가지 문맥행 추출 소프트웨어 중에는 다음과 같은 기준으로 출력하는 경우도 있다 :
텍스트의 길이에 다양성을 부여한  방식
문장문맥
문단문맥
전체 텍스트 훑어보기
여기에서 첫 번째 기준은 키워드를 중심에 오게 하면서도 텍스트의 길이를 조정할 수 있게 해주는 것이다
 화면출력에 있어서 화면크기로 인한 제약 때문에 한번에 화면에 전체문맥을 출력하지 못할 수도 있다
 그 경우에 프로그램 상에서 문맥행을 횡으로 움직일 수 있게 해줌으로써 문맥의 양쪽 끝까지 내용을 다 보게 해줄 수 있다
 일단 인쇄할 경우에는 자료를 다루기가 쉽다
 그리고 문맥의 길이는 키워드를 중앙에 오게 하면서도 160자까지 별 어려움 없이 읽을 수 있을 정도로 출력할 수 있기 때문에 문맥행 읽기가 훨씬 수월해진다

문장문맥과 문단문맥은 해당 키워드가 나타나는 문장이나 문단 중앙에 키워드가 오도록 하는 것이다
 일반적으로 문장이나 문단의 경계는 텍스트를 살펴보면 알 수 있다
 이 방법은 단순히 문맥길이에만 의존하는 출력방식보다 훨씬 엄격히 언어학적인 배열방식이 될 수 있지만 단어들 사이의 상호작용은 흔히 문장이나 문단경계를 넘어서까지 일어나고 또 이렇게 문장이나 문단을 사용함으로써 텍스트의 구조에 관한 중요한 의문점들에 대한 해답을 먼저 얻어낼 수 있다

전체 텍스트 상에서 키워드가 나타나는 지점의 앞이나 뒤로 훑어보는 기능은 단어용례에 관한 세부사항을 확인할 필요가 있을 때 가능한 한 많은 문맥을 점검해볼 수 있도록 해준다
 다른 세 가지 방법들과는 달리 이 방법은 스크린을 보면서 순간순간 필요할 때에만 이용할 수 있는데 소프트웨어에 따라서는 관심을 끄는 텍스트를 원하는 만큼만 선택하여 인쇄할 수 있게 해주기도 한다

문맥행 추출 프로그램에서 키워드는 지금까지 아주 간단명료한 것으로 가정해왔다
 찾고자 하는 패턴을 표시하는 문자열을 문맥행 추출 프로그램에 입력하여 그것을 바탕으로 그 문자열이 나타나는 문맥행만을 찾아서 나열해준다
 실제로는 이 작업은 전혀 간단한 것이 아니다
 한 가지 예를 든다면 문장 제일 앞에서는 어떤 영어단어라도 첫 문자는 대문자로 표기된다
 또 다른 예는 만일 단어가 명사나 동사라면 기본형태는 물론이고 그 단어의 다양한 활용형에 대해서 관심을 갖게 될 수 있다
 이러한 문제들을 가능한 한 편리하게 해결하기 위해서 문맥행 추출 소프트웨어에는 흔히 패턴일치 문자- 를 조정할 수 있는 기능이 있는데, 이에 대한 가장 일반적인 사항들에 관해서는 다음 두 항에서 다루겠다

텍스트 처리에 있어서 대문자의 문제는 빈도목록을 설명하면서 이미 언급하였다3장 2
2
3항 참고 
 특정 키워드 검색에 있어서 대소문자의 구분을 무시하는 것이 좋기 때문에 대부분의 문맥행 추출 소프트웨어는 대소문자를 구별하지 않고 처리하는 것이 일반적이다
 예컨대, 와 를 같은 단어로 인식한다
 그러나 때에 따라서 가령 고유명사를 검색하는 경우와 같이 대소문자 구분이 필요한 경우도 있기 때문에 이 기능은 보통 별도의 선택사항으로 선택할 수 있게 되어 있다

한 단어의 여러 가지 가능한 형태는 보통 와일드 카드 기호  의 형태를 통해서나 혹은 더욱 정교한 시스템을 구비한 경우에는 키워드를 정규표현 으로 구체적으로 표현하는 기능을 이용해서 검색할 수 있다
 이 용어들의 유사성과 차이점에 관해서는 다음과 같이 약간의 설명이 필요하다

2
3
2  와일드 카드    영어의 수많은 명사와 동사의 경우에 기본형 이외의     단어형태들은 형태 규칙체계에 따라서 고정된 어간에 여러 가지 어미가 부가됨으로써 형성된다
 예컨대,  의 복수형은 이다
 와일드 카드를 사용하면 이 규칙성을 최대한도로 이용하여 키워드의 일부를 소프트웨어 상에서 다른 한 문자 혹은 여러 문자를 의미하는 기호로 바꿀 수 있다
 만일 그 기호를 일반적인 관례대로 '*'라고 가정한다면 *라는 키워드를 입력함으로써 문맥행 추출 프로그램이 로 시작되는 모든 단어들을 찾아내게 할 수 있다
 물론 여기에는 두말 할 필요도 없이 복수형인 도 포함된다
 이와 비슷하게 키워드로 *를 입력하면 ,  ,   그리고  등의 단어들을 찾아낼 수 있다
 이 방법은 비록 방법론적으로는 확실히 좀 거친 면이 없지 않아 있지만 한 단어에 관련된 여러 형태들을 찾아내기 위해서 유용하게 사용할 수 있다

한 예로 *를 키워드로 입력하여  텍스트를 검색하면 다음과 같은 결과를 얻을 수 있다 :
전체적으로는 문맥행 목록에는 39번의 와 3번의 가 들어 있다
 그러나 그 목록에는 다음 행들도 포함되어 있다 :
이렇게 키워드와는 무관한 행들이 전체 70행 중에서 28행을 차지하고 있고 단지 42행만이 실제로 필요한 단어들을 보여주고 있다
 비슷하게 *를 키워드로 입력하면 원하는 것보다 더 많은 결과를 얻게 된다
  텍스트에서 이 키워드를 사용하여 검색한 첫 10행을 살펴보자 :
행 중에는 6행, 8행과 10행 그리고 7행를 포함하고 있는 행들이 있지만 그밖에도 1행부터 5행까지와 9행를 포함하고 있는 행들도 있다
 다른 행들을 보면 도 포함하고 있지만 또한 과 도 포함하고 있다

여러 가지 문맥행 추출 프로그램들 중에는 이런 문제들이 발생할 수 있는 범위를 줄이기 위해서 와일드 카드의 사용을 정밀하게 조정할 수 있게 해주는 프로그램들이 있다
 이렇게 문맥행을 추출하기 위해서 사용하는 프로그램에는 '?'로 표기되는 또 하나의 와일드 카드 기호가 있는데, 이 기호는 어떤 문자이든 한 번 나타날 수 있는 경우에 사용된다
 만일 * 대신에 ?라는 키워드를 사용하면 결과적으로 45행을 얻게 된다
 이들 중에서 42개는 원하는 형태인 와 이지만 나머지 3개는 라는 단어를 포함하고 있다
 검색을 더욱 정밀하게 하려면 검색형식을 더욱 정밀하게 규정해야 한다

2
3
2  정규표현들   정규표현은 와일드 카드를 보다 수준 높게 개발한 것으로 컴퓨터에서 다양하게 쓰인다
 그리고 문맥행 추출 프로그램에서 찾아볼 수 있는 정규표현 기능은 아주 일반적인 표기체계를 수정한 것들이다
 가장 간단한 수준에서 말한다면 대체 키워드를 입력할 수 있게 해준다
  의 다양한 형태에 관해서 앞에서 살펴보았던 예에서는 필요한 모든 형태를 전부 입력하도록 되어 있다
 이 모든 형태들이 필요하다는 것을 프로그램으로 하여금 인식하게 만들기 위해서는 특별한 분리기호를 사용해야 한다
 이 장에서 결과를 보여주기 위한 예에서 사용하는  프로그램에서는 의 여러 형태들의 목록은 다음과 같다 :
이 패턴을 사용하여 의 모든 형태를 앞 항에서 논의한 원치 않는 행들을 배제시키고 찾을 수 있다
 어떤 문맥행 추출 프로그램에서는 정규표현 표기방법을 더욱 유용하게 사용할 수 있어서 더욱 광범위한 형식들을 더욱 효과적인 형태로 규정할 수 있는데 이것은 다른 프로그램의 일반 표기방식을 모방한 것이다
 더 복잡한 표기체계에서는 상위문자를 사용하는데 이것은 와일드 카드를 더 발전시킨 형태로서 형식 내에서의 여러 요소들의 관계를 구체적으로 밝혀줄 수 있다
 이러한 상위문자들은 소프트웨어마다 다르므로 사용하는 소프트웨어 내에서 그러한 상위문자들이 어떻게 사용되는 지를 알고 싶으면 사용설명서를 주의 깊게 읽어보아야 한다
 가능한 형식의 한 예로서 프로그래밍 언어인  및 다른 여러 가지 표준  도구 프로그램에서 사용되는 정규표현 표기방법을 이용하여 의 여러 형태를 구체적으로 어떻게 표기하는 지를 다음에서 살펴보자 :
^||?$
이 패턴은 문자열이 로 시작되면^ 기호, 그 다음에 괄호 안에 있는 '|'표시로 나누어져 있는 대체표현들 중의 한 표현이 한 번만 혹은 전혀 안 나타날 수 있다는 사실이 '?' 기호로 그리고 마지막으로 그 다음에는 문자열의 끝이 온다는 사실이 '$' 기호로 표현되고 있다
 이 표현에서 '^', '', '|', '' 그리고 '$'는 모두 상위문자들로 문자열 내에서 다른 문자들 사이의 관계를 표현해준다

단어의 출현빈도가 높을 때에는 텍스트 파일에서 찾아낸 문맥행에서 형식을 찾아내기가 어려운 경우도 있다
 여러 가지 문맥행 추출 소프트웨어에는 소팅 기능이 있어서 연구에 적합하게 스크린이나 파일로 출력되는 문맥행들을 변경할 수 있게 해준다
 프로그램마다 기능들이 다양하다
 그러나 결과를 순서대로 배열할 때에는 기본적으로 다음과 같은 기준에 따른다 :
원본 텍스트 내에서의 문맥행 출현순서
와일드 카드나 정규표현을 사용하는 경우 키워드
키워드 좌우측으로 정해진 숫자만큼의 단어를 사이에 두고 오는 단어
문맥행을 추출한 후 사용자가 배정하는 범주
이들 중 한 가지가 대개 기본 선택사항으로 사용되고 나머지는 그때그때 상황에 따라서 선택 및 사용되어서 일단 프로그램이 실행되는 동안 잠깐만 기다리면 문맥행들을 다른 순서로 재배열하여 스크린에 출력해준다거나, 혹은 파일형식이나 프린터로 출력하게 된다
 문맥행 순서를 정하는 것은 연구의 필요성에 따라 결정하지만 일반적인 사항들은 다음과 같이 말할 수 있다

문맥행들을 원본 텍스트에서의 출현순서로 배열하는 것은 예를 들어서 텍스트의 여러 부분에서 용례의 차이를 조사하려고 한다면 유용하다
 목록에 포함되어 있는 문맥행들을 여러 부분으로 나누고 그 나뉜 부분들을 서로 비교하여 용례의 차이를 살펴보려고 한다는 것을 각 부분마다 노트 형식으로 밝혀줄 수 있다
 몇몇 소프트웨어에서는 이것을 기본으로 하고 있는데 만일 전용 문맥행 추출 소프트웨어를 개발하고자 한다면 그 소프트웨어에서도 결과출력 순서로 이렇게 텍스트 내의 출현순서를 기본으로 지정할 수 있다

와일드 카드나 기타 다른 정규표현을 사용하여 여러 개의 키워드를 입력한 경우에는 키워드 순서도 아주 유용하다
 그 잠재적인 유용성을 보여주는 한 예로서 앞의 2
3
2항에서 이미 언급되었던 *를 키워드로 사용하여  텍스트에서 작성한 첫 20행을 살펴보자 :
여러 가지 키워드가 섞여있기 때문에 어느 행이 중요하고 또 어느 행이 그렇지 않은 지를 알아보기가 힘들다
 만일 이 행들을 키워드 순서로 배열한다면 그 위치는 훨씬 분명해진다
 다음은 전체 80개 행들을 키워드 순서로 배열하고 목록은 동일한 키워드 형태 위주로 나눈 예이다
 목록 제일 왼쪽의 숫자는 재배열된 목록 내에서의 위치를 나타낸다 :
여기에서는 각 단어형태들을 분리해 놓았기 때문에 문맥행들을 훨씬 수월하게 읽을 수 있다

한 키워드가 많이 출현하는 경우에 다양한 용례를 보이기 위해서 문맥을 잘 살펴보아야 한다
 여러 가지 소프트웨어들은 이 작업을 쉽게 할 수 있게 하기 위해서 문맥 내에 나타나는 특정단어를 중심으로 소팅할 수 있는 기능을 가지고 있다
 이것이 얼마나 유용한가를  텍스트에서 라는 단어가 나오는 문맥행들을 텍스트의 원래 출현순서대로 배열해놓은 다음의 예를 통해서 살펴보자 :
위의 문맥행들을 자세히 살펴보면 2행이나 9행처럼 어떤 경우에는 키워드가 목적어 없이 사용되고 있고 3행이나 7행과 같은 경우에는 목적어가 키워드 바로 뒤에 온다는 것을 알 수 있다
 만일 키워드 오른 쪽에 오는 첫 번째 단어를 소팅의 기본단어로 지정한다면 문형을 찾기가 약간 쉬워진다
 다음은 키워드를 포함하고 있는 문맥행들을 이런 방식으로 배열한 예이다 :
비록 위와 같이 재배열해서도 앞에서 말한 두 가지 형식을 완전히 분리시키지는 못했지만 여러 곳에서 찾아볼 수 있듯이 그 형식들은 알아보기 쉽게 되어 있다
 처음 11행 중에서는 1행과 7행이  뒤에 바로 목적어가 오고 있고, 12행부터 14행까지, 16행, 19행 그리고 25행부터 34행까지도 비슷한 구조를 갖고 있다
 이 방법으로 언어학적 의미가 있는 형식들을 다 구별하지는 못한다고 해도 그것들을 훨씬 용이하게 알아볼 수 있게 해줄 수 있다
 그리고 이 예에서 보인 소팅의 형태는 텍스트행 내에서 키워드 위치와 상관적으로 나타나는 개별단어들을 기준으로 사용할 수 있다는 점에서 주목할 만한데, 일반 소팅 도구 프로그램으로는 이 작업이 매우 어렵다
 문맥행 추출 소프트웨어를 사용하면 이미 문맥행들을 적절하게 출력하기 위해서 추가한 정보를 사용하여 관련자료의 위치를 밝혀줄 수 있다

문맥행 목록을 사용하게 되면 행 내에서 다른 단어들이 제공하는 문맥정보에 근거하여 일반적으로 각 행 내에서의 키워드의 사용유형을 구분할 수 있게 된다
 지금까지 논의한 소팅 방법들은 이 작업을 쉽게 해준다
 그러나 여전히 그 결과는 완전히 소팅되었다고 볼 수는 없다
 어떤 소프트웨어들은 개별 행들이 속하는 범주를 결정해 주어야만 하며, 이 결정사항을 소팅의 단서로 사용하여 결과를 얻게 된다
 위의 1
3항에서  텍스트에서의 의 문맥행들을 통해서 97번의 빈도 중에서 단지 47번만이 동사가 아닌 명사로 사용됨을 살펴보았다
 이렇게 중요한 것들은 어디엔가 기록해 놓지 않고서는 기억하기 힘들다
 그래서 각 행을 특정범주이 경우에는 명사나 동사에 배정하고 그 사실을 기록하여 거기에 해당되는 행들이 범주별로 소팅되게 하면 처리과정의 신뢰성이 훨씬 높아질 수 있다
 아래에서 이 포함되어 있는 모든 문맥행들이 이렇게 표시되어 있는데, 왼쪽 두 번째 칸의 '0'는 명사적 용례를 그리고 '1'은 동사적 용례를 나타내며 이를 기준으로 범주별 소팅이 되어 있다 :
일단 이런 식으로 문맥행들을 소팅하게 되면 배정된 범주를 확인하기는 아주 쉽다
 만일 실수가 발견되면 교정하여 문맥행들을 다시 소팅하면 그 결과는 사용하기가 훨씬 용이해질 것이다

대부분의 문맥행 추출 프로그램들은 화면출력을 그 기본사양으로 삼고 있는데 많은 경우에 영구적인 결과를 얻기 전까지는 다른 출력방법을 이용하여 어느 정도의 재배열, 노트 수록 그리고 편집까지도 가능하다
 일반적으로는 다음 출력방법들이 이용된다 :
프린터 직접 출력
텍스트 파일 출력
이들 중에서 두 번째 것이 대개는 더 편리한데, 왜냐하면 파일은 문서작성 프로그램을 이용하여 편리하고 신축성 있게 인쇄할 수 있고, 또 일단 텍스트 파일 형태로 보관하게 되면 그것을 이용하여 그 다음 단계의 작업도 할 수 있기 때문이다
 예컨대 5장에서는 텍스트에서 찾을 수 있는 연어連語패턴의 중요성을 평가하기 위해서 문맥행들을 이용하여 계산하는 것을 보여주고 있다
 비록 프로그램에는 직접인쇄 출력만이 가능하게 되어 있지만 컴퓨터 운용체계에서 지원하는 출력방향전환 기능을 이용하여 프린터 대신 텍스트 파일로 저장할 수 있다

모든 문맥행 추출 프로그램들은 출력에 관한 한 다소간의 조절을 할 수 있는데 보통 다음 기능들 중에서 선택할 수 있다:
일반적으로 문맥행 길이를 화면 출력시時보다 더 길게 할 수 있다

행 번호 붙이기
텍스트 참고사항
행번호를 붙이면 어떤 단어가 어느 위치에 오는 지 찾기가 훨씬 쉬워진다
 그리고 텍스트 참고사항에는 행번호를 붙이기 위해서 사용한 텍스트 파일의 이름을 비롯하여 - 이것은 특히 한 번에 여러 개의 텍스트 파일을 처리하게 될 경우에는 아주 유용하다 - 텍스트 내에서 한 단어가 오는 정확한 위치를 기록해 놓을 수 있다
 이러한 자세한 위치정보를 이용하기 위해서는 원본 텍스트 파일에 이러한 정보들을 프로그램이 처리할 수 있도록 자세하게 표시해 놓아야 한다

어떤 문맥행 추출 프로그램에서는 개별 문맥행 이외에도 자료파일에 대한 기타정보를 제공하기도 한다
 파일크기와 키워드 출현빈도 등의 통계자료는 쉽게 계산되어 제시될 수 있고, 텍스트 색인 작성용 프로그램에는 포함된 기능들 중의 하나로 전체빈도목록을 작성하는 기능이 포함되어 있기도 하다
 이 기능을 이용하면 3장에서 논의한 단어 출현빈도 통계자료도 쉽게 작성할 수 있다
 색인작성기능이 없는 프로그램들 중에는 비록 이런 기능은 없어도 연어나 구 구조와 관련된 정보들을 작성할 수 있는 기능은 있다

5장에서는 연어패턴 연구를 위한 문맥행 이용에 대해 자세히 논의하고 있다
 어떤 문맥행 추출 프로그램은 기본 연어관계를 계산하여 그 결과를 출력해줄 수 있다
 대부분의 경우에 제시되는 정보는 5장에서 기술한 대규모 분석방법들을 통해서 작성된 정보만큼 자세하다거나 혹은 완전하지는 않아도 추가연구를 수행하는 데 있어서 유용한 지침을 제공해줄 수 있다

한 예로 을 문맥행 추출 프로그램으로 분석하여 얻어진 연어정보를 살펴보자
 다음 목록은 10번 이상의 빈도를 보이고 또  좌우로 세 단어의 거리에 오는 모든 단어들을 보여주고 있다 :
이 자료만 가지고는 이 다소 중요한 단어라는 사실 이외에는 별다른 결론을 얻을 수 없다
 이 목록은 연어관계의 평가근거로 사용하기는 아주 빈약해도 출발점으로는 유용하게 사용할 수 있다

문맥행을 사용하면 텍스트에서 구 구조 찾는 일을 한결 수월하게 할 수 있다
 우선 구가 있다는 증거를 보여줄 수 있는 문형은 비문맥행보다는 문맥행에서 보다 분명하게 나타난다
  2
4
3항에서는 라는 키워드의 문맥행들을 키워드 오른 쪽에 오는 단어순서에 따라서 소팅하였다
 소팅된 결과 중에서 10행과 11행을 보자 :
이 예들을 보면  는 가능한 구로서 연구해 볼 가치가 있다
 여러 가지 문맥행 추출 프로그램은 가능한 구들을 찾아내는 간단한 기능을 가지고 있어서 키워드와 또 바로 다음에 오는 단어를 같이 보여줌으로써 어떤 단어들이 키워드 다음에 올 수 있는가를 볼 수 있게 해준다
 반드시 특정단어가 다른 정해진 숫자만큼의 다른 단어들과 같이 올 때에만 그 단어는 키워드로 선정되어 출력된다
 때로는 같이 오는 단어들이 키워드 어느 쪽에 오게 할 것인지도 규정할 수 있다
 이 경우에 만일 를 키워드로 하고 가 의 오른 쪽에 올 수 있는 다섯 개의 단어들 중에서 두 번째 단어로 나타나는 예를 찾는다면 다음과 같은 결과를 얻을 수 있다 :
이 간단한 프로그램으로 이 구가 5번 출현한다는 사실을 알아냈는데 3번은 다른 텍스트가 중간에 삽입되어 있는 경우이다
 연어에 관한 좀더 자세한 작업이 수반되면 이 프로그램은 구 구조 연구에 있어서 아주 강력한 도구가 될 수 있다

1
3항에서 제시한 예는 상용 전문 소프트웨어를 이용하여 작성된 문맥행에서 선택한 것들이다
 물론 전문적으로 제작된 소프트웨어가 분명히 더 효율적이고 유동적이긴 하지만 일반적인 텍스트 처리용 프로그램을 이용해도 비슷한 문맥정보를 얻을 수 있다
 이 항에서는 텍스트 연구의 초기에 이용할 수 있는 몇 가지 프로그램에 대해서 논의한다

문맥행 추출 프로그램이 효과적으로 이용되는 경우는 연구대상 단어나 단어들이 나타나는 것을 찾아서 적절한 형태로 나열하여 보여주는 데에 있다
 이 작업의 첫 부분, 즉, 단어들을 찾는 것은 대부분의 텍스트 편집 프로그램이나 문서작성 프로그램의 검색기능을 이용하여 할 수 있다
 한 예로서, 이 책의 집필을 위해서 필자가 이용한 문서작성 프로그램에는 입력되어 있는 어떤 단어든 원하는 대로 현재 위치에서 텍스트의 앞이나 뒤로 이동하면서 그 단어를 검색하는 기능이 있다
 일단 단어를 찾으면 그 단어는 주변 텍스트와 같이 다른 색으로 표시된다
 그러면 문맥을 살펴보고 만일 적당하다면 문맥목록을 만들기 위해서 해당부분을 다른 파일로 복사할 수 있다
 이 과정은 다른 전문 문맥행 추출 프로그램과는 달리 자동화되어 있지 않고 목록작성 과정은 훨씬 오래 걸리긴 해도 다른 작은 장점이 있을 수 있다

우선 이미 문서작성 소프트웨어를 가지고 있다면 추가비용을 지출하지 않아도 된다
 만일 문맥행 추출 프로그램을 조금만 사용할 것이라면 이것은 아주 중요한 사항이다
 텍스트에 특수문자가 다수 포함되어 있다면 더 큰 혜택을 볼 수가 있다
 만일 사용하는 문서작성 프로그램에서 텍스트를 입력하고 편집하는 데에 특수문자의 사용을 허용한다면 그 안에 들어있는 검색기능에서도 이 특수문자를 동등하게 다룰 수 있다
 이 방법을 이용한다면 문서작성 프로그램으로 작성된 서류를 일반 텍스트 형식으로 변환시키는 번거로운 절차 없이 직접 사용할 수 있다

아주 소규모의 연구를 제외하고서는 이런 장점들이 작업을 자동화시키지 않는 데에서 생기는 문제점들을 다 덮어주는 것은 아니다
 그러나 프로젝트의 초기단계에서는 아주 유용하게 쓰일 수 있다
 특히 문서작성 프로그램에 매크로 기능이 있어서 어느 정도 작업을 자동화시킬 수만 있다면

대부분의 컴퓨터 운용체계에서 이용할 수 있는 일반 텍스트 검색 소프트웨어도 연구의 초기단계에서는 유용하게 이용할 수 있다
 이 프로그램들은 특정 텍스트의 검색에 쓸 수 있는데, 보통 파일 내에서 특정 문자열을 포함하고 있는 행을 보여준다
 이들 중 상당수는 아주 간단해서 극히 분명하게 주어진 문자열만을 검색할 수 있는 반면, 좀 더 강력한 프로그램에서는 정밀한 정규표현을 기초로 하여 텍스트 패턴을 검색할 수 있다

이들 중 가장 강력한 프로그램들은 문서작성 프로그램 내의 검색기능에 비해서 텍스트 연구의 초기단계에서 더 효과적으로 이용할 수 있는 반면에 간단한 프로그램들은 보통 그 효용성이 덜하다
 그러나 아무리 프로그램이 강력하다고 해도 전문화된 문맥행 추출 프로그램 정도의 도움을 주지는 못하는데, 왜냐하면 키워드나 텍스트 패턴과 함께 입력할 수 있는 문맥을 조정할 수 있는 능력이 없기 때문이다
 그 이유에 대해서는 다음 항에서 살펴본다
  8장의 3
2
3항에서는 응용 프로그램 내에서 검색기능을 이용한 실제 예를 살펴본다

언어학적인 차원에서 텍스트를 구성하는 단위들의 계층성은 다음과 같이 요약될 수 있다 :
컴퓨터로 읽어들일 수 있는 텍스트 파일도 동일한 논리구조를 갖는다
 그러나 그 실제형태는 다음과 같은 3단계의 계층이 기반을 이룬다 :
이 세 가지 중 마지막 단위, 즉 텍스트 행들은 언어계층에서의 어떤 단위와도 상응하지 않으며 이것은 변환과정에서 임의로 만들어진 것으로 여기는 것이 좋다
 많은 경우에, 특히 텍스트를 컴퓨터로 읽어들일 수 있는 형태로 변환하기 위하여 스캐닝했을 때 텍스트 행들은 대개 텍스트 입력과정에서 사용된 인쇄된 원본 텍스트 행들과 일치하지만 반드시 그런 것은 아니다
 행단부호 를 텍스트에 삽입하게 될 수도 있는데, 이는 어떤 소프트웨어는 특정 길이 이상의 행을 처리하지 못하기 때문에 이를 처리하기 쉽게 하기 위한 것이다
  1장의 3
2
2항에서 텍스트 처리에 있어서 이런 형태의 파일구조가 지니는 일반적인 효과를 논의하면서 이미 컴퓨터 텍스트 파일에서 사용되는 전형적인 행단부호를 보여주는 예를 살펴보았다

앞의 항에서 언급된 텍스트 검색용 도구 프로그램에서 행단부호가 갖는 의미는 프로그램들이 찾아내는 문맥을 보통 패턴이 발견되는 텍스트 행으로만 제한한다는 것이다
 표준 텍스트 검색 프로그램인 을 이용하여  텍스트 파일에서 추출한 을 포함하고 있는 행들을 다음에서 살펴보자
 출현단어들은 앞에서 문맥행 추출 프로그램을 사용한 예에서 본 것과 같지만 각 단어가 나타나는 문맥은 단순히 텍스트 행에 불과하다 :
원본 텍스트 파일에 포함되어 있는 행단부호나 기타 다른 구조적인 문제점들에도 불구하고 적절한 문맥을 뽑아내기 위해서는 문맥행 추출 프로그램은 복잡한 기능을 가질 수밖에 없다

4
 문맥행 추출 소프트웨어 사용시 문제점
문맥행 추출 프로그램을 사용할 때 생길 수 있는 주요 문제점들에 대해서는 2
3항에서 키워드에 대해서 자세히 논의하면서 이미 언급한 바 있다
 두 가지 주요 문제점이 있다
 하나는 찾고자 하는 단어를 출력하지 않는 것이고 또 하나는 찾지 않는 단어를 출력하는 것이다
 이와 관련하여 어떻게 하면 작업에서 그 영향을 줄일 수 있는 가에 대해 몇 가지 제안을 곁들여서 다음과 같이 살펴본다

필자로부터 수업을 듣는 학부학생 한 명이 여러 영어 단어에서 흔히 일어나는 의미변화를 연구하고 싶어했다
 그 단어들 중의 하나는 였다
  영어 텍스트 말모둠 중의 방언 부문에서 의 문맥목록을 작성했는데, 그 결과 모두 29개의 용례가 발견되어서 문헌에서 설명되어 왔던 변화에 대한 확증을 찾은 듯 하였다
 그러나 그 예들은 너무 수박 겉핥기 식으로 빈약하였다
 그 단어의 발달과정에서 한 가지 중요한 특징이 간과된 것이다
 즉, 연구대상으로 삼았던 발달기간 중에 그 철자형태가 상당히 변화된 것이다
  영어 사전   에는 다음과 같은 이 단어의 몇 가지 다른 형태들이 수록되어 있다 :
이 형태들도 연구에 포함시킨 결과 훨씬 더 유용한 문맥목록을 작성할 수 있었다
 새로운 목록에는 52번의 출현빈도를 보였고 연구에 훨씬 유용한 기반을 제공하였다

철자변이형만이 이 문제를 야기한 것은 아니다
 형태변화 또한 여러 가지 상이한 단어형태를 만들어내게 되는데, 문맥행 추출 프로그램으로는 키워드 검색에 있어서 이 변이형태들을 검색해낼 수 없다
 이 문제를 해결할 수 있는 방법들에 대해서는 2
3
2항에서 와일드 카드와 정규표현을 논의하면서 살펴본 바 있다
 이런 방법들은 단어형태 변이형을 처리하기 위해서 사용하기에는 상대적으로 원시적이기는 하지만, 만일 관심을 끄는 모든 단어형태들을 망라한 목록을 만들 수 있다면 이 방법은 효과적일 수 있다
 만일 대규모 연구라면 일련의 규칙을 통해서 고유의 검색패턴을 만들어 낼 수 있는 문맥행 추출 프로그램을 개발할 수도 있다
 그러나 이것은 상당히 복잡하면서도 특별히 더 나은 결과를 얻게 되리라고 여겨지지는 않는다

1
3항에서 설명한 키워드 에 대해 작성된 목록에는 이 단어가 총 97번의 빈도를 보인다
 자세히 살펴보면 이들 중에서 30개, 혹은 1/3만이 연구목적에 부합되는 것들이다
 나머지는 다른 품사, 즉, 명사보다는 동사로 사용된 의 예들이었다
 많은 경우에 하나 이상의 의미를 갖는 동사들이 나타날 때에도 그 의미들 중에서 특정의미로 해석되는 경우에만 연구에 포함시킬 수 있다
 일반적으로 말해서 문맥행 추출 프로그램은 빈도목록 프로그램과 마찬가지로 키워드를 검색할 때 간단한 패턴일치 기술을 사용하고, 또 상이한 통사, 의미자질을 구분할 수 없으며, 따라서 동형어 같은 경우에 상당히 부정적인 결과가 나올 수 있다

만일 좀 더 높은 정확도가 요구된다면 자료를 수정하거나 혹은 빈도목록 사용에 있어서 생기는 같은 문제를 해결하기 위해 제안했던 비슷한 방법으로 처리절차를 바꿀 수 있다
 원본 텍스트에 단어형태를 구분해줄 수 있는 정보를 추가하거나 또는 자동적으로 차이를 발견할 수 있는 특별한 소프트웨어를 문맥행 추출 프로그램에 추가하면 된다
 이 두 가지 방법의 이용가능성에 대해서는 6장에서 논의한다

5
 요약
언어적 증거의 출처로서 문맥행을 이용하는 근거는 개별단어들이 나타나는 환경을 보여줄 수 있다는 데에 있다
 현대의 전문 문맥행 추출 프로그램에서 사용할 수 있는 기능들은 개별단어들이 나타나는 텍스트 문맥에서 발견되는 패턴을 관찰하고 구분하는 과정을 용이하게 해줄 수 있다
 특정 키워드나 여러 키워드들을 포함하는 문맥행 자체는 언어적 특징에 대한 자세한 정보를 제공해줄 수 있으며, 문맥행은 연어유형의 중요성 평가를 위한 추가연구의 기초자료로 이용될 수 있다

1
	 의 구성부분들을 모두 보여주기 위해서는 문맥행 추출 프로그램에 어떤 키워드를 입력해야 하겠는가?
2
	아래의 예는  의   이라는 소설에서 에 대해서 추출한 문맥행 목록이다 :
위의 예에서 의 용례를 몇 개나 찾을 수 있는가?
3
	다음 문맥목록은  텍스트에서 발췌하였는데 3장의 1
2
4항에서 살펴보았던 주제관계 에 있는 과 을 보여주고 있다
 두 단어 사이에 텍스트 환경과 주제연관성에 있어서 중요한 차이가 있는가?
앞에서 논의했던 문맥행 추출 방법은 전적으로 정성분석定性分析,   위주의 방법이다
 즉, 이 방법은 말모둠 내의 문맥 중에 나타나는 키워드 하나하나의 행태를 평가하기 위해서 사용한다
 각 단어의 복잡한 행태와 그 기술방법의 복잡성으로 말미암아 대부분의 자동 수치분석은 불가능하지는 않지만 적용에 상당한 어려움이 따른다
 한 행태를 다른 행태와 구분하는 결정을 내린 뒤에야 정량평가定量評價,  가 가능하다
 문맥행 목록은 여전히 아주 유용하게 사용할 수 있는데 인간의 판단력을 사용하는 대신 자동으로 분석할 수 있다면 대단히 만족스러운 일이 될 것이다
 적어도 분석에 있어서 어느 정도는 자동으로 그리고 어느 정도는 정량적으로 분석할 수 있다
 이것을 가능하게 한 기술이 바로 연어분석이다

연어는 '텍스트 내에서 두 개 혹은 그 이상의 단어들이 짧은 거리 내에 나타나는 것                ' 1991 : 170으로 정의된다
 연어분석에서는 보통 실제로 나타나는 패턴이 기대되던 패턴과 어느 정도 차이나는 지가 관심거리이다
 조금이라도 의미심장한 차이가 있다면 그것은 적어도 텍스트에 존재하는 한 단어가 어떤 방식으로든 다른 단어의 출현에 영향을 미친다는 증거가 될 수 있다
 이 장에서는 실제 공기-패턴과 예상 공기패턴을 산출하고 비교하는 방법, 결과의 중요성을 평가하고 또 그것이 함축하는 의미를 평가하는 방법에 대해서 검토한다
 어떤 문맥행 추출 프로그램은 결과를 연어분석 형태로 보여줄 수 있다
 2항에서는 연구 프로젝트에서 이 정보의 사용가능성을 살펴본다
 3항에서는 전용 연어분석 소프트웨어를 제작할 때에 고려해야 할 사항들을 살펴보고,  4항에서는 연어분석 결과를 어떻게 해석하고 이용할 수 있는 지에 대해서 살펴본다

문맥행에는 연어분석에 필요한 기본정보들이 이미 포함되어 있고 어떤 문맥행 추출 프로그램은 연어분석 기능을 가지고 있다
 이 방법은 단순히 키워드에 인접해 있는 단어들의 빈도정보 조사에서부터 비교작업에 필요한 수치를 계산하고 그 수치를 이용하여 유의도 계측을 할 수 있게 해주는 정교한 통계자료까지 포함되어 있다
 다음의 두 예는 문맥행 추출 프로그램을 이용해서 할 수 있는 여러 가지 작업들 중에서 두 가지를 보여준다

문맥행 추출 프로그램에서 찾아볼 수 있는 가장 기본적인 형태의 연어정보는 키워드로부터 정해진 거리 내에 위치한 모든 단어들의 빈도목록이다
 이 빈도목록은 사용자의 확인과정을 거쳐서 프로그램에 입력된 문맥행들을 이용하여 쉽게 작성할 수 있다
 한 예로, 다음은  텍스트에서 나타나는 키워드 에 대해  프로그램을 사용하여 작성하였다
 이 목록에서는 키워드 좌우측으로 세 단어의 고정간격을 유지하였다:
이 목록의 주요 문제점은 자료에서 그냥 빈도를 측정함으로써 키워드 로부터 특정거리 내에서 상대적으로 높은 빈도를 보이는 ,  그리고 과 같은 아주 일반적인 단어들이 의미적 연어패턴에 관한 한은 별로 결정적 증거를 제공하지 못함에도 불구하고 목록에 포함되어 있다는 것이다
 이 단어들은 공기빈도만을 놓고 볼 때에는 대부분의 키워드와 밀접하게 결합한다
 목록 중에서 몇몇 단어들은 주의해서 보아야 하는데, 문법어들을 배제시키면 더욱 유용하게 만들 수 있다
 그 결과 다음 단어들만이 목록에 남게 된다 :
이 단어들은 모두 와 상당히 밀접한 패턴을 이룰 수 있기 때문에 추가연구를 할 필요가 있다

두 번째 예에서도  텍스트에서 발췌한 를 이용한다
 라는 문맥행 추출 프로그램을 사용해서 키워드 좌우측으로 다섯 단어의 스팬, 제한범위을 정하여 작성한 다음 결과는 상당히 정교하다
 단어들의 유의도 계산을 위해서 스팬 내의 공기빈도를 출발점으로 삼았다
 이
작업에 필요한 계산법은 3
4항에서 논의한다
 표 5
1에서 두 번째 칸은 스팬 내에 나타나는 단어들의 빈도를 보여주며, 세 번째 칸은 전체 텍스트 내에서 그 단어의 빈도 그리고 마지막 칸은 앞의 두 수치를 비교하여 계산한 해당단어의 통계적 유의도인 -점수이다
 이 표에는 전체결과에서 가장 높은 점수를 얻은 30개의 단어들이 포함되어 있다

표 5
2에서는 키워드와 연어관계에 있을 가능성이 높은 단어들을 유의도 순서대로 나열하였기 때문에 고빈도 문법어들은 대부분 제외되었다
 그래서 과 가 목록의 제일 앞에 나타나게 되었고 와 도 또한 상당히 유의한 관계에 있게 되었다
 하지만 결과는 쓸 데 없이 높은 유의도를 보이는 단 한번만 나타나는 많은 단어들 때문에 아직도 어느 정도 왜곡되어 있는데, 이 단어들을 제외시키면 목록이 한층 더 유용해질 수 있다
 이를 위해서 3회를 출현제한빈도로 잡아서 통제한 결과가 표 5
2인데 이 표에서는 3회 미만 출현하는 단어들을 제외한 20개의 단어들을 보여주고 있다

이렇게 통제된 목록에서 제일 먼저 출현하는 단어들은 상당히 흥미를 끄는 단어들인데 이 목록이 완전히 자동적으로 작성되었다는 것을 기억해야 한다
 일단 단어스팬과 제한빈도를 설정하면 계산은 전적으로 컴퓨터로 이루어진다
 다음 항에서는 이런 종류의 정보를 얻기 위해 사용할 수 있는 계산방법에 대해서 자세히 논의한다

연어분석에 필요한 정보를 산출하기 위해서는 몇 가지 방법들이 있는데 별로 복잡하지는 않다
 먼저 조사대상단어를 중심으로 일정한 거리 내에 있는 단어들을 포함하고 있는 문맥행들부터 살펴보아야 한다
 단어스팬을 설정하는 것이 제일 먼저 할 일이다

1항에서 는 연어의 정의를 내린 바 있지만 한 단어와 연어관계에 있는 단어 사이의 '짧은 거리'를 '최대한 4개의 단어가 끼어들 수 있는 거리     '라고 설명한다
 단어들 사이의 이 거리는 노트가 붙어있는 문맥행을 보면 더 잘 이해할 수 있다
 조사대상단어, 즉 문맥행 작성에 사용되는 키워드는 흔히 마디어라고 한다
 마디어 주변 단어들은 키워드로부터 몇 개의 단어만큼 거리를 유지한다고 보자
 다음 예에서  텍스트에서 라는 키워드의 문맥행들을 살펴보자
 문맥행 밑에는 마디어의 왼쪽에 오는 단어들의 위치가 음수陰數로 적혀 있고 오른쪽에 오는 단어들의 위치는 양수陽數로 적혀 있다

왼쪽 끝의 와 오른쪽 끝의   사이에 오는 숫자가 붙은 단어들은 가 설명한 최대거리를 나타낸다
 와  그리고 와  사이에는 각각 4개씩의 단어들이 중간에 있다
 와  사이의 거리가 스팬인데, 마디어 양쪽으로 각각 다섯 단어를 말한다
 물론 다른 스팬을 설정할 수도 있다
 상황에 따라서는 비대칭 스팬을 설정하는 것이 더 적합할 수도 있다
 일단 스팬을 설정하면 분석의 출발점으로서 문맥행 길이를 이 스팬에 맞추어 자른다
 이 작업에 필요한 프로그래밍에 대해서는 부록 3에서 설명한다
 그 결과 위에서 제시한 문맥행은 다음처럼 줄어들게 된다 :
빈도계산을 쉽게 하기 위해서 마디어를 생략하고 공기단어들만으로 다음과 같이 목록을 만들 수 있다 :
이렇게 해서 제한된 길이로 줄어든 문맥행들을 이용하여 공기현상의 실제빈도와 예상빈도를 계산할 수 있다

일단 문맥행을 줄여서 스팬 내의 단어들만 남게 되면 그 단어들의 빈도를 계산한다
 이것은 3장에서 설명한 단어빈도 목록을 작성하는 것과 아주 비슷해서 단어경계, 단어소 그리고 철자변이형과 같은 사항들을 적용한다
 비록 일반 빈도목록 작성프로그램을 사용하면 동일한 목록을 쉽게 작성할 수 있는 까닭에 별로 필요하지는 않지만 전체 작업과정에 필요한 모든 알고리듬을 포함하고 있는 정규 전산과정에 빈도목록 작성용 알고리듬을 포함시킬 수 있다

다음 예는 키워드 에 대한 64개의 문맥행들에 이 작업을 실행하여 얻은 결과의 일부를 보여주고 있다 :
이 목록에 나와 있는 빈도 위주로 나열해도 여전히 고빈도 항목들로 인해 결과는 왜곡되어 있다
  2
1항에서 제안한 대로 순수 문법어들을 제거하면 목록은 훨씬 유용하게 이용될 수 있다
 제거대상 단어들을 나열해 놓은 소위 '제거목록-'을 작성하여 사용하면 연어분석에 더욱 흥미 있는 빈도목록을 자동으로 작성할 수 있다
 같은 프로그램을 사용해서 문맥행을 추출했는데도 불구하고 위에 보인 목록의 수치와 2
1항에서 보인 목록의 수치들 사이에 차이가 나는 이유는 스팬의 차이 때문이다

이젠 두 가지 중요한 선택을 해야 할 때가 되었다
 이들은 실제빈도와 비교하게 될 예상빈도치 계산에 영향을 미치게 된다
 선택해야 하는 사항들은 다음과 같다 : 첫 번째는 텍스트 내에서 단어들의 분포를 예측하는 데에 사용할 가설이고 두 번째는 그 가설을 위한 수치자료의 근거로 사용될 텍스트이다

스팬 내에 나타나는 단어들의 예상빈도를 계산하기 위해서는 이 단어들과 마디어 사이에 특별한 연어관계가 없을 경우에 이 단어들이 어떤 분포를 보일 것인가를 예측해 줄 수 있는 언어이론모형이 있어야 한다
 다시 말해서, 마디어가 이들 단어의 분포에 어느 정도 영향을 미치는지를 확인하려면 마디어의 영향이 없는 상태에서 그 단어들이 어떤 행태를 보일 것인가를 예상할 수 있어야 한다는 말이다
 가장 간단하면서도 실제 사용가능성이 높은 유일한 모형은 임의분포모형  이다
 이 모형은 텍스트의 마디어와 다른 단어들 사이에 유의한 연어관계가 없다면 다른 단어들은 텍스트 전체에 걸쳐서 출현할 수 있는 확률로 마디어 주변에 임의적으로 올 수 있다는 것이다

예상빈도 산출에 대해서 논의하면서 더 자세하게 논의하게 되겠지만, 이 모형은 계산과정을 상당히 간단하게 해준다
 불행히도 이 모형은 또한 언어의 행태를 설명하기에는 지극히 부정확한 방법이기도 하다
 비록 마디어로 사용되는 특정단어가 그 주변단어들과 별다른 연어관계를 갖고 있지 않다고 해도 문법의 영향으로 마디어는 다양한 형태로 주변단어들에 문법적 제약을 가하기 마련이다
 이상적으로는 언어모형이 이러한 문법제약들 중에서 연관된 부분을 포함하고 이것을 빈도계산시 고려할 수 있으나 이 문법제약들은 이렇게 할 수 있을 정도로 체계적이지 못하다
 임의언어모형의 장점이 최소한 한 가지는 있다 
 이 모형은 단어의 행태에 대해서 아무런 가정도 하지 않기 때문에 편견 없이 단어들의 행태를 평가할 수 있게 해준다

예상빈도 분포치를 산출할 수 있는 자료의 출처로는 두 가지가 가능하다
 가장 분명한 출처는 문맥행을 발췌하는 전체 텍스트지만 이것은 충분한 대표성을 지니지 못하여 적절한 비교견본이 되지 못할 수 있다
 대규모 말모둠을 대상으로 한 전반적인 빈도치는 더 좋은 출처가 될 수 있다
 만일 영어 전반에 걸친 일반적인 유형을 조사하려고 한다면 대규모 말모둠을 사용하여 자료를 구해야 한다

일단 분포모형과 비교자료의 출처가 선정되면 예상빈도를 계산할 수 있다
 다음에 보이는 계산의 예는 전체  텍스트의 전반적인 빈도를 이용한 가상 임의분포모형이다
 이해의 편의를 위해서 마치 수작업으로 작업한 것과 같이 자세하게 표시되어 있는 예를 선택했다
  3
2항의 빈도목록에 관해서 논의했던 것과 마찬가지로 이론적으로는 이 계산작업도 수작업으로 할 수는 있으나 대단히 지루하고, 또 빈도 높은 마디어를 조사할 경우에는 불가능할 수 있다
 빈도목록을 작성하기 위해서 입력된 자료를 읽어들여서 필요한 모든 계산을 수행할 수 있는 소프트웨어는 비교적 개발하기가 쉽다
 계산 프로그램의 예는 부록 3에 나와 있다

이 계산은 텍스트에서 추출한 문맥행들을 이용하여 작성한 빈도목록을 사용하여 한다
 이 목록에서 공기빈도가 유의하다고 여겨지는 모든 단어들의 예상빈도를 계산해야 한다
 이 작업을 실행하는 가장 간단한 방법은 전체 말모둠에서 산출된 각 단어의 전체빈도를 일단 수용한 뒤에 텍스트에서 추출해낸 문맥행들로 만든 견본을 이용하여 이 빈도를 줄이는 것이다
  3
2항의 빈도목록에서 처음 출현하는 항목은 이다
 모두 75,214개의 토큰으로 된  전체 텍스트에서 이 단어의 전체빈도는 4,194번이다
 만일 이 단어가 텍스트 전체에 임의적으로 분포되어 있다면 640개의 단어견본10개의 단어를 포함하는 64행의 문맥행들로 구성되어 있음에서 예상빈도는 다음과 같다 :
이 예상빈도를 37개의 문맥행 견본에서 측정한 실제빈도와 비교한다
 그리고 이 두 수치를 둘 사이의 차이의 유의도 평가를 위해 이용할 수 있다

표 5
3은 텍스트 원본에서 추출한 문맥행 내의 단어들 중 첫 10 단어의 예 상빈도를 보여주고 있다
 둘째 칸은 전체 텍스트에서의 실제빈도이고, 셋째
칸은 640단어로 된 임의견본에서의 예상빈도이다
 마지막 칸은 예상빈도와
비교할 수 있도록 문맥행 견본 내에서의 실제빈도를 보여주고 있다

목록에서 발췌한 위의 예들에서 찾아볼 수 있는 예상빈도와 실제빈도 사이의 차이는 아주 흥미롭다
 특히 ,   그리고  등의 단어들이 그러한데, 그 결과의 중요성은 적절한 유의도 측정척도를 적용해보지 않고서는 평가할 수 없다
 다음 항에서는 몇 가지 유의도 측정방법들에 대해서 살펴본다

연어분석에 대해서 설명하면서 이미 여러 차례 언급한 유의도-라는 것은 개연성이라는 개념과 직접적으로 관련된다
 간단히 말해서 만일 결과가 우연히 나타날 가능성이 극히 낮다면 그 결과는 통계적으로 유의미하다
 다음에 설명하는 여러 가지 척도들은 이 가능성을 계산하고 어떤 식으로든 반영하여 특정결과가 갖는 통계적 유의도 - 이 경우에는 선택된 제한범위 내에서 관찰할 수 있는 공기빈도 - 를 평가할 수 있게 해준다
 이러한 방법들의 저변에는 복잡한 통계이론이 깔려 있고 이는 우리가 하고자 하는 분석방법의 기술범위를 벗어나는 것이지만 일단 공식을 선택하면 계산은 비교적 간단하게 할 수 있다
 다음 네 항에서는 세 가지 가장 보편적인 방법들을 기술하고 그 방법들을 적용한 결과를 비교해 보기로 하겠다
 비록 3
4
4항에서 이 방법들 사이의 주요 차이점을 요약해놓기는 했어도 각 방법의 통계적 타당성은 분석하지 않았다
 컴퓨터를 이용하여 이러한 방법들을 선택하여 필요한 계산을 하는 데에 필요한 프로그래밍의 예제는 부록 3의 10에서 12항까지 나와 있다

-점수는 비록 이런 종류의 언어분석에 적용하기에는 약간의 논란은 있지만 통계적 유의도 측정척도들 중에서는 가장 널리 알려져 있다
 계산법은 아주 간단해서 다음 공식으로 계산할 수 있다 :
여기서 기호들은 각각 다음을 의미한다 :
  = 스팬 내에서 관찰된 단어의 출현빈도
  = 같은 단어의 예상 출현빈도
σ = 전체 텍스트에서 같은 단어의 출현 표준편차
목록에 있는 공기단어 각각에 대해서 실제빈도와 예상빈도의 차이를 표준편차, 즉, 변이형의 표준통계 척도로 나눈다
 그 결과를 -점수라고 하는데 이 점수는 표준통계표와 함께 유의한 척도로 사용할 수 있다

이 공식에 필요한 두 가지 수치는 다음과 같다 :
공기 예상빈도 
공기단어의 표준편차 σ
를 계산하는 방법에 대해서는 3
3
3항에서 이미 언급했다
 그 예에서 의 값은 35
69이다

표준편차를 계산하기 위해서는 다음 공식을 사용한다 :
여기서 기호들은 각각 다음을 의미한다 :
  = 앞에서와 같이 전체 텍스트에서의 공기단어의 출현확률
  = 줄인 문맥행에서 토큰의 숫자
만일 전체 텍스트에서 한 단어가 번 나타나고 그 텍스트에 모두 γ개의 토큰이 있다면 그 단어가 텍스트의 아무 곳에나 나타날 확률 는 간단해서 /γ이다
 예를 들어서 를 살펴보자 :
텍스트에서 잘라낸 문맥행에 포함되어 있는 토큰의 숫자는 64  10 = 640개이다
 640개의 단어로 이루어진 전체 텍스트에서 견본 토큰 안에 나타나는 의 표준편차는 다음처럼 계산할 수 있다 :
의 -점수, 즉, 표준편차로 표현되는 실제빈도와 예상빈도 사이의 차이는 다음 공식으로 계산할 수 있다:
이 수치는 매우 낮고 의 좌우 10단어 스팬 내에서 나타나는 와 나머지 텍스트에서 나타나는  사이에 어떠한 유의한 변이도 보이지 않는다
 -점수는 스팬 빈도목록에 나타나는 모든 단어들에 대해서 그중 혹시 어느 한 단어라도 유의한 것이 있는지를 살피기 위해서 산출할 수 있다
 혹은 -점수는 그저 단순히 비슷한 정도의 유의도를 지닌 단어들을 순서대로 배열하기 위해서 사용할 수 있다
 스팬빈도목록에 나타나는 모든 단어들에 대해서 계산하여 그 결과를 -점수 순서로 배열한다면 다음과 같이 될 것이다:
이런 종류의 실험에서 비록 정확하지는 않아도 유의도 판단기준이 될 수 있는 단절점은 대략 3인데 그 결과 다음 단어들을 더 자세하게 조사해 보아야 한다는 것을 분명히 알 수 있다 :
이 결과와 다음 항에서 논의하는 두 가지 다른 척도로 얻은 결과는 3
4
4항에서 비교하겠다

-점수는 여러 면에서 -점수와 유사하다
 그러나 계산방법은 약간 다르다
 이렇게 계산방법에 있어서 약간 다른 이유는 전체출현빈도가 상대적으로 낮은 공기단어들의 처리에 있어서 정확성을 기하기 위해서이다
 -점수 계산공식은 -점수 계산공식과 흡사하다
 둘 사이의 차이는 구성요소들 중에서 하나만 뚜렷이 다르다
 공식 하단부에 사용되는 표준편차는 공기단어 그 자체보다는 공기단어와 결합되는 마디어를 위해서 계산된 것이다
 앞에서 논의한 바 있는 다음과 같은 -점수의 표준편차 계산공식에서:
는 선정된 스팬 안에서 마디어와 공기단어들의 발생확률로 교체된다
  
 
1991, 1993 그리고 1995 등이 했던 것처럼 이 공식을 실제로 적용한 경우에 일반 표준편차는 계산할 필요가 없으며 근사치가 대신 사용되어 전체공식은 다음과 같아진다:
여기서 와 는 -점수 공식에서 사용된 것과 같은 값, 즉, 실제 공기빈도와 예상 공기빈도이다

를 다시 한번 예로 들어보면, 계산방식은 다음과 같다:
만일 의 스팬 빈도목록을 작성하기 위해서 -점수를 계산하여 그 결과를 순서대로 나열하면 다음 결과를 얻게 된다 :
절대 통계 유의도는 -점수로는 평가하기 어렵다
 그러나 2 혹은 그 이상의 점수를 얻은 단어들은 주의해 볼 만하다
 위의 목록에서 다음 단어들을 선택할 수 있다 :
이 결과를 다른 방법을 통해서 얻은 결과와 3
4
4항에서 비교하기로 한다

상호정보 측정기준은 -점수나 -점수와는 달리 표준편차의 측면에서 보면 실제관찰빈도와 예상빈도 사이의 차이를 보여주지는 못한다
 그 대신 이 방법은 마디어와 그 공기연어를 실제관찰확률과 예상확률이 임의로 분포되어 있다는 가정 하에 비교하여 각 단어가 상대방에 대해서 제공하는 정보의 양을 표시해줄 수 있는 방법을 모색할 수 있게 해준다
 그 공식은 보통 다음처럼 나타낼 수 있다:
다시 한번 여기서 와 는 실제관찰공기빈도와 예상공기빈도를 나타낸다

에 대해서 이 공식을 적용하면 다음 결과를 얻게 된다 :
만일 스팬 빈도목록에 나타나는 모든 단어들을 대상으로 상호정보치를 계산하여 그 순서대로 나열하면 다음 결과를 얻을 수 있다 :
어떤 연구자들예컨대, 1995은 기본비율에 2를 적용하면 실제결과를 감추는 셈이 되며 관찰빈도를 예상빈도의 세 배로 생각하는 대신  값을 1
58로 잡는 것도 분명히 올바른 것이 아니라고 지적하였다
 1
58은 대략 23의 결과와 근사한데,  -수치가 이렇다는 것은 관찰빈도가 예상빈도의 세 배가 된다는 것을 의미한다
 사실 엄밀한 통계적 유의도는 없지만 단절점을 정하기 위해서 3:1의 비율을 사용할 수 있다
 이 결과 다음 단어들만이 남게 된다 :
이 결과와 다른 두 방법을 적용한 결과 사이의 차이에 대해서는 3
4
4항에서 논의한다

3
4
4
 유의도 측정기준 비교
앞에서 논의했던 각각의 유의도 측정기준은 단어목록을 정렬시키고 마디어와 가장 강력한 연어관계에 있는 단어들을 찾아내기 위해서 이용할 수 있다
 만일  텍스트에서 에 대해서 상이한 측정기준으로 작성된 목록들 중에서 가장 먼저 출현하는 15개의 행을 찾아서 나란히 놓고서 비교하면 차이점을 알 수 있다표 5
4 참고

목록은 차이를 쉽게 알아볼 수 있도록 알파벳 순서로 재배열하면 비교하기 더 쉬울 것이다
 표 5
5의 세 목록에는 세 가지 측정기준으로 소팅되었을 때 각 목록의 순위를 보일 수 있도록 번호를 붙였다

여기서 두 가지 중요한 차이를 찾아볼 수 있다: 첫 번째는 어떤 단어들은 한 목록에는 들어 있으나 다른 목록에는 안 들어 있는 것이고, 두 번째는 목록에 따라서 단어들의 순위가 다르다는 것이다
 표에서 보이는 첫 번째 것은 목록의 첫 부분이 두드러질 정도로 비슷하다
 즉,  과 는 세 목록에 걸쳐서 똑같은 위치에 온다
 이 말은 이 단어들이 강한 연어관계에 있고 문맥행에서 나타날 때에는 보통 구 동사인  의 일부로 나타난다는 것을 의미한다
 목록에 나타나는 같은 동사의 다른 형태인 도 세 목록에서 비슷한 위치에 나타난다

-점수 목록에는 보이지 않는다
 이 단어들은  텍스트에서는 비교적 출현빈도가 낮다 126번,  27번,  26번 
  -점수와 상호정보 평가기준의 두 기준 모두에서 -점수는 그 공식의 성격상 인위적으로 저빈도 공기단어들의 유의도를 과장해서 보여준다
 이 점은 다른 세 단어들, ,  그리고 이 단지 -점수 목록에만 나타난다는 사실을 더 두드러지게 해준다
 이 세 단어는 모두 전체 텍스트에서 출현빈도가 높다
 그래서 다른 두 측정기준에 의해서 그 유의도가 낮아지게 되었다
  은 -점수 목록에만 유일하게 나타나는데 아마도 텍스트 내에서 상대적으로 낮은 출현빈도를 보여서 그럴 것이다

세 목록 모두에 나타나는 단어들의 순위에 있어서 차이가 나는 것도 비슷한 이유를 들 수 있다
 한 예로,  라는 단어는 -점수 목록과 -점수 목록에 모두 세 번째 단어로 나타나는데 -점수 목록에서는 열한 번째 단어로 나타난다
 이 단어는 스팬 내에서는 단지 세 번만 출현한다
 그러나 전체 텍스트에서 출현빈도가 열 번으로 낮기 때문에 -점수 및 -점수에 의해서 더 유의한 것으로 나타나고 있다

지금까지의 논의에서 세 가지 평가기준으로 평가한 결과 제공되는 정보들 사이에는 상당한 차이가 있음을 알게 되었다
 좀더 자세히 말한다면 아마도 와  사이보다는 와 다른 기준들 사이에서 더 큰 차이가 난다고 말할 수 있을 것이다
 비록 각 평가기준의 상대적인 장점들에 대해서 많은 논의가 있어왔지만 예를 들어서,  
 
1991; 1993; 1995, 연어연구에서 가장 적절한 한 가지 평가기준을 선택한다는 것은 불가능하지는 않지만 대단히 어렵다
 연어연구에 있어서는 가능한 한 많은 정보를 이용하고 또 한 가지 이상의 평가기준을 적용함으로써 여러 가지 상이한 관점을 취할 때 얻을 수 있는 장점들을 취하는 것이 좋을 것이다

이 장에서 설명한 방법들의 장점은 문맥행 연구를 통해서 이미 선정된 단어들의 문맥적 특성에만 관심을 집중시킬 수 있다는 것이다
 이 방법들을 이용하여 문맥을 주요 유형별로 정리할 수 있고, 또 이 유형들에 대한 지식을 연구대상 언어의 일반적인 행태나 텍스트 안에서의 특정단어들의 용례를 분석평가하기 위해서 사용할 수 있다
 이렇게 하여 선행지식이나 수작업을 통한 조작 없이도 구와 관용어구를 훨씬 쉽게 찾을 수 있다
 이 정보는 한 단어형태가 여러 의미를 가질 때 그 차이를 구별하기 위해서, 혹은 그 단어의 통사적 특징의 범위를 알아내기 위해서 이용할 수도 있다
 예를  들어서,  텍스트에서 를 포함하고 있는  나   등과 같은 구 동사들의 차이를 알아낼 수 있게 해주거나, 그 단어의 명사적 용례와 동사적 용례 사이의 차이를 구별할 수 있게 해준다
 다음 몇 항에서는 이상의 응용방법들에 대해서 조금 더 자세하게 논의해보겠다

3
4
4항에서 얻은 결과를 조사한 결과 가장 유의한 연어는 까지도 포함된 목록들을 놓고 볼 때 와 인 것을 알 수 있다
 이러한 연어들이 나타나는 문맥행을 살펴보면 다음과 같은 일반적인 유형을 보인다:
이 문맥행들에 출현하는 모든 예들은 구 동사인  의 형태로 출현한다는 것을 분명히 볼 수 있다
 이 문형은 문맥행을 순서대로 나열하기만 해도 분명하게 나타난다
 그러나 항상 이런 것만은 아니다
 세 목록 모두에서 상당히 빈도가 높게 나타난 연어 를 살펴보자
  를 포함하고 있는 문맥행들은 다음과 같다:
다섯 개의 예들 중에서 네 개는  


  라는 구의 형태를 띠고 있다
 이 텍스트만으로는 분명한 결론을 내리기에 공기빈도가 너무 낮긴 하지만 의 여러 형태들 중의 하나가 나타나는 좀더 광범위한 문형이 있는 것을 알 수 있다

구와 관용어를 찾아내기 위한 이런 분석방법은 이미 마디어로 선정된 구를 이용하여 전체구절과의 연어관계를 조사하고 계속 마디어를 확장해서 결국 여러 개의 단어로 구성되어 있는 구까지도 마디어로 선정하는 식으로 점진적인 연어분석을 진행함으로써 더욱 자세하게 실행할 수 있다
 그 연구범위 또한 현행 마디어를 주요 연어들 중의 하나로 교체하여 그 새로운 마디어의 연어유형을 찾아내는 식으로 확장할 수 있다
 한 예를 들면, 일단 를 의 주요 연어들 중의 하나로 선정한 뒤에 동일한 방식으로 의 문맥행을 추출하여 이 를 포함하는 다른 구를 찾아내고, 또 의 연어로서 의 상대적 중요성을 알아낼 수 있다

보통 단어의 의미는 그 단어의 출현상황에 따라 결정되기 때문에 연어분석에서 제공하는 정보는 일정한 길이의 텍스트에서 출현하는 한 단어의 중의성을 제거하여 그 단어의 구체적인 의미를 결정하는 데에 있어서 주요 증거로 이용할 수 있다
 이것은 6장 3
3항에서 대강 언급하게 될 자동 의미태깅 의 기본인데 이 방법을 이용하면 단어들의 여러 의미가 적절하게 구분되어서 자동으로 빈도목록을 작성할 수 있다
 심지어는 분석과정의 기계적인 측면을 보여주기 위해서 사용된 상당히 제약된 텍스트 내에서도 구 동사인  에 나타나는 의 의미는 더욱 일반적인 그 단어의 명사적 용례와 상당히 쉽게 구분할 수 있다
 더 큰 말모둠에서는 더 정확한 중의성 제거가 가능하다

마디어 주변에 오는 연어유형은 의미적 차이뿐만 아니라 통사적 차이도 보여줄 수 있기 때문에 이 분석을 통해서 같은 단어형태가 명사로 쓰이는 경우와 동사로 쓰이는 경우를 구분할 수 있다
  의 연어분석에서 이것을 볼 수 있는데, 찾아낸 구 동사인  와  는 다음 문맥행에서 볼 수 있는 정상적인 명사적 용례와는 통사적으로 구별되는 유형들이다 :
빈도목록과 문맥행 이용에서 야기되었던 문제점들이 역시 연어분석에 영향을 끼칠 수 있는데 이 문제들은 비슷한 방법으로 해결할 수 있다
  5
1항에서는 동형어에 대해서 논의하고 5
2항에서는 철자변이형으로 인해서 발생하는 두 가지 문제점들을 논의한다
 단어소 문제는 조금 다른 문제점들을 야기하는데, 이에 대해서는 5
3항에서 논의한다
  5
4항에서는 한 가지 더욱 복잡한 문제를 다루는데 단어들 자체의 형태보다는 연어들의 통사범주에 대해서 더욱 흥미를 갖고 살펴본다

3장의 2
2
3항과 4장의 4
2항에서 논의했듯이 빈도목록과 문맥행 추출에서 동형어로 인하여 야기되었던 문제들은 연어분석에서도 동일하게 나타난다
 이 문제는 마디어와 연어 모두에 영향을 끼칠 수 있는데, 각 단어의 출현용례에 관한 충분한 정보를 확보해야만 이 문제를 해결할 수 있다
 연어분석이야말로 중의성을 자동으로 제거할 수 있는 방법들 중에서 가장 중요한 것중의 하나이기 때문에 이것은 순환논리처럼 들릴 수 있다
 실제로는 마디어의 문제점은 겉보기처럼 그렇게 심각한 것만은 아닌 듯하다
 왜냐하면 상이한 연어유형들이 그 마디어의 다양한 용례들을 구별하는 데에 도움을 주기 때문이다
 잠재적으로 더 큰 문제점은 연어 내에 존재할 수 있는 동형어로 인해서 이 패턴들이 왜곡될 수 있다는 것이다
 그러나 이 문제까지도 초기 연어분석 결과를 더욱 정확한 위치정보단순한 스팬보다는를 이용하여 연구하거나 혹은 분석대상 문맥행들에 동형어 구분용 표식을 첨가함으로써 극복할 수 있다
 이 표식작업은 6장의 3
3항에서 논의하듯이 그 일부 혹은 전체를 자동화시킬 수 있다

어떤 유의도 측정방법을 사용하는가에 따라서 달라질 수 있는 계산방법에 관한 자세한 사항을 무시한다면 연어분석에서는 문맥행과 빈도목록 두 가지를 효과적으로 결합시켜 적용한다
 이 두 가지 방법을 적용한 결과는 철자변이형의 영향을 받게 되는데 이 두 가지를 어떤 식으로 결합하든지 이중으로 영향을 받게 된다
 한 예로 통시적 말모둠에서 라는 단어의 연어들이 고대영어, 중세영어 그리고 초기 현대영어에서 발견되는 패턴들 사이에서 어떠한 차이를 보이는지를 조사한다고 가정해보자
   영어 텍스트 말모둠 중의 통시적인 부분을 사용하는데 이 말모둠은 영어 시대구분에 따라서 세 가지 작은 말모둠으로 나뉘어져 있다
 말모둠에는 원래의 철자법이 보존되어 있기 때문에 의 형태에 있어서 상당한 변이를 볼 수 있다
 말모둠을 통해서 작성된 빈도목록에 따르면 다음과 같은 형태들이 가능하다:
연어정보를 얻을 수 있는 문맥행 목록을 추출하기 위해서는 위의 모든 철자변이형들을 대체 키워드로 입력해야 한다
 이 작업은 문제의 반을 해결해 준다
 연어분석에서의 계산은 텍스트에서 추출한 문맥행을 바탕으로 작성한 빈도목록에 기초를 두고 있다
 이 빈도목록도 철자변이형의 영향을 받지만 이번에는 마디어가 아닌 연어들이 그 영향을 받는다
 그리고 마디어의 변이형과는 달리 이 연어에서의 철자변이형은 미리 발견하여 교정할 수도 없다
 나중에 빈도목록에 노트를 붙이는 방법도 가능하나 철자변이형이 없는 경우에 비해서 훨씬 더 많은 노력이 필요하다
 그리고 이 문제는 항상 결과의 정확도를 떨어뜨린다

연어분석에서는 단어소로 인해서 빈도목록과 문맥행 작성에서 야기되었던 일반적인 문제들이 별로 분명하게 나타나지는 않는다
 마디어와 또 잠재적인 가능성이 있는 연어의 경우에 모든 표제어 형태들을 연어분석에 있어서 하나의 마디어로 다룰 것인가 아니면 표제어와 연어를 구분하여 그 패턴을 개별적으로 분석할 것인가는 분명하지 않다
 표제어 형태에 따라서 상이한 패턴들이 발견될 수 있다
 예컨대  텍스트에서 구 동사  를 구성하는 라는 표제어 패턴은 라는 표제어 패턴에는 안 나타날 것이다
 그러나 라는 동사의 모든 형태가 그 구의 유의도 조사와는 관련되어 있다
 표제어 형태들을 하나로 묶어서 다룰지 아니면 별도로 구분하여 다룰지를 결정하기 전에 자세히 조사해야 한다
 그리고 기초적인 연어분석을 통해 작성된 기본적인 구분은 연구에 도움이 될 수 있다

지금까지 기술된 분석과정은 마디어 환경에서 찾아볼 수 있는 실제 단어형태에 대한 것이었다
 그런데 때로는 어휘유형보다는 통사적 환경에 관심을 기울여야 할 경우도 있는데 이 경우에 연어분석은 도움이 될만한 아무런 정보도 제공해주지 못한다
 마디어 주변에 나타나는 통사속은 주변 텍스트에 출현하는 단어형태를 벗어나서 품사 , 혹은 다른 통사적 특징에 관련된 정보들을 알아야만 찾을 수 있다
 이것은 추가 정보입력 없이는 불가능한데 이러한 종류의 언어정보를 입력하여 이용하는 방법에 대해서는 6장에서 논의한다

연어분석은 선정된 키워드 혹은 마디어와 연관된 문맥패턴에 대한 자동화된 정량연구를 할 수 있게 해준다
 일반적으로 마디어 좌우에 출현하는 일정 숫자의 단어들은 현재의 연구에 가장 적합하게 나열되어 나타나는데 그 범위 내에서의 공기단어들의 관찰빈도와 예상빈도는 유의도 측정을 위한 계산방법의 근거로 이용된다
 유의도 측정방법은 패턴을 좀더 연구하기 위해서나 구, 의미, 혹은 통사적 특징을 자동적으로 찾아내기 위해서 이용할 수 있다

지금까지 논의한 분석도구들은 언어적 내용과는 거의 상관이 없었다
 빈도목록과 문맥행 추출 방법은 둘 다 패턴일치를 이용하고 연어분석은 단순히 문맥행 추출작업 결과의 일부를 이용하여 빈도목록을 작성하여 그것으로 몇 가지 비교적 간단한 통계계산을 실행한다
 언어이론모형이나 설명모형은 일반적으로 결과해석을 위해서 제한적으로 사용되었다
 그럼에도 불구하고 아니 어쩌면 그로 인해서 이 도구들은 일반적으로 텍스트 연구에서 매우 강력하고 효과적인 도구로 사용되어 왔다
 연구대상언어나 텍스트 유형에 대한 구체적인 언급이 없다는 것은 같은 소프트웨어를 광범위한 언어와 텍스트 유형에 이용할 수 있다는 것, 즉, 언어유형에 제한받지 않고서 이용할 수 있다는 것을 의미한다
 그러나 추가입력 없이는 이 도구들만으로는 특정 언어모형에 근거하여 말모둠을 구성하는 특정언어에 대한 구체적인 분석을 할 수 없고, 또 이런 종류의 분석을 통해서 제공되는 정보를 이용할 수 없다는 것이다
 이 한계점에 대해서는 3장,  4장 그리고 5장에서 기본도구들에 대해서 설명하면서 이미 언급한 바 있다
 예를 들어서, 빈도목록의 구조를 조정하는데 있어서 단어소 작성작업을 유용한 도구로 제안했고, 또 철자변이형을 정확히 처리할 수 있는 규칙들을 세 가지 방법에 포함시킬 것을 제안하였다
 이 두 가지에 다 기본 소프트웨어에 텍스트 언어에 대한 자세한 정보를 추가시켜야 한다
 통사속, 즉 어휘패턴이 아닌 통사패턴에 대한 연구를 하기 위해서는 말모둠 내에 단어들에 대한 정보를 추가해야 한다

일반적으로 텍스트에 대한 자세한 언어분석 결과에 대해서 컴퓨터에 자료가 포함되어 있어야 더 복잡한 형태의 연구를 할 수 있다
 이 장에서는 이런 유형의 정보를 컴퓨터에 제공하는 방법 및 그 정보의 이용방법에 대해서 논의하겠다
  2항에서는 주요 분석방법을 논의하고 그 작업을 수작업으로 수행하는 방법을 살펴본다
  3항에서는 분석의 자동화 문제와 그에 관련된 문제들을 논의한다
  4항에서는 하위언어에 대해서 설명하고 이 방법이 문제해결에 어떤 기여를 할 수 있는지 살펴본다
 마지막으로 5항에서는 텍스트 검색방법에 이 추가정보들이 어떤 기여를 하는지 살펴본다

일반적인 연구에 있어서 언어정보를 추가적으로 제공할 수 있는 가장 중요한 분야는 통사론과 의미론 분야이다
 말모둠 텍스트에서 찾아볼 수 있는 모든 의미 및 통사구조는 컴퓨터에 추가로 입력시킬 수 있는 최상의 정보이다
 아무리 임시적인 방법이라고 해도 텍스트 언어가 갖는 통사-의미 자질에 대해서 최대한 설명할 수 있어야 한다
 2
1항에서는 통사분석의 일반원리에 대해서 설명한다
 그리고 2
2항에서는 중의성 제거를 위해 이용할 수 있는 방법들에 관해서 간략히 살펴본다

특정형태의 통사분석을 위해서는 이용할 언어학 이론 모형과 그 모형으로 분석하려고 하는 텍스트의 관계를 자세히 설명해야 한다
 통사분석과 관련된 일들은 컴퓨터와 관련된 제반 사항들과는 별도로 고려해야 한다
 우선 분석유형을 결정해야 한다
 다음 문장은  텍스트에서 발췌한 것인데 이미 앞에서 몇 번 예로 제시된 적이 있다 :
이 문장을 분석하기 전에 먼저 언어학 이론 모형을 선택해야 한다
 설명을 가능한 한 분명하게 하기 위해서  이론에 기초한 간단한 절 분석모형에 의거하여 문장 내의 절은 다음 구성요소들로 구성되어 있다고 보겠다:
술어
주어
보어
부가어
이 문법분석모형과 용어들에 대한 구체적인 설명은 1985와 æ1991를 참고하길 바란다
 문장분석을 통해 그 문장에 포함되어 있는 절의 숫자를 세고, 각 절에 포함되어 있는 단어들에 적절한 구성요소 명칭을 부여하게 된다

분석에 앞서서 텍스트내 개별단어들의 자질에 대한 구체적 지식이 필요하다
 이것은 모든 해당언어 사용자들이 그 언어를 사용할 때마다 필요로 하기 때문에 이미 잘 알고 있는 것이다
 그러나 특별히 언어학을 공부하지 않았다면 이 지식에 대한 자세한 내용을 의식하고 있지는 못할 것이고, 그것을 명백히 기술하는 데에 어려움을 겪게 될 것이다
 일상생활에서 언어를 사용하는 데에 있어서 실행하게 되는 구체적인 처리과정은 그 동안의 오랜 연구에도 불구하고 아직 많은 부분이 문헌상으로 밝혀져 있지 않다
 이 점에도 불구하고 이런 형식의 분석을 위한 실용적인 방법을 생각할 수는 있다

먼저, 분석과정을 두 단계로 나누는 방법을 일반적으로 많이 이용한다
 첫 번째 단계에서는 개별단어의 언어자질을 밝히고 단어 상호간의 기능을 평가한다
 일반적으로 이 첫 번째 단계는 태깅 그리고 두 번째 단계는 파싱이라고 부른다
 이 장 전체를 통해서 이 용어들을 이런 의미로 사용하기로 한다
 그러나 태깅은 3항에서 설명한 바 있듯이 중의성 제거를 위해 정보를 추가하는 것을 의미하는 용어로 그리고 '파싱'은 일부학자들이 전체 분석과정을 의미하는 용어로 사용하기도 한다

태깅에 의해 개별단어에 부가되는 정보는 보통 단어부류나 품사에 관한 정보들이다
 먼저, 앞에서 예로 든 텍스트는 다음 개별단어들로 구분된다:
흔히 구두점도 텍스트 분석에서는 중요하기 때문에 쉼표와 마침표 , 도 별개의 단어로 처리했다
 이 항목들의 품사정보도 배정할 수 있다
 이 정보를 가장 간단히 찾을 수 있는 곳은 사전으로서 각 단어에 대한 내용을 옮기면 된다
 그래서 다음과 같이     1995의 문법표식을 이용하여 품사를 구분하였다 :
품사정보는 일반단어들과 쉽게 구분되게 하기 위해서 고딕체로 표기했다
 사전에는 구두점에 대해서 '쉼표'와 '마침표'로 소개되어 있는 것 외에는 아무 정보도 들어 있지 않으므로 임시로 '구두점'이라는 명칭을 붙였다

앞의 목록에서 항상 모든 단어들이 단일 품사명을 갖고 있지 않음을 알 수 있다
 예컨대, 은 동사일 수도 있고 가산명사일 수도 있다 ;  은 명사나 형용사일 수 있다 ; 은 양태사, 명사 혹은 동사일 수 있다
 이 중의성의 문제는 나중에 문장을 파싱할 때 중요하게 작용한다

태깅과정에서 부가된 품사정보는 개별단어들의 기능을 말해준다
 문장을 파-싱하기 위해서는 문장을 구성하는 개별단어들의 기능을 먼저 알아야 한다
 절의 가장 중요한 구성요소는 술어인데 이것을 먼저 찾아내는 것이 좋다
 등위 접속사로 태깅된  앞에 오는 쉼표는 문장 내에 두 개의 절이 있으며 두 개의 술어가 필요하다는 것을 말해준다
 술어는 동사의 집단으로 실현되는데 단어들 중에서 여기에 속하는 것을 찾아내는 것이 좋을 것이다
 가능성은 다음과 같다 :
해당언어의 사용자에게는 품사태깅의 중의성이 거의 아무런 문제도 되지 않는다
 그러나 컴퓨터에 있어서는 이런 중의성을 제거할 수 있는 방법이 없다면 심각한 문제를 일으킬 수 있다
 텍스트에 포함되어 있는 정보를 근거로 하여 중의성을 제거할 수 있는 방법이 있다

먼저 첫 번째 나오는 을 보면 대명사로 태깅되어 있는 가 바로 앞에 와서 그것이 명사가 아니고 동사라는 것을 말해주고 있다
 동사일 가능성이 있는 이 바로 그 단어의 뒤에 와서 양태적인 해석을 가능하게 해주고 있다
 이를 대신해서 을 가산명사로 보는 것은 만일 이 의 보어로 온다면 나  같은 한정사와 함께 와야 한다는 사실 때문에 별로 가능성이 없다
 이리하여 처음에 오는 술어는  이라는 것을 알 수 있다
 두 번째 나오는 의 바로 앞에 나타나는 는 대명사인 와 동일한 방법으로 해석할 수 있다
 그리고 아무런 중의성도 없는 동사인 가 뒤따라 와서 을 양태로 해석하게 해준다
 따라서 두 번째 술어는  이다

일단 절의 술어를 찾으면 남은 단어들에 붙여진 태깅은 계속해서 파싱하는 것을 상당히 수월하게 해준다
 주어 나 는 이미 의 중의성 해결과정에서 그 자질이 밝혀졌다
  바로 뒤에 오는 전치사 는 부가어를 도입하기 위한 것으로 볼 수 있고, 소유 한정사인 와 명사인 은 쉼표가 와서 절의 끝임을 표시하기 전에 그 절을 완결해주는 역할을 한다
 두 번째 절에서 남은 단어들은 한정사 와 명사나 형용사일 수 있는 인데, 이 단어들은 아주 쉽게 해결할 수 있다
 한정사의 뒤에 오고 아무런 명사도 뒤에 오지 않는다면 는 가산명사라는 것과 명사집단인  는  의 보어임을 알 수 있다
 최종 파싱 결과는 다음과 같다 :
만일 이 분석을 큰 텍스트 파일이나 말모둠을 대상으로 수작업으로 한다면 많은 시간과 노력이 소요될 것이다
 왜냐 하면, 앞의 예는 아주 간단한 문장이기 때문이다

통사구조만이 필요한 정보인 것은 아니다
 영어의 동형어는 기본 말모둠 연구도구의 유용성에 영향을 미치는 주요문제들중의 하나이다
  3장의 2
2
3항에서는 빈도목록에서 그리고 4장의 4
2항에서는 문맥행 추출에 있어서 그리고 마지막으로 5장의 5
1항에서는 연어분석에 있어서 이 문제로 인해서 야기될 수 있는 여러 문제들에 대해서 살펴보았다
 이 문제들의 극복을 위해서는 동일한 문자열이 가질 수 있는 상이한 의미들을 소프트웨어로 구분할 수 있는 방법이 필요하다
 소규모 텍스트인 경우에 가장 간단한 방법은 수작업으로 각 단어마다 중의성 제거용 태깅을 하는 방법이다

한 예로,   텍스트에서 발췌한 다음 문장들을 살펴보자 :
일단 텍스트에 나타나는 단어형태들에 대한 적절한 의미를 찾게 되면 그 단어형태에 부가된 표식에 의해서 해당의미가 전달되게 된다
 설명의 편의를 위하여 주석을 붙인 다음 예에서는 텍스트 출현순서대로 앞의 예문에서 찾아낸 세 가지 의미와 연관하여 간단한 숫자표식을 붙였다
 태깅된 단어형태는 쉽게 볼 수 있도록 볼드체로 표시했다 :
대규모 통사분석의 경우와 마찬가지로 이 작업은 상당히 복잡하고 또 시간이 많이 걸린다
 특히 몇몇 개별단어의 중의성 제거 이상의 작업을 해야 할 경우에는 더 말할 나위도 없다
 이 작업을 신속하게 할 수 있는 몇 가지 방법들을 이용할 수 있다
 예를 들어서, 위의 예에서 첫 번째 의미가 두 번째 혹은 세 번째 의미와 문법적으로 다르고, 또 만일 텍스트의 통사태깅을 마친 뒤라면 이 작업으로 해야 할 작업들 중의 일부를 이미 완료했을 수도 있다
 중의성 제거는 4장의 2
5
3항에서 제안했듯이 의미차이를 밝혀내기 위한 보조수단으로서 문맥행 추출 프로그램을 이용하면 훨씬 효과적으로 할 수 있다
 그러나 어떠한 종류의 작업이라도 수작업에 의한 중의성 제거작업을 하는 데 있어서 텍스트의 크기가 크다면 많은 시간과 노력이 소요될 수밖에 없다

2항에서 기술한 분석방법들은 수작업을 이용한 것들이다
 통사태깅 과정에서 문장에 포함되어 있는 개별단어별로 사전을 참고하고, 가능한 품사범주도 입력하였다
 파싱 과정에서 이 품사들은 절경계를 찾고 단어들을 절 구성요소로 배정하기 위해서 이용할 수 있다
 중의성 제거를 위해서는 중의적인 단어형태가 나올 때마다 가능한 여러 의미들을 대조해 보고 문맥을 근거로 하여 그 중 하나를 선택하여 그 단어에 적절하게 명칭을 붙였다
 만일 이 작업을 자동으로 수행할 수 있다면 그것은 더할 나위 없이 좋을 것이다
  3
1항에서 3
3항까지는 이 자동화 과정에서 생길 수 있는 문제점들을 살펴본다

컴퓨터를 몇 가지 단계로 나누어서 이용하는 방법을 고려할 수 있다
 어떤 극단적인 단계에서는 자세한 언어분석을 수작업으로 하게 될 수도 있다
 그런 다음에 그 결과를 단순히 순서대로 정리하고 요약하기 위해서, 혹은 그 결과를 가지고 추가조사를 할 수 있게 하기 위해서 컴퓨터를 이용할 수 있다
 만일 이 방법을 채택한다면 아무런 소프트웨어도 별도로 필요하지 않다
 3장에서 5장까지 설명한 빈도목록, 문맥행 추출 프로그램 그리고 연어작업용 도구 프로그램들을 수정하여 수작업으로 입력한 표식들을 인식하게 하면 된다
 또 한편으로는 컴퓨터를 이용하여 어느 정도, 혹은 전체분석을 자동으로 실행할 수도 있다
 이 방법은 상대적으로 복잡한 해당언어 전용 소프트웨어가 필요하다
 다음 세 항에서는 주요방법들 세 가지를 간단히 소개한다

2
1항에서 설명한 수작업의 자동화는 얼핏 보면 너무나도 많은 어려움이 따르는 것 같다
 사전의 정보는 컴퓨터로 읽어들일 수 있는 형태로 저장할 수 있다
 그리고 텍스트에 포함되어 있는 각 단어마다 문법표식을 검색하여 그것을 태그로 사용한다
 이렇게 하면 2
1항에 나타난 것과 같은 결과를 작성할 수 있는데, 어떤 단어들의 경우에는 하나 이상의 태그가 붙게 되어 문제시될 수 있다
 만일 중의성이 없는 태그가 필요하다면 소프트웨어를 사용하여 약간의 작업을 해야 한다
 이외에도 다른 복잡한 문제가 있다
 사전에서 단어를 찾는 일은 만일 찾고자 하는 모든 단어가 그 사전에 들어있고, 목적에 맞게 문법표식에 대한 자세한 설명이 되어 있다면 아무 문제가 없다
 2
1항에서 분석했던 문장의 경우 이것은 문제가 되지 않았다
 그러나 텍스트에서 찾아볼 수 있는 모든 단어들이 포함되어 있는 사전은 없다

한 극단적인 예로  의   -라는 작품 중의 ''라는 시의 첫 연을 살펴보자:
이 텍스트에서 몇 단어들은 어느 사전에도 없다
 왜냐하면 이 시에만 특별히 나타나는 것들이기 때문이다
 심지어는  영어사전에도 이 단어들이 다 수록되어 있지 않다
 예를 들어서, 나 는 있지만 나 는 없다

이 예는 적절한 예는 아닐 지 모른다
 그렇지만 다음 예를 보자 :
이 문장은  말모둠 중의    의  2장에서 발췌한 것이다
 다시 말하지만 이 문장에 쓰이는 모든 용어들을 다 수록해 놓은 일반사전은 없다
 텍스트의 모든 단어들을 수록한 새 사전을 만드는 일은 가능하기는 해도 아주 방대한 작업이 될 것이다
 이 문제를 극복하기 위해서 태깅작업용 프로그램에는 흔히 사전에 수록되어 있지 않은 단어들의 품사를 추측하게 할 수 있는 특별한 프로그래밍 단계가 있다

이미 알려진 단어와 그렇지 않은 단어들을 자동으로 태깅하는 프로그램을 이용하여 얻은 결과를 살펴보기 위해서  사전 프로젝트 초기에 개발된 태깅 프로그램의 결과를 견본으로 살펴보자
 먼저 2
1항에서 수작업 태깅의 예로 사용되었던 에서 발췌한 문장을 사용하였다 :
사용된 명칭들은 수작업에서 사용했던 것들보다 더 축약되어 있다
 그러나 본질적으로는 동일하다
 사용된 약어들은 다음의 뜻으로 쓰였다 :
물론 이 약어들은 중의성은 없다
 은 양태를 나타내는 단어로 그리고 은 마찬가지로 분명히 동사로 태깅이 되어 있다
 은 태깅하기가 약간 어색하다
 그러나 이 경우에 이 단어를 형용사로 잘못 태깅한다고 해도 파싱 과정에는 아무런 영향도 주지 않는다

다음에서  의 독특한 문장을 가지고 살펴보자
 비록 분석이 완전하지는 않아도 태깅 프로그램을 이용하여 태깅을 하였다 :
이 분석에서는 새롭지만 그 용도가 아주 분명한 두 가지 태깅명칭이 사용되고 있다
 그리고 두 개는 그 용도가 불분명하다 :
-	-로 끝나는 단어로 복수명사일 수도 있고 3인칭 단수 동사형일 수도 있음
??	불분명함
입력자료의 성격을 생각해보면 태깅은 상당히 잘 된 것 같다
 ,  ,  ,  ,  ,   그리고 와 같은 엉뚱한 단어들은 모두 정확한 태깅이 되어 있는 것 같다
 물론 이 단어들이 특별히 만들어진 것임에도 불구하고 그 정확성을 평가할 수는 있다
 왜냐하면 텍스트에는 단어들의 부류를 상당히 분명하게 보여주기에 충분한 구조들이 포함되어 있기 때문이다
 태깅 프로그램은 와 라는 단어들에 대해서는 태깅을 못했는데, 이는  주변의 불분명한 문맥과  앞에 오는 로 인해서 혼동이 일어났기 때문이다
 그리고 라는 단어도 태깅을 못했다
  을 한정사로 태깅한 것은 잘못된 것 같다
 그 결과 를 형용사가 아닌 명사로 태깅하게 되었다
 어순이 바뀐 것이 아마도 부분적으로 이 실수와 관련이 있는 듯하다

태깅 프로그램을 이용하는 경우에 기술서적에 나타나는 문장을 태깅할 때에 이와 비슷한 문제들을 겪게 된다
 다음을 보자 :
이 예에서 새로 소개된 태깅표식은 다음과 같다:
와 의 두 단어에만 불분명한 경우에 사용하는 태깅표식인 '??'가 사용되었다
 아마도 이 단어들이 명사 바로 뒤에 나오기 때문에 그렇게 된 것 같다
 특징이라면 비율을 표현한 /에서 앞의 는 형용사로 그리고 뒤의 는 명사로 태깅하고, 또 를 형용사로 태깅했다는 사실이다
 첫 번째 예문에서처럼 이들은 파싱 단계에서는 중대한 문제를 야기시키지는 않는다

어느 정도까지는 태깅을 자동화시킬 수 있을 것 같다
 앞에서 설명한 몇 가지 프로그램들은 명백한 표식을 붙이게끔 제작되어 있다
 그러나 표식 선택과정에서 희귀한 문맥이나 잘 알려져 있지 않은 단어들로 인해서 잘못 선택될 수도 있다
  2
1항에서 보았던 수작업 태깅에서처럼 단순히 가능한 품사의 범위만을 배정하는 프로그램들은 그 성격상 더욱 정확한 결과를 얻을 수는 있으나 파싱 단계에서 더 많은 문제들을 야기시키게 된다
 자동태깅의 가장 큰 장점은 특히 큰 말모둠을 처리할 때 엄청난 시간을 절약할 수 있다는 것이다
 가장 큰 단점은 프로그램이 텍스트 특성에 맞추어서 적절하게 설계되어 있지 않은 경우에 소프트웨어가 일관된 실수를 범할 가능성이 있다는 것이다

자동파싱은 자동태깅보다 훨씬 더 복잡한 경향이 있다
 비록 현재 많은 프로그램들이 다소간의 제한된 텍스트 상에서 상당히 정확하게 작동한다는 것을 자랑으로 내세우고는 있지만 전혀 조작되지 않은 영어 텍스트를 정확하고 중의성 없이 처리할 수 있는 자동파싱 프로그램은 아직 개발되어 있지 않다

2
1항에서는 심지어 비교적 간단한 문장에서도 파싱에 필요한 사항들은 결정하기가 복잡하고 완전히 형식화시키기 어렵다는 것을 살펴보았다
 절경계를 찾는 것조차도 잠재적인 술어의 숫자, 등위접속사의 존재여부 등에 대하여 일정한 조작을 해야 하고, 그 처리과정 또한 다른 경우에 대해서는 전혀 적용할 수 없게 다소 즉흥적으로 수행된다
 이 복잡성은 부분적으로는 수많은 파싱단계에서 야기되는데, 이 단계들은 각각 상이한 분석수준에서 적용된다
  2
1항에서 사용된 문법모형은 다음과 같은 단계로 요약될 수 있다 :
절경계 확인
집단경계 확인
절 구성요소로 집단 배정
파싱과정의 복잡성을 줄이기 위해서는 경계표식 단계를 별도로 처리하는 것을 고려해 볼 수 있다
 다음 결과는 1995이 그의 저서에서 설명한 경계표식 프로그램  을 이용하여 작성되었다
 이 프로그램을 이용하여 2항에서 사용한  텍스트에서 발췌한 문장에 나타나는 단어들 사이의 경계유형을 표시하였다
 이 작업에 사용한 소프트웨어는 부분 파서 로 설계된 것이다
 이 프로그램은 문장 내의 모든 경계를 찾아서 표식명칭을 배정해주지만 절 구성요소까지 배정하지는 않는다

이 결과는 처음 보면 이해하기가 조금 어려울 수 있다
 각 단어들 사이의 행에는 그 단어들 사이에서 찾아볼 수 있는 경계유형에 대한 설명이 온다
 이 분석에서 찾아볼 수 있는 주요 경계유형들은 '주절 '예, 쉼표와 사이, '집단'예, 와  사이 그리고 '단어'예, 과  사이 등이 있다
 물론 '전치사' 경계예, 와  사이라는 것도 있다
 이 경계들은 절과 집단을 요약해놓은 목록을 만들기 위해서 사용할 수 있다
 다음 목록에서 단어와 전치사 경계가 집단 내에서 하위구분집단으로 다루어지고 있음을 알 수 있다 :
최종적으로 나타나는 마침표는 문장경계로서 두 번째 주절을 종결해준다

이 프로그램은 앞에서 설명한 파싱의 첫 두 단계를 효과적으로 수행한다
 집단을 절 구성요소로 배정하는 것도 이 분석을 통하여 할 수 있으나 절 내부에서 발견되는 집단유형을 결정하기 위해서는 다른 정보가 필요하다
 이 정보는 프로그램을 통해서 작성된 결과로부터 얻을 수 있다
 경계를 찾는데 필요한 작업의 일부로서 이 프로그램은 텍스트 내의 단어들에 대해서 그 통사자질을 태깅하고 이 태깅과 경계표식은 경계배정 결정을 내리는 데에 도움을 줄 수 있다
 프로그램으로 작성한 결과에서 발췌한 다음 목록에는 이 정보가 포함되어 있다 :
경계표식과 태깅부호가 포함되어 있기 때문에 이 자료를 조금 쉽게 처리하기 위해서는 재배열하는 것이 상대적으로 쉽다
 절 경계에는 별표가 붙어 있다 :
이후로 나타나는 집단의 유형을 결정하기 위해서 어떤 태깅을 할 것인지는 쉬운 일이다 :
마지막으로 집단을 분류하고 난 뒤에는 절 구성요소로 할당해야 한다 :
부분 파서를 이용하여 얻은 정보는 채택한 문법모형에 따라서 문장을 완전하게 파싱하기 위하여 사용되었다
 최종 배정방법은 극히 원시적이긴 하지만 고정어순으로 되어 있는 완전한 문장들만을 분석하면 신뢰도 높은 결과를 얻을 수 있다
 그러나 이것은 어디까지나 이 간단한 작업으로 할 수 있는 작업의 예를 보여주고 있을 뿐이다
 배정과정을 여러 단계에 걸쳐서 실행할 수 있는 간단한 프로그램에 대해서는 부록 3에 설명되어 있다

중의성 제거작업은 비록 상당히 복잡하기는 해도 최소한 약간은 자동화시켜서 어느 정도의 정확도를 달성할 수 있다
 조사대상 단어형태 주변의 텍스트에는 그 단어형태의 정확한 용례를 밝혀줄 수 있는 충분한 정보가 포함되어 있기 마련이다
 그러나 컴퓨터로 이 정보를 이용하기 위해서는 그것을 가능하게 해주는 일련의 작업을 해야 한다
 5장에서 설명한 연어분석 방법은 이 작업의 초기단계에 적당한 근거를 제공해줄 수 있다
 텍스트 내의 해당단어에 인접해서 나타나는 패턴이 의미하는 바를 알아내기 위해서 필요한 모든 의미를 찾기 위해서는 비교 연어자료  가 필요하다
 이것은 미리 중의성이 제거된 연구대상 말모둠으로부터 추출하거나 컴퓨터로 읽어들일 수 있는 형태로 되어 있는 사전에서 발췌한 정보를 통해서 얻을 수 있다

중의성 제거에 있어서 문맥을 사용하는 한 분명한 예로서  텍스트에서 발췌한 다음 문장을 살펴보자 :
 바로 앞에 동사인 가 온다는 사실은 그것을 구 동사인  의 한 부분으로 해석할 수 있게 해준다
 연어분석은 구를 찾는 작업에 훌륭한 근거를 제공해 줄 수 있다
 연어분석으로 할 수 있는 일들에 대해서는 5장의 4
1항과 4
2항에서 설명해 놓았다
 일단 구를 찾으면 그 구들을 이용해서 동일한 단어형태를 갖는 단어들이 서로 다른 구에서 나타날 때의 의미차이를 밝히는 데에 도움을 받을 수 있다

다음 예문에 나타나는 의 의미도 문맥을 통해서 분명히 알 수 있다
 그러나 그렇게 하기 위해서는 가능한 연어나 기타 정보를 이용하기 위해서 상당한 지식이 필요하게 될 것이다 :
이 경우에는 만일 통사분석이 이미  되어 있다면 중의성을 더 쉽게  제거할 수 있다
  3
1항에 설명되어 있는 태깅 프로그램을 사용하여 해당 문장부분에 대해서 다음의 결과를 얻었다 :
는 자연스럽게 명사 태깅이 되었고 그 단어와 인접한 문맥에는 관사인  그리고 전치사와 명사가 합쳐진  가 온다
    와 같이 '명사  명사'의 패턴은 다른 유사한 연어패턴들처럼 그 의미를 정확히 알 수 있다

어떤 종류의 영어 텍스트이든 자연스럽게 처리할 수 있는 태깅이나 파싱 프로그램, 혹은 중의성을 제거할 수 있는 프로그램을 개발하는 것은 대단히 복잡한 일이다
 그리고 그것을 설명하는 것은 이 책의 한계를 벗어나는 일이기도 하다
 그러나 제한된 범위의 언어자료는 훨씬 수월하게 연구할 수 있게 해주는 방법이 있다
 다음에 설명하는 하위언어 방법은 제한되지 않은 '자연'언어 전체를 다룰 때 야기될 수 있는 많은 복잡한 문제들을 적어도 임시로나마 덮고 지나갈 수 있게 해준다

여기서 '자연'이라는 표현은 인간이 대화에서 사용하는 언어와 소위 세계어나 컴퓨터 프로그래밍 언어, 또는 형식논리언어 등과 같은 인공언어를 구별하기 위한 것이다
 이 표현은 또 자연언어 처리時 중요한 문제들이 발생할 수 있다는 것을 뜻하기도 한다
 자연언어는 사용자 집단 내에서 역동적이고 무의식적인 합의를 바탕으로 만들어졌으며, 제한적이고 특수한 업무만을 위해서 의도적으로 고안된 것이 아니기 때문에 어차피 인공언어보다 더 복잡하다
 인공언어는 완전히 구체적으로 기술할 수 있는 반면에 자연언어는 그 기본원리를 완전히 구체적으로 기술할 수가 없다
 자연언어는 또한 사용자의 필요에 따라서 변화하는데, 이 변화는 간혹 아주 예측이 불가능하고 일관적이지 않은 방향으로 일어난다
 만일 연구대상 언어분야에 하위언어 방법을 적용할 수 있다면 이 많은 복잡한 문제들 중의 상당수를 줄일 수 있다

하위언어라는 개념은 자연언어의 특수한 유형을 연구하기 위한 근거로서 여러 학자들이 사용하여 왔다
  1982 : 102에 의하면 하위언어의 특징은 다음과 같다 :
제한된 주제
어휘, 통사 그리고 의미론적 제약
'비표준적' 문법규칙
특정구문의 높은 출현빈도
비정상적 텍스트 구조
특수기호 사용
이 특징들은 과학연구 설명, 의료기록, 항공정비교본, 기상관측 보고서 등과 같은 특수목적 텍스트에 나타나는 경향이 있다
 이들 텍스트의 특징 덕택에 분석에 필요한 작업의 범위와 성격을 제한시킬 수 있다
 이것은 태깅이나 파싱 같은 작업이 훨씬 쉬워진다는 것을 의미한다
 말할 필요도 없이 이 방법은 특수언어에만 사용할 수 있다
  8장에서 설명할 두 번째 연구의 예에서 이 방법을 사전辭典 단어 정의문에 적용한 예를 살펴보기로 한다

일반언어 방법과 하위언어 방법 사이의 주된 차이는 고려하게 될 언어자질의 정도와 성격에 있다
 하위언어 방법을 채택하게 되면 가능한 모든 용례를 포함하여 아주 광범위하게 대상언어의 근본적인 성격을 연구하는 대신 하위언어가 아주 구체적인 의사소통 목적으로 어떻게 이용되는지를 밝히기만 하면 된다
 이런 상황에서는 보편적이고 일반적인 언어의 근본적인 성격에 대해서는 신경 쓸 필요 없이 하위언어에서 실제로 사용되는 기능과 상관관계만을 다룰 수 있도록 통사태깅이나 파싱을 수정할 수 있다
 적어도 앞에서 언급한 하위언어의 변별적 특징들 중에서 제한된 주제, 어휘-통사-의미제약 그리고 특정구문의 높은 출현빈도 등의 세 가지 특징들은 전반적인 변수를 많이 줄여준다
 그러나 '비표준적' 문법규칙, 비정상적 텍스트 구조 그리고 특수기호의 사용과 같은 특징들은 이미 부분적으로 언급한 하위언어의 구조적 특징을 나타내준다

이미 언급했지만 8장의 두 번째 연구를 통해서 사전 단어 정의문用 파-서의 개발을 위해서 어떻게 하위언어 방법을 이용하는 지에 대해서 설명해 놓았다
 어휘, 통사 그리고 의미에 대한 하위언어의 제약으로 인해서 정의문 전용 문법을 만들어 내게 되었다
 이 문법은 정의문用 구조분류에 근거를 두고 개발되었다
 이 분류법에는   ' 에 사용된 31,000개 이상의 정의문에 대한 완전한 기능분석의 근거를 제공해주는 17가지 문장구조 유형이 포함되어 있다

3장,  4장 그리고 5장에서 설명한 모든 텍스트 연구용 도구 프로그램들은 대부분 분석상의 결정을 내리는 데에 있어서 문자열 인식에 의존하고 있기 때문에 아직 부족한 점이 많다
 단어빈도 조사, 문맥행 추출 그리고 연어연구용 소프트웨어들의 사용결과에 영향을 미치는 문제들에 대해서 논의하면서 통사태깅과 파싱 그리고 중의성 제거 등의 방법을 통해서 얻은 추가정보들을 이용하여 이 문제들 중의 몇 가지는 제거할 수 있고, 그렇게 함으로써 말모둠 연구기술을 촉진시킬 수 있다는 것을 살펴보았다
  5
1항에서는 말모둠 텍스트에 있어서 통사 혹은 의미정보 태깅이 어떤 장점이 있는지 살펴보고 5
2항에서는 파싱된 텍스트의 이용방법에 대해서 살펴본다

단어빈도 조사, 문맥행 추출 그리고 연어연구 소프트웨어의 이용에 영향을 미치는 주요 문제점들은 동일한 단어형태들의 차이를 구분하지 못한다거나 혹은 다른 단어형태를 동일한 단어의 대표적인 형태로 처리할 수 없다는 데에서 비롯된다
 예를 들어서,  는  텍스트에 74번 나타난다
 다음과 같이 문맥행들을 발췌하여 살펴본 결과 이 단어형태는 여러 가지 다른 언어단위를 대표할 수 있다는 것이 밝혀졌다 :
전체 25행 중에서 8행1, 4-7 그리고 10-12행은 가 명사로 사용되고 있는 반면에 나머지 17행은 동사인   의 과거형이 사용되고 있다
 단어빈도목록과 문맥행 내에서의 상이한 언어단위들 사이의 혼용은 이들 프로그램들을 이용하여 얻은 결과를 왜곡시킨다
 만일 이 단어형태들을 통사 및 의미태깅을 통해서 구분할 수 있다면 이러한 도구 프로그램들과 이들을 이용한 연어분석을 더욱 효과적으로 이용할 수 있을 것이다

통사태깅에서 사용되는 일반적인 방법은 이미 2
1항에서 설명하였다
 분석과정이 전부 수작업으로 이루어진다거나, 완전히 자동화되었다거나 혹은 이 두 가지가 혼합되었다 해도 정상적인 결과는 원본 텍스트에 주석이 붙어서 나타나는 개개의 단어들이 그 단어들의 통사적 속성을 보여주는 정보로 태깅된 형태일 것이다
 이 태그에 포함되어 있는 정보를 이용하기 위해서 텍스트 연구용 소프트웨어를 약간 수정해야 할 수도 있다
 그러나 전체적인 효과는 빈도목록과 문맥행이 단순히 문자열 인식의 수준을 넘어선 기준에 근거하여 조직화될 수 있다는 것이다
 만일 그 과정을  텍스트에 적용해 본다면 태깅된 내용을 근거로 하여 빈도목록과 문맥행 추출 프로그램에서 동사 와 명사 를 간단히 구분할 수 있다

일반연구 목적으로 개발된 어떤 말모둠에는 광범위한 태깅이 되어 있어서 이 작업을 할 수 있게 되어 있다
 예컨대, -/ 말모둠은 태깅된 것과 태깅 안된 것 모두 사용이 가능하다
 이 말모둠은 구성요소 유사성 자동 단어태깅 시스템, -  - 과 사후事後 편집과정을 혼합하여 태깅되었다
 이 과정에 대해서는 ,   1987이 잘 설명해 놓았다
 태깅으로 인해서 인간연구원이 텍스트 읽기가 더 어려워진다
 그러나 이를 통해서 컴퓨터가 다른 품사로 쓰이는 동일한 단어형태들을 구분하는 데에 필요한 정보를 제공한다
 다음은  말모둠 첫 부분에서 발췌한 견본이다 :
이 예에서 사용된 태깅표식은 상당히 구체적이다
 이 비교적 소규모 예에서조차 30개의 상이한 태깅표식을 사용한다
 태깅표식에 대한 자세한 설명은 2장 3
1
3항에서 언급된   영어 말모둠과 함께 -으로 제공된다
 태깅된 말모둠을 이용하여 작성한 빈도목록에는 에 대하여 다음과 같은 세 가지 다른 항목이 나타난다 :
이 세 개의 태깅된 형태들은 문맥행 추출 소프트웨어를 사용하여 명사 , 동사 의 과거시제형 그리고 또 과거분사형 등과 같이 별도로 찾아낼 수 있다
 이 항목들을 포함하고 있는 문맥행들 중에서 순서대로 5행씩 보면 다음과 같다 :
만일 필요하다면 위의 문맥행들을 발췌한 후에 태깅표식을 제거하여 읽기 쉽게 할 수 있다

이 태깅표식들은 또한 상당히 다양하게 사용할 수 있어서 텍스트 연구에 있어서 단어 자체보다는 단어배열이 더 중요한 통사유형 연구에 집중할 수도 있다
 분석 소프트웨어를 태깅표식만 인식하게 바꿀 수도 있고, 혹은 태깅표식만 연결시켜서 새 텍스트를 작성할 수도 있다
 앞에서 논의한 말모둠의 첫 부분에 이 작업을 하면 다음 결과를 얻을 수 있다 :
이제는 기존 빈도목록과 문맥행 추출 소프트웨어에서 텍스트에 부여된 태깅표식을 가지고 작업할 수 있다
 단위를 더 이상 개별단어로 제한할 필요가 없다
 이젠 전체문장이나 혹은 그보다는 축소된 태깅표식 집단을 조사하여 특정문형의 출현빈도를 알아낼 수 있다
 텍스트에 부여된 태깅표식들만을 보여주기 위해 사용할 수 있는 간단한 프로그램을 부록 3에 설명해 놓았다

텍스트 내에서 중의적으로 사용되는 단어들에 대해 연구하는 경우에 의미태깅은 통사태깅 못지 않게 많은 도움을 줄 수 있다
 앞에서  텍스트에서 논의한 의 예로 돌아가서 살펴보면 5
1
1항에서 사용된 예문에서 명사 가 나타나는 문맥행들은 다음과 같다 :
이 예에는 의 두 가지 의미가 다 나타난다
 하나는 1, 2, 4 그리고 12행에 나타나는 일반적 사고행위 그리고 5, 6, 7 및 10행에 나타나는 인간의 개별적인 생각이 그 두 가지이다
 만일 텍스트를 이 정도로 자세하게 태깅한다면 통사특징까지도 이에 못지않게 구분해낼 수 있을 것이다

파-싱된 텍스트와 태깅만 된 텍스트와의 주된 차이는 분석의 범위에 있다
 구 구조의 경우에 가능한 몇 가지 예외를 제외하고는 태깅은 개별단어들에 대한 정보를 제공한다
 반면, 파싱은 단어群의 구조적 관계를 찾아내는 것이 주목적이다
 이것은 연구의 범위에 중요한 차이를 초래한다
 즉, 이렇게 함으로써 단어수준의 텍스트 연구에는 제한을 받는 대신 보다 큰 그리고 잠재적으로 더욱 의미있는 언어단위를 처리할 수 있게 된다
 파싱에 의해서 제공되는 추가정보는 텍스트에서 찾아볼 수 있는 상당한 양의 중의성을 제거해 줌으로써 더욱 집중적이고 효과적으로 연구에 임할 수 있게 된다

파싱된 텍스트에서 개별단어 대신 통사태깅표식을 조사하는 방법으로 5
1
1항에서 소개한 방법은 매우 유용하게 쓰일 수 있다
 파싱된 텍스트의 구조적 단위는 태깅작업시 경계의 정의를 내리는 데에 있어서 기본단위가 될 수 있다

통사태깅, 파싱 그리고 중의성 제거작업을 기타 다른 유사 작업과 합하여 일반적으로 자연언어처리  , 줄여서 라고 부른다
 만일 통사구조와 그 의미자질을 모두 밝혀내기 위해서 텍스트를 자동으로 분석할 수 있다면 처리단계를 하나 더 발전시킬 수 있을 것이다
 일반적으로 텍스트 분석에서 컴퓨터 이용시 생길 수 있는 문제들은 컴퓨터가 텍스트 정보를 인간이 이해하듯이 이해할 수 없다는 데에 기인한다
 기본 분석방법들은 단어를 이루는 문자열에 대한 패턴일치방법을 주로 사용한다
 이 프로그램들은 단어 자체의 의미나 또는 단어들이 모여서 구성하는 텍스트의 의미를 알아낼 수 없다
 만일 가 발전하여 컴퓨터가 텍스트 의미를 이해하고 텍스트에 대해 적절한 반응을 보일 수 있게 된다면 텍스트 연구기술과 그 기술을 이용한 응용방법은 엄청나게 개선될 수 있을 것이다

여기에서 '이해한다'는 말의 뜻을 분명하게 해야 할 것 같다
 이 말의 의미는 인간이 텍스트를 이해한다는 것과 동일하지는 않다
 그러나 적어도 컴퓨터가 인간이 텍스트를 이해하는 과정과 어느 정도 흡사한 작업을 한다는 것을 의미한다
 실제로 이 과정에서 가장 중요한 것은 텍스트 내용을 통해 다른 정보를 정확하게 추론해 낼 수 있는 능력이다
 한 예로  1977의    의 146쪽에서 발췌한 다음 문장을 살펴보자 :
인간독자들은 앞 텍스트가 있기 때문에 이 문장에서 가 을 지칭한다는 사실을 아무런 문제없이 이해할 수 있다
  와 상관된 의 의미도 가능한 의미범주 내에서 다른 의미와는 구분하여 쉽게 중의성을 제거할 수 있다
    자체도 이 문장의 앞에, 즉 같은 텍스트의 145쪽에 나온 문장들이 있기 때문에 음식이 아닌 더운 음료수로 쉽게 해석할 수 있다 :
비슷한 이유로 와 는 요리의 여러 단계에 대한 설명이라는 것을 이해하는 데에도 아무런 문제가 없을 것이다
 요리지식이 거의 혹은 전혀 없는 독자들이라면 닭요리나 그 국물의 요리과정에 대해 구체적으로 모를 수 있다
 그러나 이 텍스트는 요리책이 아니기 때문에 독자들이 구체적으로 몰라도 텍스트를 인식하고 이해하는 데에 거의 영향을 미치지 않는다

만일 컴퓨터로 같은 텍스트의 의미에 대해서 동일한 수준의 인식을 하게 만들 수 있다면 더 이상 바랄 나위가 없을 것이다
 소유형 를 해당되는 사람의 이름으로 대체할 수 있고 또 , , 나 의 중의성을 제거할 수 있다면 컴퓨터는 텍스트가 정의하는 언어적 관계를 이해하고 그 함축성을 정확히 기록하여 적절하게 대응할 수 있을 것이다

자연언어의 복잡성은 4항에서 이미 설명하였다
 그리고 거기에서 말한 여러 이유 때문에 컴퓨터를 이용하여 개발 중에 있는 대부분의 완전자동화된 자연언어이해 기술들도 극히 복잡하고, 또 엄청난 자원을 필요로 한다
  7장에서는 이러한 기술들을 직접 적용한 응용방법들이나 또는 이 기술들을 이용하여 개선시킬 수 있는 몇 가지 주요 응용방법들에 대해서 간단히 살펴보겠다

통사태깅, 파싱 그리고 중의성 제거는 말모둠 텍스트 연구의 개선에 중요한 추가정보를 제공해줄 수 있다
 이 방법들의 사용과 관련된 주요문제들은 다음과 같다 :
대규모 텍스트에 수작업으로 이 방법을 적용하면 시간이 많이 걸린다

이 방법들은 정확도를 유지하면서 동시에 자동화시키기는 어렵다

만일 연구대상 언어가 적절한 특징을 가지고 있다면 하위언어 방법을 이용하여 이러한 문제점들을 야기하는 언어적 복잡성을 줄일 수 있다

자연언어이해 및 분석능력을 컴퓨터에 부여하려는 욕망은 난해한 연구대상을 지향하는 경향이 농후하기로 알려져 있는 순수학문 분야에서 추구하고자 하는 목적은 아니다
 이것은 현재 개발되고 있는 여러 가지 상용 프로그램들이 갖춰야 할 필수요건이며, 또 이미 사용되고 있는 여러 가지 처리방법들을 상당히 개선해 줄 수 있다
 이 장에서는 자연언어분석을 위하여 현재 컴퓨터를 이용해서 할 수 있는 방법과 앞으로 컴퓨터를 이용해서 할 수 있는 방법에 관련되어 있는 가장 중요한 몇 가지 분야를 간단히 살펴본다

다음에 설명하는 각 분야에서 의 이용정도는 아주 다양하다
 문서작성과 사전편찬학 분야는 작업에 있어서  기술이 상당히 중요한 기여를 할 수는 있지만 이 기술을 많이 이용하지 않고도 상당히 효과적으로 작업할 수 있다
  기술을 이용하지 않고도 자료재생을 할 수는 있으나 대단히 번거롭고 비효율적이다
 심지어 컴퓨터 보조 언어학습조차도  기술을 이용할 수 있다면 더할 나위 없이 좋겠지만 그러지 않고도 가능하다
 전문가 시스템 , 기계번역  그리고 발화인식  등은  기술이 현재 가능한 수준보다훨씬 높은 단계에 도달해야만 실질적 효용성을 띠게 될 것이다

비록 대부분의 문서작성 소프트웨어에는 기본적인 문맥탐지기능이 있어서 텍스트 유형을 검색하고 필요하면 검색된 텍스트 유형을 다른 유형으로 대체할 수 있게 되어 있지만 거의 언어분석 기술을 사용하지는 않고 있다
  2
1항에서는 이 기술들을 이용하여 문서작성 프로그램에서 사용되는 철자법 검사 소프트웨어를 개선할 수 있는 방법을 살펴보고, 2
2항에서는 문법과 스타일 검사 그리고 2
3항과 2
4항에서는 자동 자연언어이해가 실현되면 문서작성 소프트웨어에 포함시킬 수 있는 다른 기능들에 대해서 살펴본다

대부분의 주요 문서작성 프로그램에 포함되어 있는 철자법 검사기능은 검사대상 단어의 중의성을 제거할 수 있다면 큰 도움을 받을 수 있다
 만일 한 단어에서는 철자법 실수라고 볼 수 있는 형태가 다른 단어에서는 정확한 형태라면 철자법 검사 프로그램은 그 형태가 정상적이라고 처리한다
 왜냐하면 이 프로그램들은 단순히 텍스트에서 찾아낸 단어형태를 일반적으로 정확한 단어형태들을 모아 놓은 목록과 비교한 결과를 근거로 하여 작동하기 때문이다
 이 때문에 철자법 검사 소프트웨어는 예를 들어서  대신에 나 혹은  대신 가 나오면 이것을 찾아내지 못한다

철자법 검사 프로그램에서 중의성 제거용 프로그램을 사용한다면 컴퓨터로 거의 자동교정에 가까운 작업까지도 할 수 있다
 만일 같은 프로그램 내에 파서를 포함시키면 이 프로그램은 텍스트 내용을 자동으로 검토할 수 있는 일종의 기계이해 형태와 비슷해질 수 있다
 이 기능은 기존 철자법 검사 프로그램과 동일한 방법으로 사용하거나, 일단 텍스트를 작성한 후에 검사하기 위한 도구로서, 혹은 문서작성 중간에 텍스트를 확인하여 문제가 생기는 것을 감시할 목적으로 사용할 수 있다
 어떤 문서작성 프로그램은 이미 기존 철자법 검사 소프트웨어에 이러한 방법을 병행하여 사용하고 있다

상당수의 문서작성 소프트웨어에는 이미 간단한 형태이기는 하지만 문법검사기능이 포함되어 있다
 이 문법검사기능은 할 수 있는 일보다도 훨씬 더 복잡한 작업을 하도록 되어 있어서 철자법 검사 프로그램보다는 그 유용성이 덜하다
 한 예로, 다음 문장을 한 인기 있는 문서작성 프로그램의 문법검사기능을 이용하여 검사하였다 :
이 문장은 하이라이트가 되면서 다음과 같은 경고문이 나왔다 :
그리고 다음과 같은 안내문도 나왔다 :
이 실수의 이유는 분명하다
 문장의 주어는 이 아니라         ,    인데 문법검사 소프트웨어는 문장 앞부분에 있는 복수명사 까지 돌아가서 확인할 수 있을 정도로 검사범위가 넓지 않기 때문이다
 이 소프트웨어는 아주 기초적인 문법검사만 할 수 있고 또 제시하는 문법설명도 별 도움이 되지 못한다
 이 프로그램에  기능을 추가하여 문장을 더욱 완전히 분석하고, 더 유용하면서 정확한 안내를 할 수 있을 정도가 되어야 이 프로그램이 큰 발전을 했다고 할 수 있다

만일 이렇게 할 수만 있다면, 문서작성 프로그램은 다음 사항들을 찾아낼 수 있게 될 것이다 :
문법상의 문제점들을 발견하고 이에 대한 정확한 설명과 도움말 제시
문서의 정해진 스타일에 위배되었거나 주변 텍스트 속에서 컴퓨터가 준수해야 하는 스타일에 위배된 경우
비록 사용된 단어는 아주 다르다고 해도 인접 텍스트 내에서 생각이 반복적으로 표현되는 것
앞의 2
1항에서 제안했던 철자법 검사용 소프트웨어에서와 마찬가지로 이러한 점들은 교정과정에서 상당한 부분을 자동화할 수 있게 해준다

상당한 분량의 텍스트를 교정볼 때 그 텍스트의 여러 부분들 사이에서의 상호참조-의 정확도를 확인하는 작업은 물론이고, 작품내 여러 부분에서의 일관성 확인작업은 가장 시간이 많이 소모되는 작업들이다
 많은 문서작성 프로그램들은 이미 텍스트 내의 여러 곳에 같은 정보가 나타날 때에 제일 먼저 나타나는 정보가 변경되면 전체적으로 자동변경해주는 기능을 가지고 있다
 또한 많은 프로그램들이 계산결과를 숫자가 아닌 수학공식으로 입력하여 기본자료의 변화가 있을 때 자동으로 결과를 변경해주게 되어 있다
 이러한 기능들은 텍스트의 일부 내용이 변경되면 그와 관련되어 있는 텍스트 내의 다른 곳에 나타나는 내용이나 상호참조 내용에도 그 변경된 내용이 반영되게 해주기 때문에 대단히 유용하다
 그러나 이런 기능들도 텍스트의 의미에 대해서는 아무런 도움을 주지 못한다

자연언어이해능력을 갖춘 문서작성 프로그램은 다음 작업들을 할 수 있다 :
상호참조와 해설 그리고 관련된 텍스트 요소들의 자동확인
모든 상호참조와 해설 관련기록의 작성 및 유지
상호참조 관련 텍스트 요소들의 변경이 의미하는 바 확인
이런 문서작성 프로그램은 필요하다면 적절한 경고를 발하거나, 혹은 텍스트의 변경으로 인하여 설명이나 상호참조 사항이 변경되어야 할 때에는 그것까지도 자동으로 할 수 있다
 특히 이 기능을 항상 작동하게 해놓으면 어떤 변화가 일어나도 그 변화가 일어날 때마다 사용자에게 알려준다

만일 컴퓨터가 자연언어를 '이해'할 수 있는 능력을 갖추었다면 또한 그 이해과정을 역逆으로 처리할 수도 있어서 의미적이거나 논리적인 내용을 사용하여 적절한 텍스트를 생성할 수도 있을 것이다
 프로그램 연산과정에 스타일 제약을 내장시키면 틀에 박힌 작문작업은 거의 완전히 자동화시킬 수 있다
 이 과정을 제한적으로 적용시킨 예는 이미 대부분의 문서작성 프로그램에서 찾아볼 수 있는 '병합'기능이다
 이 기능은 표준형식과 데이터베이스를 이용하여 일반적으로 수신자의 요구에 맞추어서 일종의 자동화된 '형식서신 '을 작성하기 위해서 사용된다
 텍스트 생성 프로그램은 이 과정을 단순히 한 단계 더 진보시킨 것이다
 이 작업을 위한 루틴이 이미 기계번역과 발화합성 시스템 내에 존재하며 단지 문서작성 프로그램 사용자들의 광범위한 요구사항을 만족시킬 수 있는 기술만 개발되면 사용할 수 있게 되어 있다

비록 최근의 추세이긴 하나 사전 편찬학에 컴퓨터의 보조역할이 필요하다는 것은 이제는 널리 알려져 있다
 1982년부터 개발이 시작되어 1989년에 출판된  2판은 처음부터 컴퓨터를 이용한 프로젝트로 시작되었다
 초판의 전체 텍스트와 또 보충사항들이대부분 19세기에  경과 그의 동료들이 고안한 원래의 구조를 대부분 유지하고 있는 데이터베이스 형식으로 변환되어 이들 사항들을 결합시키고 또 새로운 항목들도 추가할 수 있도록 하였다
 현대의 일반 출판물들과 마찬가지로 현대사전은 컴퓨터로 인하여 가능해진 문서작성, 탁상출판 그리고 자료처리 등의 기술에 의존하고 있다
 그러나 사전 편찬학에서는 보다 높은 수준의 컴퓨터 작업을 해야 하는데 이미 앞에서 설명한 언어분석 기술과 직접 관련되어 있다

1987년에 나온     의 초판을 필두로 하여 사에서 사전들이 출판되기 시작했다
 이 사전들은 대규모 말모둠 자료들에 근거하여 빈도목록과 문맥행 그리고 연어분석을 최대한도로 활용하여 제작되었다
 이 시리즈를 위해서 사용된 말모둠인    에는 1995년 가을 현재 연속 텍스트에서 발췌한 211,000,000 단어가 수록되어 있으며 계속 증가하는 추세에 있다
 이 말모둠만이 유일한 것은 아니다
 100,000,000 단어를 수록하고 있는 대영왕립말모둠   이 1994년 가을에 공식적으로 조성되기 시작되었다
 그리고 그밖의 다른 많은 전문 말모둠들이 다양한 사전편찬 목적으로 조성 중에 있다
 사전 편찬학에서는 이미 기본적인 텍스트 연구기술을 광범위하게 사용하고 있는데 이에 대해서는 3
1항에서 살펴본다
  3
2항에서는  기술의 현재의 용도와 또 앞으로 가능한 발전방향에 대해서 살펴본다

말모둠에서 빈도목록은 그 말모둠에 포함되어 있는 단어들과 그 단어들이 전체 말모둠에 대해서 갖는 상대적 비중을 보여준다
 만일 연구대상 말모둠이 적절한 대표성이 있다면 이 빈도정보는 연구대상언어  전반에 대한 상당히 정확한 특징을 보여줄 수 있다
 사전 편찬학자들에게 있어서 이 말은 사전에 등록될 단어들을 그 단어들의 상대적 중요성을 보여주는 출현빈도를 근거로 하여 객관적으로 선정할 수 있다는 것을 의미한다
 한 단어소에 속하는 단어형태들의 목록에서 각 단어형태들을 선별해야 한다거나 또는 동형어가 존재한다는 사실3장의 2
2
3항과 6장의 3
3항 참조로 인해서 문제들이 발생하기는 한다
 목록들을 단어소 별로 나열해줄 수 있는 소프트웨어는 개발되어 있지만 동형어의 경우에는 보통 수작업으로 중의성을 제거한다

문맥행은 컴퓨터를 이용하는 사전 편찬학에 있어서 가장 중요한 자료이다
 빈도목록으로부터 선정된 단어들 하나하나에 대해서  문맥행들을 추출할 수 있다
 이 문맥행들의 도움을 받아서 사전 편찬학자들은 다음과 같은 작업들을 할 수 있다 :
선정된 단어의 주요의미 확인작업 이 작업이 이미 되어 있으면 동형어들의 의미구분작업
선정된 단어들의 상대적 출현빈도 평가작업
선정된 단어들을 포함하면서 반복출현하는 구 구조 확인작업
확인된 각각의 의미에 대한 정의 작성작업
대규모 참고 말모둠에는 보다 일반적인 단어들이 훨씬 많이 출현하는 경향이 있기 때문에 자동 구조화 작업 및 단어선정작업을 할 수 없다면 문맥행을 이용하는 것이 비현실적일 수 있다
  4장 2
4항에서 설명한 소팅 방법을 정교한 연어분석 방법과 함께 광범위하게 사용함으로써 자료를 훨씬 더 처리하기 쉽게 만들 수 있다

사전적 정의를 내리는 목적 중의 하나는 단어의 정상적인 언어환경과 특징들을 보이는 경우 이에 대해 어느 정도의 정보를 제공해 주는 데에 있다
 연어분석은 사전 편찬자들이 이러한 정보를 사전에 포함시킬 것인지를 고려할 수 있도록 이 정보들을 제공해 줄 수 있다
 단어의 개별의미들을 찾아내고 전체 문맥행들 내에서 그 의미들이 어떻게 쓰이고 있는지를 알아내는 것도 연어분석을 통해서 얻은 정보를 적절히 사용하면 더욱 효과적으로 할 수 있다
 소프트웨어 중에는 몇 가지 유의도 척도를 적용하여 얻어진 결과를 편리한 형식으로 보여줄 수 있을 정도로 정교한 소프트웨어들도 있는데, 이 결과는 사전 편찬자들이 문맥행 추출 소프트웨어를 사용하여 말모둠을 조사하기 위해서 편리하게 이용할 수 있다

사전에 제시되는 문법정보는 문법학자의 직관보다는 해당언어에서 단어들이 실제로 어떤 행태를 보이는 지에 근거를 두어야 한다
 문맥행을 통해서 제공되는 문맥 내에서 단어들을 조사하는 것은 이 정보를 얻을 수 있는 최상의 방법이다
 태깅이나 파싱 프로그램을 사용하면 비록 이들 프로그램들이 애당초 부정확한 단어행태 모형에 근거하여 제작되긴 했어도 정보를 문맥행에서 발췌하는 데에 도움이 될 수 있다

태깅 프로그램을 사용해서 발췌한 말모둠 내의 개별단어들에 관한 정보는 비록 제한적이기는 해도 파싱 프로그램을 사용하여 발췌한 좀더 복잡하고 구조적인 정보보다도 사전 편찬자들에게 더 실질적이고 유용하게 쓰이는 경우가 흔히 있다
 이것은 일반적으로 생각하듯이 파싱의 근거로 이용되는 언어이론모형들이 언어분석用으로는 적합하지 않다는 것을 보여준다
 사전 편찬학에서 최근 사용하는 대규모 참고 말모둠에서 발견되는 증거들을 고려할 때 파싱의 성격은 재고되어야 한다

사전 편찬용 기본 프로그램들이  기능을 갖게 되면 중의성 문제의 해결을 시도할 수 있고, 또 단어의 정의를 내리고 적당한 예문 텍스트를 선택하는 데에 도움을 줄 수 있게 될 것이다
 아마도 궁극적으로는 말모둠 자체에서 필요한 문헌을 자동으로 작성할 수 있게끔 단어의 행태가 소프트웨어에 의해 자동으로 탐지되고 평가될 수 있게 될 것이며, 또한 이것은 말모둠에서 컴퓨터로 발췌된 정보 중에 포함되어 그 정보를 이용하여 작성된 단어정의에 반영되게 될 것이다

자료가 어디에 저장되어 있든지 불구하고 가장 필요한 항목들을 재생해내는 일은 언제나 문젯거리이다
 이의 고전적인 예는 도서관이라고 할 수 있겠다
 도서관에는 제목과 제한된 숫자의 키워드로 색인된 책, 잡지 등에 엄청난 양의 정보들이 포함되어 있다
 도서관 이용자들은 어떤 주제에 관한 가장 적합한 글을 찾으려고 노력하다가 엄청난 시간을 낭비할 수 있다
 現색인 시스템의 부적절한 점들로 인해서 도서관 이용자들이 중요한 정보를 찾는데 실패하고, 또 관련도 없는 글을 찾게 되는 일이 흔하다
 이 문제점들 중에서 첫 번째 것은 분명히 상당히 심각한 문제이지만 두 가지 모두 값비싸고 가장 중요한 연구자원의 유용성을 감소시키게 된다

이 색인 시스템의 주된 문제는 도서관에 소장되어 있는 자료들의 내용, 범위 그리고 주된 관심에 대하여 정확하게 설명해줄 수 있는 색인을 작성하는 데에 엄청난 노력이 소요된다는 점이다
 이의 유일한 해결방법은 색인과 검색과정에 컴퓨터를 더 많이 이용하는 것일 것이다
 이 작업을 어떻게 할 수 있는지 이해하기 위해서는 데이터베이스의 성격과, 또 어떻게 그 데이터베이스가 색인되어 있는지를 살펴보는 것이 도움이 될 것이다

컴퓨터 시대의 초기에 개발된 전통적인 데이터베이스 형식은 기록카드 형식과 아주 흡사하다
 자료파일의 가장 기본단위인 개별기록은 정해진 순서에 따라 자료저장용으로 특정길이의 공간이 주어진다
 저장공간에 제한이 있다는 사실은 기록이 자료의 유용성을 최적화하기보다는 그 길이를 최소화할 수 있도록 설계되었다는 것을 의미하며, 이 때문에 데이터베이스에 저장되는 기록은 아주 형식적인 구조를 갖게 되어 있다
 심각한 제약은 컴퓨터 저장에 이용되는 매체로 인한 것이다
 초기에는 주된 저장매체는 자기테이프였는데 이 자기테이프는 자료항목이 자료의 길이별로 나타나는 순서에 따라 연속적으로만 읽을 수가 있었다
 예를 들어서, 제목보다는 필자이름을 통해서 책 한 권을 찾을 때와 같이 자료를 다른 순서로 읽고자 한다면 테이프에 수록되어 있는 파일을 원하는 순서대로 소팅하여 다른 테이프에 복사해야 했다

지금은 강력한 전산처리기술의 개발과 저장공간 및 기억용량의 대폭증가에 힘입어 이러한 제약들은 많이 줄어 들어서 심지어  전체 텍스트와 그 방대한 색인을 한 장의 -에 같이 저장할 수 있게 되었다
 이리하여 텍스트 내의 표제어, 철자변이형, 인용된 저자의 이름, 특정 어휘항목의 어원의 언어이름 등과 같은 요소들을 검색할 수 있게 되었다
 전체 텍스트는 데이터베이스로 변환되어 컴파일러에 유용한 모든 방법으로 색인되어 있다
 일단 데이터베이스가 만들어진 뒤에는 표제어, 발음안내, 철자형태 등과 같은 텍스트의 여러 부분이 컴퓨터로 자동요약되어서 그런 내용들을 포함하고 있는 사전항목과 연결될 수 있었기 때문에 색인구축작업은 훨씬 수월했다
 이 작업에 관여된 처리과정들은 4장 2
1항에서 문맥행 추출 소프트웨어에 대해서 설명하면서 이 문맥행 추출 소프트웨어의 한 선택사양으로 개별단어 색인작업에 대해서 간단히 설명했던 것과 아주 비슷하다

이 방법의 가장 주된 문제점은 상대적으로 덜 정교하다는 것이다
 이 방법은 본질적으로 빈도목록 작성과 문맥행 추출에 대해서 논의하면서 이미 설명했던 패턴일치 방법과 동일하다
 이 방법을 이용하면 따로 표시된 표식을 통해서 특별히 필요한 정보를 제공하지 않는 한 처리되는 텍스트의 의미나 함축하는 바에 대해서는 아무런 설명도 할 수 없다
 이로 인해서 야기되는 주된 문제는 사용자가 원하는 결과를 제공해줄 수 있는 검색방법을 찾기 위해서 열심히 노력해야 한다는 것이다
 컴퓨터는 자료에 대해서 아무 것도 이해하고 있지 못하기 때문에 단순히 사용자가 패턴일치 과정에서 선정한 패턴에 따라서 전체 검색작업을 한다
 보통 제한적이긴 하지만 와일드 카드 기능을 사용할 수 있다
 그리고 상당히 정교한 복합패턴을 지정할 수 있다
 그러나 이용자는 찾고자 하는 자료의 유형을 직접 물어볼 수는 없다

컴퓨터가 데이터베이스 안에 들어 있는 자료의 의미까지 분석하여 처리할 수 있다면 검색대상을 입력할 때 그 외형보다는 자료의 의미를 입력할 수 있고 컴퓨터 또한 저장된 자료의 더욱 유용한 의미를 보여줄 수 있는 쪽으로 원래의 색인을 작성할 수 있다
 이용자가 검색작업을 할 때 영어와 유사한 언어를 사용하여 할 수 있는 데이터베이스 질의 시스템  이 이미 사용중에 있다
 그러나 이 시스템들은 근본적인 한계를 가지고 있다
 컴퓨터는 이용자의 검색작업의 동기나 데이터베이스에 들어있는 자료를 이해하지 못한다
 그저 단지 재래식 검색패턴으로 변환시켜서 이미 작성된 색인과 일치되는 패턴이 있는지 확인하여 처리할 수 있을 뿐이다

만일 컴퓨터가 언어이해능력을 갖추고 있다면 이용자의 요구사항을 완전히 분석할 수 있을 것이다
 이렇게 될 수만 있다면 이용자는 더 이상 세부적인 검색사항을 입력시킬 필요가 없다
 왜냐하면 목표를 명시함으로써 컴퓨터가 적절한 방침을 나름대로 생성할 수 있게 될 것이기 때문이다
 만일 컴퓨터가 비슷한 방법으로 데이터베이스 내용을 이해할 수 있다면 검색은 최소한 사람이 검색할 때 사용하는 것과 거의 비슷하게 지능적이면서도 그보다는 훨씬 빨리 그리고 완전히 자동으로 실행될 수 있을 것이다

지능 데이터베이스의 일반원리를 도서관에 적용하면 더욱 유용하게 이용할 수 있다
 텍스트의 성격상 컴퓨터가 자연언어를 이해할 수 있다면 전자 텍스트 형태로 저장되어 있는 어떠한 텍스트이건 그 내용을 이해할 수 있을 것이다
 따라서 컴퓨터는 그 텍스트의 내용요약과 텍스트의 범위나 요점 등에 대해서 평가하여 이용자가 일반적인 용어로 검색요구를 하면 그 검색요구에 가장 적절하게 일치하는 텍스트를 자동으로 검색해 줄 수 있다
 컴퓨터는 텍스트가 저장되면 그것을 읽어서 그 텍스트를 지능적이고 자가검색을 수행할 수 있는 데이터베이스로 변환시키기 위해 필요한 모든 정보를 산출해낸다
 컴퓨터는 효율적인 도서관 사서가 되어서 가장 성실한 도서관 사서보다도 더 많은 텍스트에 관한 지식을 관리할 수 있게 될 것이다

아직은 약간 이상적이긴 하나 이미 텍스트 자동요약에 관한 한 상당한 성공을 거두고 있다
 이것은 전적인 능력을 갖추지 않고서도 가능하다
 그리고 다루는 텍스트의 양과 복잡성을 줄이기 위한 작업의 첫 단계로서 사용할 수 있다

컴퓨터를 언어학습에 이용하는 것은 상당히 잘 알려져 있지만 컴퓨터가 이 분야에 미칠 수 있는 영향에 대한 초기의 평가는 다소 터무니 없었다
 많은 사람들은 처음에 어학실습실과 또 그에서 비롯된 여러 가지 부수적인 문제들에 대해서 느꼈던 것과 흡사한 흥분에 휩싸였고, 또 어학교사들이 광범위하게 느꼈던 좌절감도 느꼈다
 그 이후 언어학습에 있어서의 컴퓨터의 적절한 역할에 대해서 상당히 신중하게 정의하게 되었고, 따라서 컴퓨터는 언어학습에 유용한 공헌을 하게 되었다
 만일 컴퓨터가 자연언어에 대해서 보다 확실한 이해를 할 수 있었다면 더욱 유용한 공헌을 하게 되었으리라는 것은 의심할 바 없다
 다음에 개선 가능성이 있는 주요분야에 대해서 설명해 놓았다
 이들은 특히 언어학습에서의 컴퓨터의 이용이라는 맥락에서 살펴보았지만 많은 점들이 다른 분야에서의 컴퓨터 이용에도 적용된다

학생이 컴퓨터와 커뮤니케이션하는 것과 또 컴퓨터가 학생에게 정보를 제공해줄 수 있는 능력에 있어서의 제약은 어떤 언어학습 시스템에 있어서나 가장 취약한 점일 것이다
 아무리 잘 제작된 소프트웨어라고 해도 만일 컴퓨터가 학생의 입력에 대해서 일반 교사가 하는 것과 같은 종류와 수준의 지능적인 판단을 내리지 못한다면 학생은 아주 빨리 좌절감을 느끼게 될 것이다
 유사하게 만일 개별 사용자별로 적합한 피드백이 주어지지 않는다면 최적의 결과를 얻을 수 없다

많은 언어학습 프로그램들은 퀴즈 형식으로 효율성을 기하고 있다
 퀴즈로 물어본 질문에 대한 학생의 대답은 면밀하게 평가해야 한다
 컴퓨터로 단순히 정답과 오답을 가려내는 것만으로는 만족할 수가 없다
 만일 대답이 기대했던 것과 정확히 일치하지 않는다면, 프로그램은 과연 그 답이 얼마나 정확한지 그 정도를 결정하여 그에 대한 반응으로 학생에게 가장 적합한 지시사항을 알려주어야 한다
 이런 유형의 프로그램들 중에서 비교적 간단한 프로그램들은 원래부터 별로 잘 만들어지지 못해서 최소한도의 철자법 실수나 혹은 소문자 대신 대문자를 쓴 경우에도 학생들은 마치 전혀 틀린 답을 한 것과 마찬가지의 반응을 받게 될 것이다

만일 학생이 소프트웨어를 이용하는데 있어서 그 소프트웨어에 적절한  능력이 갖추어져 있다면 그 소프트웨어가 학생의 반응을 적절하게 해석하여 더욱 적합한 반응을 할 수 있을 것이다
 적당한 이용기간이 지나면 컴퓨터는 개별학생의 언어능력을 측정하여 그 능력에 따라서 개별학생마다 다른 반응을 해줄 수도 있다

이용하고자 하는 학습用 소프트웨어가 간단한 퀴즈用이거나 혹은 좀더 복잡한 형태의 언어연구用인지를 불구하고 만일 컴퓨터가 학생에게 적합한 자료를 선택하여 이용할 수 있다면 학습효과가 크게 증진될 수 있다
 퀴즈 형식 소프트웨어는 를 적용시키지 않고도 아주 쉽게 이런 식으로 만들 수 있다
 물어볼 만한 문제들을 미리 난이도를 표시하여 한 곳에 모아놓고 질문에 대한 학생반응의 정확도에 따라서 적절한 문제를 선택할 수 있다
 더욱 복잡한 텍스트용 소프트웨어라면 컴퓨터가 직접 평가한 복잡성 정도에 근거하여 실제문장들로부터 문장들을 선택하면 더욱 효과적일 수 있다

컴퓨터가 이 정도의 변별력을 갖출 수 있게 되기까지는 컴퓨터가 학생이 수행하는 작업에 사용되는 텍스트의 복잡성 정도를 적절하게 평가할 수 있어야 한다
 언어학습의 몇몇 영역에 대해서는 비교적 간단한 방법으로 이 작업을 할 수 있다
 예를 들어서, 만일 텍스트의 어휘적 복잡성이 가장 중요한 특징이라면 컴퓨터는 빈도목록을 이용하여 적정수준 이상의 복잡성을 갖는 단어는 사용하지 않게 할 수 있다
 반면에 만일 의미적 복잡성이 가장 중요한 특징이라면 단어형태를 가지고서는 컴퓨터에 필요한 자료를 제공해줄 수가 없다
 이를 위해서는 중의성을 제거해줄 수 있는 방법이 필요하다
 통사적 특징에 근거한 결정을 내릴 경우에는 컴퓨터를 이용하여 적절한 통사적 측면을 인식해야 하는데 이는 상당한 수준의 파싱 능력을 필요로 한다
 내용이나 전체 텍스트의 담화구조와 같이 더욱 복잡한 결정을 해야 하는 경우에는 고급수준의 기계이해 능력이 필요하다

컴퓨터를 퀴즈나 기타 다른 언어학습 활동에 이용하는 것은 컴퓨터 보조 언어학습에 있어서 비교적 사소한 측면일 뿐이다
 더욱 강력한 학습환경이 자료를 이용한 기술을 사용하여 개발되고 있는데, 이 환경에서는 학생들이 컴퓨터를 언어검사도구로 이용할 수 있어서 학생들은 원하는 정보를 그 언어로부터 직접 얻을 수 있다
 컴퓨터는 마치 일반 원어민 화자에 비해서 해당언어에 대해 훨씬 많은 지식을 가지고 있으면서도 지치지 않는 원어민 화자라고 볼 수 있다

이 방법을 위해서는 문맥행 추출 프로그램이 사용되어 왔는데 모든 패턴일치 방법의 본질적인 한계는 학생들이 이 방법들을 유용하게 이용하는 것을 제한해왔다
 이상적으로는 이용자가 특정 키워드뿐만이 아닌 통사구조, 단어소의 순서 등에 대해서도 문맥행 목록을 이용할 수 있어야 한다
 이용되는 단어나 구와는 무관하게 텍스트 내에서의 특정의미에 대한 모든 예문을 포함하고 있는 역순 의미 문맥행 목록  을 작성하는 것도 대단히 유용할 것이다
 이런 문맥행을 작성하기 위해서는 소프트웨어에 상당히 복잡한 능력이 갖추어져 있어야 한다

대부분의 문서작성 프로그램에 들어 있는 철자법과 문법검사 프로그램들은 언어학습자들이 학습목표 언어로 텍스트를 작성하는 데에 도움을 줄 수 있도록 변경하기가 아주 수월하다
 2
1과 2
2항에서 제안한 바와 같이 이 프로그램들이 더욱 정밀한 변별력을 갖추게 하고, 경고 메시지와 도움말 등은 학습자의 요구에 맞추어야 한다
 만일 문서작성 프로그램을 이용자의 필요에 따라 조정하여 정의의 내용 그리고 의미의 범위 등을 처리하고 이해하는 컴퓨터 기능을 이용하여 적절한 학습자용 사전 및 동의어 사전과 직접 연결해놓으면 대단히 유익할 것이다

인공지능 연구자들은 지능 데이터베이스로부터 출발하여 특정 분야의 주제들에 관해 질의質疑를 받아서 그 데이터베이스에 들어 있는 정보를 바탕으로 하여 질의에 대답할 수 있는 지식 베이스 를 개발했다
 이 방법은 최소한 두 가지 장점을 가지고 있다
 인간 전문가의 숫자는 상대적으로 적고, 또 비상시에는 만나기 어려울 수 있다
 이런 까닭에 인간 전문가 이용에는 비용이 많이 드는 경향이 있다
 만일 이들이 보유하고 있는 지식을 컴퓨터 시스템에 복제해 놓을 수 있다면 훨씬 많은 사람들이 수월하게 그리고 지속적으로 참고할 수 있을 것이다

두 번째 장점은 훨씬 기본적인 것이다
 인간 전문가는 나이가 들어서 죽게 되면 그들의 전문지식의 상당한 양도 함께 사장된다
 일생동안 인간 전문가가 축적할 수 있는 지식의 정도는 비록 문헌을 통해서 증가되기는 하지만 한계가 있다
 데이터베이스에 저장되어 전문가 시스템에 이용할 수 있는 정보의 양에는 실제로 한계가 없다
 그리고 적어도 이론적으로는 그 시스템은 영구적이다
 이 말은 그 전문지식이 어떤 인간 전문가의 것보다도 더 방대해질 수 있다는 것을 의미한다
 만일 이 전문가 시스템에 적절한 연산방법을 갖춰놓기만 한다면 그 지식 베이스는 이전에 발견한 결과를 가지고 스스로 수정할 수 있어서 마치 인간 전문가나 비슷하게 스스로 경험을 통해서 학습할 수 있다
 이 시스템은 인간 전문가보다도 훨씬 많은 정보를 접할 수 있기 때문에 그 학습과정이 더 빠르고, 쉽게 노화되지도 않는다

이와 같은 작업을 적절히 해내기 위해서 전문가 시스템에는 인공지능 개발자들의 영역인 적절한 지식처리와 학습연산과정이 갖추어져 있어야 한다
 인간 이용자가 직접 이용할 수 있게 하기 위해서는 이용자와 의사소통을 할 수 있어야 하고, 또 이용자의 말을 이해하고 분명하게 대답하게 하기 위해서는 강력한 자연언어 대화방식이 필요하다
 이의 전형적인 예로는 초기의료진단이나 공항탐문 시스템 등과 같은 것들이 있다

다음 문장은 이태리제製 오븐 사용 안내서에서 발췌한 것이다
 이태리어 사용 안내서 원본은 다음과 같다 :
이태리어 설명 이외에도 이 안내서에는 불어, 영어, 스페인어 그리고 네덜란드어 번역이 포함되어 있다
 같은 문장을 영어로 번역하면 다음과 같다 :
비록 이태리어 지식이 전혀 없어도 두 문장 사이에서 사용된 단어들의 숫자를 놓고 볼 때 번역과정에서 큰 변화가 있었고, 또 번역작업이 그저 단순히 이태리어 단어를 영어단어로 하나하나씩 교체해 넣는 것과 같은 단순한 일이 아니라는 것을 분명히 보여준다
 이 번역작업에 대해서는 나중에 구체적으로 논의하기로 한다
 그러나 컴퓨터 작업의 가능성을 고려하기에 앞서서 번역과정이 얼마나 복잡한 것인지는 강조해두고 싶다

전세계적으로 매일 이루어지는 번역의 양은 엄청나다
 국제무역, 정치협상 그리고 학계 등에서 번역에 대한 수요가 많다는 것은 너무나도 분명한 사실이며, 그 자체 내에서 엄청난 번역작업이 이루어지고 있다
 이 안내서만으로도 서로 다른 네 가지 번역작업을 필요로 하며, 가장 간단한 제품에 대해서조차도 어떤 형태로든 제작된 대부분의 사용 안내서들에는 더 많은 언어로 표기되어 있다
 하나 이상의 공용어를 가지고 있는 국가들에서는 번역작업만으로도 하나의 거대한 업무가 될 수 있다
 왜냐하면 모든 공고문과 공문서들이 공용어들로 번역되어야 하기 때문이다

번역과정에 들이는 엄청난 양의 노력을 고려할 때 이 분야가 컴퓨터를 이용한 자동언어분석이 시도된 첫 번째 분야라는 것은 전혀 놀라운 일이 아니다
 문제의 복잡성을 고려할 때 애당초 예상했던 것보다도 기계번역이 훨씬 더 어렵고 또 아직 완전히 성공하지 못했다는 것도 전혀 놀라운 일이 아니다
 다음 몇 항에서는 몇몇 주요문제들을 야기하는 분야들과 또 그 문제들을 해결하려는 노력의 일환으로 채택되었던 방법들을 자세히 살펴보겠다

전 항에서 논의한 예문은 번역작업의 복잡성에 대한 논의의 출발점을 제공해 줄 수 있다
 원본 이태리어 텍스트는 다음과 같다 :
이 문장을 단어 하나하나를 놓고 보면 각각의 이태리어 단어를 그와 가장 유사한 영어 대응어로 교체하여 다음과 같이 번역할 수 있다
 이태리어 원본의 한 단어를 번역한 영어의 구는 빈칸밑줄로 연결하였다 :
영어번역과 비교해보면 번역과정에서 얼마나 배열이 바뀌었는지 알 수 있다 :
번역과정에서는 다음의 변화들을 찾아볼 수 있다 :
출처언어 에서 목표언어 로의 단어수 증가
출처언어에서 목표언어로의 구 축약
어순변화 예,   는 이태리어 문장의 문두에 오지만    은 영어 문장의 문미에 옴
이러한 변화는 어떤 출처언어와 목표언어가 선택되는가에 따라 다르다
 비록 위의 예문들 중에서 불어번역은 영어번역에도 나타나는 몇 가지 변화를 포함하고 있지만 이태리어 원본의 특징도 몇 가지 보존하고 있다 :
이 문장에서         _ 은 많이 축약되고 재배열된 영어번역보다는 이태리어 원본의 단어들과 거의 정확하게 일치한다
 그러나 영어번역과 마찬가지로 이 부분은 문미가 아닌 문두에 온다
 비슷하게  는 불어에서는 그대로 번역되는데 영어에서는 로 축약된다
 는  로 되어서 영어의  과 앞뒤에 오는 명사와 형용사의 순서가 바뀌어서 번역된다

앞 항에서 보인 단어별 번역에서는 의도적으로 기계번역에서 나타날 수 있는 잠재적인 문제점들은 무시했다
 원본 이태리어 텍스트에 나타나는 단어들의 의미는 그 단어들의 유일한 의미는 아니고 영어번역과 비교하여 가장 적절하다고 여겨지는 의미를 선택하였다
 이 한 문장을 놓고 보더라도 단어들이 중의성을 지닐 수 있는 정도는 상당히 광범위하다
 다음 분석에서는 중의적인 모든 단어들에 대하여 이태리어-영어 사전에 수록되어 있는 가능한 의미들을 보여준다 :
와 는 별개의 단어로서 의미는 비록 둘 다 '조종하다 /제어하다'지만 이 단어들이 복합된      는 영어의 로 번역되었는데, 이것도 인간이 번역한다면 적절한 의미선택에는 별 문제가 없을 것이다
 이와 유사하게 의 가능한 의미는 번역에서 완전히 무시되었다
 적절한 의미를 선택하는 문제나 어떤 요소를 생략하는데 있어서 내려야 하는 결정 등은 모두 자동번역의 중요한 문제들이다
 목표언어에서 적절한 의미대응관계에 있는 단어를 선택하기 위해서는 출처언어에서 성공적으로 중의성을 제거할 수 있어야 한다

언어를 사용할 때마다 대개는 자동적으로 사용환경에 적응해가는 과정에서 무의식적으로 스타일을 선택하게 된다
 출처언어에서의 특정 스타일의 특징은 대상언어에서 이에 해당하는 스타일의 특징과는 완전히 다를 수 있으므로 이 점은 기계번역에 있어서 또 다른 문제를 낳게 된다
 컴퓨터가 자동으로 원본 텍스트의 스타일의 특징을 이해하고 그와 비슷한 스타일로 번역하기 위해서는 개별 문장구조를 훨씬 넘어서서 전반적인 담화구조까지 이해할 수 있는  능력이 필요하다
 하지만 이 정도의 능력은 아직도 자연언어이해 분야에서 성취하지 못하고 있다

비록 완전히 효과적인 기계번역 소프트웨어는 아직 개발되지 않았지만 번역에 도움을 주면서도 작업량을 상당히 줄여줄 수 있는 프로그램은 있다
 이 프로그램들이 이 정도로라도 성공할 수 있었던 것은 문제의 복잡성을 줄일 수 있었기 때문이다
 이 가능성에 대해서는 두 가지로 고려할 수 있다
 첫 번째는 출처언어의 복잡성을 줄이는 것이고 두 번째는 작업에서 컴퓨터 이용을 제한하는 것이다

많은 경우에 특수상황에서 번역될 텍스트가 특수용례를 갖는 경우가 있다
 만일 이런 상황이 발생했다면 출처언어에 자동으로 부가되기 마련인 제약이 있어서 그 텍스트를 하위언어로 처리할 수 있는 경우도 있다
 하위언어의 일반적인 특징들 그리고 그것을 언어분석에 이용할 때의 장점들에 대해서는 6장 4항에서 설명하였다
 이 방법은 출처언어의 복잡성에 그다지 결정적 영향을 미치지는 않는다
 그러나 이 방법을 이용하면 제한되어 있지 않은 텍스트에서 발생할 수 있는 문제들 중의 몇 가지는 무시하고 넘어갈 수 있기 때문에 전체 번역과정을 상당히 단순화시킬 수 있다
  8장 3항에서는 하위언어 방법을 이용한 응용 프로그램의 예에 대해서 논의한다

만일 번역할 텍스트가 충분히 제한되어 있지 않다면 텍스트의 복잡성을 줄이기 위하여 더 직접적인 방법을 채택할 수 있다
 이를 위해서 약식언어 방법을 이용할 수 있다
 그러나 이 방법은 여건이 허용될 때라야만 사용할 수 있다
 텍스트 출처는 번역자가 결정해야 한다
 혹은 텍스트를 자동번역하기 전에 텍스트를 간략하게 만들 수 있어야 한다
 가장 골치아픈 번역상의 문제들을 피할 수 있도록 번역 텍스트에 적정수준의 복잡성을 규정할 수 있다
 이 방법을 이용하면 다른 장점도 있다
 번역할 텍스트에 사용된 언어는 엄격히 통제되어 있기 때문에 실제로 번역의 질과 명료성이 개선될 수 있다
 이러한 경계선들을 설정하면 하위언어를 효과적으로 작성할 수 있고, 따라서 이 텍스트에 앞에서 논의했던 하위언어 방법을 적용함으로써 하위언어 이용에 따르는 혜택까지도 볼 수 있다

바로 전 항에서 설명한 방법들 중에서 어떤 방법을 이용해서도 텍스트의 복잡성을 줄일 수 없다면 작업의 일부를 수작업으로 해야 할 수도 있다
 이 방법은 가장 효과적인 시스템을 채택했다고 해도 어느 정도는 이용할 수밖에 없는 방법인데, 왜냐하면 최종결과가 적절한 지 아닌지를 확인하기 위해서 어느 정도는 점검하고 편집해야 하기 때문이다
 컴퓨터 작업결과를 이렇게 사후편집하는 것 이외에도 시스템에 입력하기 전에 편집하는 것이 바람직할 수도 있다
 이 단계에서 하게 될 작업은 바로 앞 항에서 설명한 대로 사용된 구문의 단순화에서부터 비롯하여 문제가 되는 항목이나 관용어구, 복잡한 통사구조 등의 태깅에 이르기까지 다양하다
 비록 이렇게 하는 것이 진정한 기계번역과는 거리가 있다고 말할 수는 있어도 수작업을 적절히 활용한 시스템은 더욱 효율적이고 유용하게 사용할 수 있다

지금까지 살펴본 모든 프로그램들은 자료가 전자 텍스트로 되어 있다는 것을 전제로 한다
 인공지능 연구 초창기부터 인간의 발화를 컴퓨터가 직접 처리할 수 있도록 하려는 시도가 있어왔지만 별다른 진전을 보지는 못했다
 다음에서 이와 관련된 문제들을 살펴보고 그 해결책을 모색해 본다

아마도 구어체를 문어체와 구분해주는 가장 두드러진 특징이라면 구어체에는 언어단위를 구분할 수 있는 경계가 없다는 것이다
 문어체 텍스트에서는 단어들은 그 사이에 오는 빈칸이나 구두점 부호로 인해서 훨씬 구분하기가 쉬운 반면 구어체에서는 단어들 사이에 체계적인 휴지부호가 거의 사용되지 않거나 덜 사용됨으로써 훨씬 큰 단위로 산출된다
 결과적으로 들리는 음성단위를 유용하게 처리하기 위해서는 그 전에 이 음성단위를 적절한 언어단위로 분석해야 한다
 이 결과 발화인식을 통한 텍스트 분석에 아무리 경험이 많은 연구자라고 해도 해결하기 어려운 대단히 복잡한 문제가 야기될 수 있다
 분명히 분절되어 발화된 단어들을 문어체 형태로 전환시키는 데에도 약간의 어려움은 있지만 정상 발화음을 단어나 그밖의 단위로 나누는 데에는 더 많은 어려움이 있기 때문에 전체 작업과정이 매우 어려워지게 된다

상황을 더욱 복잡하게 만드는 것은 여러 언어단위가 더 큰 단위로 합쳐지는 경우인데, 이로 인하여 인식대상인 음성의 중의성이 증가된다
 아주 간단한 예로서 다음과 같은 두 구문을 발화할 때 들리는 음성에 대해서 살펴보자 :
순수론자들은 만일 '정확하게' 발음한다면 이 두 구문 사이에 분명한 차이가 나야 한다고 주장할 수도 있다
 그러나 정상발화에서는 이 둘의 차이를 구분할 수 있을 정도로 정확하게 발음할 수 있는 사람은 거의 없다
 정상발화에서 단어경계를 구분할 수 있는 증거는 없고 음성표기에서도 이 둘은 다음처럼 표기된다 :
분명히 이 음성적 중의성은 컴퓨터를 이용할 경우 심각한 문제를 야기시키게 된다
 성공적으로 중의성을 제거하려면 정확한 해석을 할 수 있도록 컴퓨터가 문맥을 충분히 이해해야 한다
 그렇게 하기 위해서는 언어단위를 적절히 구분하기에 앞서서 자연언어 이해능력을 갖추어야 한다

 프로그램의 경우와 마찬가지로 발화인식의 복잡성은 발화인식이 온갖 종류의 다양한 발화언어를 대상으로 이루어져야 한다는 점에서 비롯된다
 7
4
1항에서 설명한 기계번역의 입력을 단순화시키기 위해 사용하는 방법을 여기서도 사용할 수 있다
 특히 시스템을 단순히 제한된 범위의 발화언어만을 처리하게 할 수 있다
 즉, 인위적으로 단어들 사이에 명백히 구분이 가능한 휴지부호를 두고 분명하게 발음한다
 만일 언어의 범위를 충분히 제한한다면 단어경계는 불필요할 수도 있다

상황에 따라서는 7
4
2항에서 기계번역을 단순화하기 위해서 제안된 다른 방법, 즉, 컴퓨터의 이용을 제한하는 방법을 적용시킬 수 있다
 이 방법은 발화언어의 대본이 있는 경우에 사용할 수 있는데, 컴퓨터는 음성패턴의 해독보다는 단순히 그것을 대본의 해당부분에 맞추어 정렬시키기 위한 목적으로 이용하였다
 이것은 별로 유용한 방법이 아닌 것처럼 여겨질 지 모른다
 그러나 이 방법을 이용하면 예컨대, 대본 대신에 녹음된 음성에 대한 지능검색을 할 수 있게 해줌으로써 비디오 음성트랙에서 특정 단어형태를 검색할 수 있게 해준다
 일단 음성을 대본과 대조하여 일치되는 부분을 찾아낼 수만 있다면 비디오의 프레임 숫자를 자동으로 대본에 색인으로 기록할 수 있다
 그리고 텍스트의 키워드나 또는 이보다 더 정교한 검색방법을 이용하여 음성트랙의 주제를 찾을 수 있다

언어분석의 실제 응용범위는 대단히 넓다
 문서작성 소프트웨어와 같은 기존의 일반 프로그램, 사전 편찬학과 같은 더욱 전문화된 분야 그리고 기계번역이나 발화인식과 같은 분야에서의 새로운 형태의 자동화 과정 등이 모두 언어분석의 영향을 받는다
 빈도목록, 문맥행 추출 그리고 연어분석 등과 같은 간단한 언어분석 도구들과 좀더 정교한  방법론들은 이러한 응용 프로그램의 발전에 지대한 공헌을 할 수 있다
 완전한 자연언어 처리방법의 개발에 있어서 문제가 되어왔던 사항들은 이러한 기술들을 실질적으로 연구하는 데에도 심각한 제약을 주어 왔다
 그러나 이 기술들은 현재도 계속 발전하고 있는 중이다
 특히, 제한된 목표를 추구하는 분야에 있어서는

이 책에서는 언어연구를 하는데 있어서 컴퓨터를 이용하는 경우의 장점과 컴퓨터 이용시 발생할 수 있는 문제들 및 그 문제들을 극복할 수 있는 방법들을 살펴보았다
 이를 위한 기본기술과 현재 많이 사용되고 있는 응용 프로그램들에 대해서는 불가피하게 일반적인 설명만을 했다
 그리고 제시한 예들은 요점을 가능한 한 분명하게 보이기 위해서 아주 간단한 것들로 제한하였다
 이 장에서 논의하고자 하는 사례들은 간단한 예들은 아니다
 이 사례들은 실제 연구 프로젝트들을 있는 그대로 보여주고 있다
 그래서 실제의 문제점들을 그대로 보여주고 어떻게 그 문제점들을 해결하는 지도 보여주고 있다
 이 프로젝트들은 실제 프로젝트들이기 때문에 그 응용도는 덜 일반적이다
 그러나 이와 비슷한 상황에서 가능한 방법들을 보여주는 좋은 예로서 그 유용성을 인정할 수 있다

이 프로젝트의 일반적 배경에 대해서는 첫 장에서 설명했다
 중세영어 텍스트의 철자법 검사 프로그램이나 문맥행 추출 프로그램을 사용해보거나, 혹은 용어해설을 이용하여 그러한 텍스트를 번역해 본 경험이 있는 사람이라면 왜 필자가 제일 먼저 이 철자변이형에 관심을 갖게 되었는 지 쉽게 이해할 수 있을 것이다
 중세영어 텍스트의 처리를 위해서 컴퓨터를 이용할 때마다 철자변이형으로 인하여 텍스트 연구 소프트웨어에 문제가 발생한다는 것과, 또 그 문제들을 극복하기가 얼마나 어려운 지도 알게 되었다
 이 프로젝트는 이러한 상황에서 무엇인가 해결해보려는 노력의 일환이었다
 컴퓨터 이용 여부與否에 대한 결정은 실제로 무관했다
 왜냐하면 프로젝트의 요점은 도구로 이용할 수 있는 소프트웨어를 개발하는 것이었기 때문이다
 연구대상 자료의 선택 또한 1장 1
1항에서 논의했던 대로 상당히 제약이 있었다
 프로젝트 진행에 있어서의 첫 번째 실질적인 단계는 에서 제공한 텍스트를 이용하기 적합한 형태로 변환시키는 것이었다

비록   텍스트는   에서 입수할 수 있었지만 그것을 곧바로 프로젝트에 이용할 수는 없었다
 그 텍스트를 처음에 저장되어 있던 저장매체로부터 프로젝트에 이용하기로 한 컴퓨터에 적합하게 변환하는 작업에 대해서는 이미 1장 1
2항에서 설명한 바 있다
 일단 변환한 후에도 텍스트에는 처리과정에서 문제를 일으킬 수 있는 요소들이 남아 있었다
 텍스트는 전부 대문자로 되어 있었고 각 행 앞에는 전체 텍스트에서의 그 행의 위치표시를 위해 부여한 복잡한 참고번호가 붙어 있었다
 한 예로 텍스트의 첫 몇 행을 살펴 보자 :
대문자는 아무런 문제도 되지 않았다
 왜냐하면 프로젝트용으로 개발된 소프트웨어는 텍스트 파일에서 뽑아낸 단어목록을 참고하여 이 단어들을 단어빈도 프로그램 내에서 전부 소문자로 바꾸었기 때문이다
 참고번호가 문제가 되었는데, 왜냐하면 이 번호들이 철자변이형 연구용으로 사용하려고 하는 문맥행 추출 프로그램에 문제를 초래할 수 있었기 때문이었다
 이에 대한 해결책은 문맥행 추출을 더욱 효과적으로 하기 위해서 노력하던 중에 우연히 발견하게 되었다

원래의 단어빈도목록은 표준  텍스트 형식으로 작성되었다
 가능한 한 문맥행 추출작업을 신속하게 하기 위해서 텍스트 파일에 색인을 붙이기로 했는데, 그 색인기능은 단어빈도 소프트웨어에 내장되어 있었다
 이 방법에 대해서는 4장 2
1항에서 설명하였다
 이 경우에 단어목록 최종판에는 텍스트에서 각 단어가 나타나는 행번호를 모두 표시한 파일이 별도로 포함되었다
 텍스트 파일 자체는 이 행번호를 이용하여 문맥행 목록 작성에 필요한 텍스트에 신속히 접근하는 데에 이용할 수 있도록 데이터베이스로 변환하였다
 이 변환과정에서 불필요한 정보를 제거할 기회가 주어졌으나 끝자리 몇 개의 숫자는 아주 유용하다는 것이 곧 밝혀졌다
 이 번호들은 인쇄본의 특정 텍스트와 연관된 원본의 행번호를 나타내는 것들이었다
 그러나 이 원본의 행번호는 새 텍스트 데이터베이스의 실제 행번호와 일치하지 않았기 때문에 이것을 새 파일에 포함시켜서 문맥행 목록의 일부로 인쇄할 수 있도록 하였다
 이것은 있을지도 모르는 자료입력상의 오류를 점검하기 위해서 행별로 인쇄본과 대조검사를 하거나, 혹은 좀더 광범위한 문맥을 찾고자 할 때에 행번호를 참고자료로 이용할 수 있었다는 것을 의미한다

프로젝트가 진전됨에 따라서 텍스트의 장과 장에서 단어빈도 목록에 약간의 문제가 발생하였다
 이 두 부분에는 상당한 양의 산문체 문장들장에서는 '   '와 장에서는 ' ' '이 포함되어 있었다
 이 문장들은 인쇄된 원본과 동일하게 텍스트 파일로 입력되었는데 원본에는 행단에 단어가 길어서 잘린 경우 나머지 부분은 다음 행으로 넘어가 있다는 것을 나타내는 하이픈이 붙어 있었다
 단어목록 작성작업에서는 텍스트 행이 기본단위였으므로 행단에 오는 단어의 잘린 부분이 온전한 단어로 취급되어 결국 틀린 항목을 산출하게 되었다
 이 문제를 해결하기 위해서 각 행단문자를 검사하는 간단한 프로그램을 만들었다
 이 프로그램은 행단에 하이픈이 오면 그 하이픈과 인접환경을 조사하여 그것이 과연 단어가 잘렸다는 것을 나타내기 위하여 사용된 것인지 아니면 대시로 사용된 것인지를 확인해준다
 발견된 모든 단어분절 표시는 그 다음 행에 오는 단어의 잘린 부분을 이동시켜서 자동으로 조정하여 단어를 원상태로 복구해준다
 이렇게 해서 이 두 장에서 나온 텍스트는 최종 단어목록을 작성하기 전에 상당히 수정되었다
 이 프로그램에 대해서는 부록 3에 설명해 놓았다

두 가지 가능성 중에서 기본적인 방법을 선택하였다
  의 문체에 대한 설명에 기초하여 작성된 철자규칙을 가지고 시작하여 그 규칙들을 컴퓨터로 테스트해 볼 수 있었다
 그렇지만 이런 방법을 사용하면 기존학설에 너무 의존하게 되고, 또 텍스트의 기본특징들을 충분히 밝혀낼 수 없을 것이라는 생각을 하게 되었다
 그래서 그 대신 철자규칙을 찾기 위해서 컴퓨터를 이용하기로 하였다
 이 과정에는 다음의 네 단계가 설정되었다 :
	전체 텍스트용 단어 빈도목록 작성
	철자변이형 단어쌍   선택
	변이유형을 찾아내기 위한 단어쌍 정렬 및 요약
	주요 철자 변이유형들과 단어쌍 대조
여기에서 를 제외한 모든 단계들은 컴퓨터를 이용하여 자동으로 할 수 있었다
 원래 단계에서는 일반 단어빈도 소프트웨어를 그리고 단계에서는 표준 문맥행 추출 소프트웨어를 사용하려고 했었으나 특별히 제작된 프로그램이 작업을 훨씬 수월하게 해줄 수 있다는 사실이 곧 밝혀졌다
 빈도목록 소프트웨어는 텍스트 파일을 색인처리하여 단계用으로 개발된 소프트웨어를 쉽게 사용할 수 있게 해주었다는 것을 제외하고는 별로 특별한 점은 없었다

철자변이형을 찾기 위해서 컴퓨터를 이용했기 때문에 단어쌍 선정기준을 가능한 한 단순화시켜야 했다
 그 결과 한 기준이 채택되었다
 빈도목록에 있는 단어들을 서로 비교하고 또 한 문자만 차이가 나는 모든 단어쌍들을 찾아서 나열해주는 프로그램을 특별히 제작하였다
 이렇게 간단한 실험을 통해서 선택과정을 상당히 단순화시키고, 또 한 번에 단어변이형의 한 측면에만 관심을 집중시킬 수는 있었지만 다양한 변이형이 있는 단어쌍의 경우에는 무시할 수밖에 없었다
 최적화시킬 수 있는 손쉬운 방법이 개발되었음에도 불구하고 단어쌍 선택에 필요했던 비교작업이 방대했던 관계로 프로그램을 30시간 이상 작동해야 했다
 이 결과 17,912쌍의 목록이 작성되었다
 이 목록에서 몇 개의 단어쌍을 견본으로 살펴보면 다음처럼 약간의 차이를 보이고 있다 :
특별히 제작된 소프트웨어를 사용하여 단어쌍들을 정렬시켜서 비슷한 면에서 차이가 나는 단어쌍들을 모두 모아서 그 차이를 보여주는 빈도목록을 작성하였다
 한 문자에서만 차이가 나는 변이유형은 다음의 일곱 범주로 정리되었다 :
단어의 끝에 한 문자가 추가된 경우 예,  와 
단어의 처음에 한 문자가 추가된 경우 예,  와 
단어 내에 같은 문자가 반복되는 경우 예,  와 
단어 내에 한 문자가 삽입되는 경우 예,  와 
한 모음을 다른 한 모음으로 대치하는 경우 예,  와 
한 자음을 다른 한 자음으로 대치하는 경우 예,  와 
한 모음을 다른 한 자음으로 대치하는 경우 예,  와 
각 범주에 해당되는 예들 중에서 가장 빈도가 높은 예를 임의로 선택하여 자세히 살펴보았다
 이들 예로는 마지막 모음 , 초성 , 삽입된 , 중복되는 , 나 , 또는  대신 삽입된 ,  그리고  등이 있다
 마지막 예에서는 가 직관적으로 다른 것보다는 훨씬 자연스럽다
 그러나 이런 직관을 배제하고 모든 선택은 컴퓨터를 이용하여 이루어졌다

정밀한 검토를 하기 위해서 사용된 특수 문맥행 추출 프로그램은 쌍을 이루는 단어들을 둘 다 검사하여 그 문맥을 화면에 보여준다
 그리고 난 뒤에 이 단어들이 철자변이형인지 아닌지를 검사할 수 있고, 그 결과를 기록할 수 있게 되어 있다
 일단 한 견본에서 10개의 단어쌍들을 검사한 뒤에는 그 결과가 일관적인가를 보기 위해서 프로그램으로 다시 확인한다
 이 프로그램은 만일 결과가 일관적이지 않으면 결정적인 결과가 나올 때까지 혹은 견본에 대한 검사가 다 완료될 때까지 계속하도록 되어 있다
 검사가 끝날 무렵에는 각각의 차이점들은 수치로 표현되어서 발견된 철자변이형의 총숫자와 검사한 단어쌍들의 총숫자를 보여주도록 되어 있다
 이 숫자는 각 차이점 별로 철자변이형이 될 수 있는 확률을 추측하는 데에 사용되었다
 이 확률을 통해서 얻어진 규칙들은 컴퓨터가 찾아낸 철자변이형 규칙들을 대표한다

최종규칙에 반영되는 차이점들은 철자변이형을 초래할 가능성이 가장 큰 것들이다
 그 차이점들은 다음과 같다 :
를 대체하는 
중복된 
중복된 
삽입된 
중복된 
어말의 
중복된 
중복된 
이 규칙들을 원본 단어 빈도목록에서 뽑아낸 견본자료에 적용하여 실험하였다
 각 단어에 관련되는 규칙들이 적용되어 대체철자를 생성하고 원본 텍스트에 그 대체형이 나타나는지 보기 위해서 그 대체형을 전체 단어목록과 대조하였다
 만일 대체형들이 원본 텍스트에 나타나면 그 대체형들을 견본에서 뽑아낸 단어와 대조하기 위해서 목록으로 작성하였다
 한 예로서, 변이형 규칙을 적용시킨 결과 라는 단어는 다음과 같은 세 가지 변이형들이 가능한데, 이 변이형들은 원본 단어목록에도 나타난다 :
이 세 가지 형태는 의 철자변이형들이었고 이는 연구결과 얻은 규칙들을 통해 정확하게 예측할 수 있었다
 전반적인 성공률은 80% 정도였다

이 프로젝트는 거의 전적으로 표준 소프트웨어로 작성된 단어 빈도목록을 이용하여 수행되었다
 자세한 연구는 문맥행을 대상으로 하여 수행되었는데, 이 문맥행 또한 표준 소프트웨어로 작성되었다
 이 프로젝트의 특성은 다음과 같다 :
	한 문자만이 차이가 나는 단어쌍을 찾아내었다

	발견된 차이유형을 요약하였다

	자세한 검토결과를 수집하였다

	결과를 최종 단어견본에 적용하였다

단계에서는 빈도목록을 그 근거로 사용하였고, 단계에서는 견본의 선택에 도움을 받기 위해서 차이유형별 빈도목록을 작성하였으며, 단계에서는 각각의 견본에 대한 결정사항들을 기록하였고, 단계에서는 원본 단어 빈도목록으로 돌아가서 예측했던 변이형들을 찾아보았다
 단어 빈도목록을 연구의 기초로 사용한 것은 단어들 상호간의 관계가 아닌 개별 단어형태를 연구할 때 얼마나 그것이 유용하게 쓰일 수 있는지를 보여 준다

자연언어 처리 시스템에서는 단어와 구의 행태에 대한 엄청난 양의 구체적인 정보가 필요한데 사전에는 적어도 이 정보들이 어느 정도는 수록되어 있다
 지금까지  연구자들은 이러한 정보들의 출처로 전자사전을 이용해왔다
 에서 자금지원을 받아서 이루어졌던 연구의 일부로서 필자는 이런 방식으로 사전을 이용할 수 있는 가능성 모색을 위한 연구에 참여했던 적이 있다
 연구대상으로는  학습자용 사전을 선택하였고 따라서 일반적으로 단어들을 완전한 영어문장으로 정의하는데 있어서 사의 방식을 따랐다
 이 프로젝트의 목적은 유용한 언어정보를 구분하여 발췌할 수 있게 해주는 정의문定義文용 문법의 기술이었다

이 프로젝트는 일단 그 자체만으로도 상당히 복잡한  프로젝트일 것 같은 생각이 들었다
 그러나 정의문들이 상당히 제한된 기본구조를 갖고 있었기 때문에 이 문장들을 6장 4항에서 설명했던 대로 하나의 하위언어로 처리할 수 있었다
 이 방법은 연구의 복잡성을 크게 줄여 주었다
 이 프로젝트에서 이용된 하위언어 방법은 3
1항에서 간단히 평가해 보겠다
 그리고 주요 연구단계들에 대해서는 3
2항에서 설명한다
 결과는 3
3항에서 논의한다

이 프로젝트에서 채택한 방법은  사전의 정의문을 영어의 하위언어로 처리하는 것이었다
 6장 4
1항에서 설명한 여섯 가지 주요 특징들은 3
1
1항에서부터 3
1
6항까지에 걸쳐서 차례대로 설명한다

제한된 주제에서 비롯되는 제약들이 사전정의문에도 적용되는지를 결정하기는 어렵다
 어떤 면에서 볼 때, 주제의 문제는 영어단어의 의미와 용례의 문제이다
 그러나 심지어 아주 작은 사전이라고 해도 거기에 수록되어 있는 표제어로 표현되는 주제의 범위는 엄격하게 제한되어 있지는 않다
 아주 작은 어휘의 의미를 설명하기 위해서는 광범위한 정보를 참고해야 한다
 한 예로   ' 의 한 페이지에 들어있는 40개의 정의는 적어도 11가지 상이한 주제들에 대해서 다루고 있다
 그토록 작은 정의문 견본에서 찾아볼 수 있는 다양한 주제는 주제에 제한이 있다는 것을 암시하지는 않는다
 그러나 비록 주제의 범위는 광범위해 보여도 각 주제가 다루어지는 수준은 아주 기본적이다
 단어들의 의미이해에 필요한 정보는 최소한도로 제공되며, 각 분야별 주제와 연관된 어휘도 가장 간단한 것들로 제한되어 있다

  ' 에는 정의에서 10번 혹은 그 이상 사용되는 단어들의 목록이 있는데 이 목록에는 2,000개의 단어들이 들어 있다
  에서 추출한 견본에는 정의문과 똑같은 숫자의 토큰이 출현하지만, 4,456개의 단어형태들이 10번 혹은 그 이상 나타난다
 표제어를 제외하고 정의문에 나타나는 단어들의 전체 빈도목록에는 8,579개의 유형이 있고, 토큰과 유형의 비율은 46
95이다
   견본에는 총 27,814개의 유형이 있는데 유형당 토-큰의 비율은 14
48에 불과하다
  에서 12,107개의 단어들이 한 번씩만 출현하는 것과는 대조적으로 정의문 텍스트에서는 2,501개의 단어들만이 한 번씩만 나타난다

  텍스트는 언론잡지계系 언어를 대표하는 견본이라고 할 수 있으며 따라서 사용되는 언어는 상당히 특수한 형태라고 할 수 있고, 그 결과 다소간의 어휘제약의 영향을 받을 수 있다
 정의문에서 찾아볼 수 있는 단어유형의 숫자가 아주 낮은 것은 아주 중대한 의미가 있다는 것을 염두에 두어야 한다
 하위언어 내에서의 어휘제약조건은 충족시킨다고 보아야 할 것 같다

통사제약은 어휘제약처럼 명백하지는 않지만 있기는 있다
 우선은 모든 정의문은 평서문이다
 정의문의 대부분은 정의되는 단어와 그 정의문 사이에서 흔히 '이다 ' 혹은 '뜻한다' 등의 동사형의 일부분을 연결어로 사용하여 이 둘을 동등하게 서술하는 단순한 평서문이다
 정의문은 또한 상호간에 거의 완전히 독립적이다
 이것은 반복요소들을 대체하기 위한 대명사나 또는 그 밖의 텍스트의 일관성과 같은 특징들이 극히 제한적으로 나타난다는 것과, 또 이들 특징들이 단지 단일 정의문 내에서만 한정적으로 사용된다는 것을 의미한다

이미 제한적으로 사용된 어휘의 의미범주를 제한하는 의미제약도 분명히 있다
 정의문에는 단어의 어떤 구체적인 의미보다는 가장 일반적인 의미가 사용되는 경향이 강하다
 이것은 앞에서 언급한 단어목록에서 가장 빈번하게 출현하는 단어의 용례를 조사해보면 확인할 수 있다

 사전에는 단어의 정의문을 학습자들이 의미설명과 동시에 용례에 대해서도 알 수 있도록 자연스러운 영어문장으로 써놓았다
 이것은 예를 들어서 기상예보에서 사용되는 '전보문 형식 '의 글과 같은 하위언어에서 찾아볼 수 있는 특정 언어적 특징들이 정의문에는 나타나지 않는다는 것을 의미한다
 모든 정의문들은 전체적으로 영어의 문법규범을 지키며, 또한 일반 영어문법으로 설명할 수 있다
 그러나 정의문에만 적용되는 문법은 정의대상 단어에 대하여 정의문이 포함하고 있는 정보의 재생을 위해서 사용하기에 훨씬 유용하다
 다른 영어문장들은 이렇게 되어 있지 않다
 정의문 문법은 이런 점에서 정상적이라고 할 수 없다

3
2항에서 자세하게 설명하게 될 정의문들의 구조를 설명해 줄 범주들을 개발하기 위해서는 비교적 적은 숫자이기는 하지만 빈도가 높은 구조패턴들을 잘 관찰해야 한다
  3
2
1항에서 설명하듯이 대부분의 패턴들은 정의문들 중에서 최초로 나타나는 단어들을 통해서 쉽게 알아낼 수 있다
 정의문에서 '흔한 구문 '이라는 기준은 단순히 정의해서 지켜야 할 기준이라기 보다는 정의문의 가장 중요한 특징이다

정의문 텍스트 내에서조차도 개별단어들과 구문들의 의미 및 기능에 영향을 미치는 매우 특별한 텍스트 구조가 있다
 정의대상 단어들은 사전에 표식이 붙게 되며 인쇄할 때에는 볼드체로 인쇄한다
 정의문 텍스트 내에서의 이러한 부호들의 위치는 프로젝트 전반에 걸쳐서 각 정의문을 그 주요 구성성분으로 구분하기 위해서 사용된다

3
1
5항에서 설명한 볼드체 표식 이외에는 정의문 텍스트에는 어떤 다른 특수기호도 사용되지 않았다
 그러나 각 사전항목의 다른 부분에서는 문법표식이 사용되었다
 이 특수기호들은 정의문 이외의 부분에서 사용된다
 그러나 이 기호들은 어떤 경우에는 비슷한 구조의 문장들을 사용하여 상이한 유형의 단어들을 설명하는데 있어서 이 비슷한 문장들간의 구분을 용이하게 해주기 때문에 정의문 하위언어의 일부로 간주할 수 있다
 예를 들어서 문법표식이 앞에 붙은 다음의 정의문을 살펴보자 모든 페이지 번호는   ' ,  1990년판 참고 :
이 문장들의 기본구조는 매우 유사하다
  은 형용사이고 는 명사임을 보여주는 문법표식은 이 두 단어들을 구분하고 또 관련된 분석작업을 정확하게 할 수 있게 하기 위해서 사용되고 있다

일단 단어의 정의문을 하위언어로 정의한 뒤 그 정의문의 자세한 구조에 대해서 연구할 수 있었다
 이 연구는 전체 사전 텍스트를 전자 텍스트 형태로 바꾸어 놓은 자료, 즉 조판용으로 출판사에 제공하는 파일을 가지고 시작했다
 이 파일에는 연구에는 불필요한 많은 정보들이 포함되어 있었다
 3
2
1항에서는 사전辭典 텍스트에서 필요한 자료를 추출해내는 작업과, 또 그 자료를 연구에 적합하게 사전事前처리하는 작업에 대해서 설명한다
 연구의 주요단계에 대해서는 3
2
2항과 3
2
3항에서 설명한다

사전 텍스트 파일에 포함되어 있는 항목들에는 필요한 정보를 자세한 표식 시스템을 이용하여 표시하였다
 한 예로서,  의 첫 부분을 보자 :
대괄호 안에 들어 있는 표식들은 다른 정보가 시작된다는 것을 표시한다
 예를 들어서 '[]'는 정의문이 시작된다는 것을 표시한다
 이런 표식들을 사용하여 프로젝트에 필요한 다른 정보뿐만이 아니라 단어의 의미에 대한 정의도 포함한 파일이 작성되었다
 일단 이렇게 파일을 작성하고 나서는 아주 간단한 텍스트 처리 프로그램을 만들어 텍스트를 처리하기 쉽도록 하였다
 예컨대, 정의문에서 사용된 '[]'와 '[]' 표식은 정의대상 단어를 둘러싸고 있는데, 이 표식들은 모든 정보요소들을 구분하기 위해서 사용하는 하나의 분리기호로 변환하였다
 첫 번째 정의문을 기타 관련정보와 같이 사전事前처리를 하고 나면 다음과 같은 결과를 얻게 된다:
연구의 첫 번째 단계에서 대개는 빈도목록을 이용한다
 정의문에 제일 첫 번째로 나타나는 단어들과 연관된 중요한 패턴이 있을 가능성이 크기 때문에 그 단어들에 대한 빈도목록을 만들었다
 각 첫 번째 단어들로 시작되는 정의문들의 숫자도 세었다
 결과는 아주 놀라웠다
 다음 목록에서 높은 빈도순으로 나열한 열 개의 단어들은 모든 정의문에서 97% 이상 출현했다
 다음 목록은 첫 단어들과 또 그 첫 단어들로 시작되는 정의문들의 숫자를 보여준다
 목록에서   라고 표시된 세 번째 항목은 정의대상 단어로 시작되는 문장의 숫자를 나타내는데 그 자체로도 중요한 패턴이라고 볼 수 있다

만일 정의문들이 전체언어에서 가능한 모든 종류의 문장들로 구성되어 있다면 비슷한 구조유형을 갖는 집단으로 그 정의문들을 구분하기 위한 목적으로 정의문 처음에 오는 단어를 사용하는 것은 적합하지 않은 기준인 듯하다
 이 정의문들은 제한된 하위언어로 작성되었기 때문에 위의 빈도목록은 단순한 텍스트 패턴에 근거하여 정의문 분류 시스템을 결정하기 위해서는 아주 유용한 출발점이 될 수 있다
 이 정의문들에 적용할 수 있는 분류법은 3
3
1항에서 제시하겠다

동일한 첫 단어를 갖는 정의문 집단은 단어의 정의를 내리기 위하여 사용된 문장들의 문법을 기술하기 위하여 기저 구조패턴을 찾아내고 분석하는 다음 단계의 연구의 근본을 이룬다
 얼핏 보아도 몇 가지 중요한 패턴들을 분명하게 찾아볼 수 있다
 예를 들어서, 다음의 일반적인 구조를 살펴보자 :
            



이 구조는 명사를 위한 정의패턴인데 그 상대적 단순성과 또 사전에서의 높은 빈도5,600개의 예를 포함하고 있음로 인해서 분석의 제일 첫 번째 대상이 되었다
 프로젝트가 진행되어 가면서 별도의 파싱 책략을 필요로 할 정도로 큰 구조의 변화를 보이지 않는 다른 선택적인 요소들이 있을 수 있다는 것이 분명해졌다
 일단 이러한 선택적인 요소들을 설명할 수 있도록 문법을 수정한 뒤에는 이 한 가지 정의패턴으로 전체의 3분의 1을 차지하는 10,494개의 문장을 대표할 수 있게 되었다

처리과정이 항상 분명했던 것은 아니다
 일단 가장 분명한 구조패턴을 갖는, 특히 문장의 첫 단어들에 가장 의존하는 정의문들을 제외시킨 뒤에는 남아 있는 다른 구조들을 찾아내기 위해서 더욱 주의깊게 조사해야 했다
 한 예로, 3
2
2항의 빈도목록은 가 첫 단어들 중에서 1,908개의 정의문에 나타나는 네 번째로 흔한 단어라는 것을 보여준다
  ,  그리고 가 제한된 문장패턴에만 국한되어 사용되는 반면에 로 시작되는 문장들은 상당히 다양하다
 견본을 보면 그 다양한 가능성을 알 수 있다 :
이 예들은 어떤 하나의 명백한 정의문 구조패턴에 속하지는 않는다
 그러나 이 예들 사이에는 어떤 유사성이 있고, 또 수반되는 단어들과 구는 이 정의문들과 또 다른 단어들로 시작되는 문장들에 반복적으로 나타난다
 한 예로, 앞에서 의 정의에서 사용되는 는 로 시작되는 정의문들 중에서 1,200번 이상 비슷한 문맥에서 사용된다
 다른 정의문들에 있어서 비슷한 문맥을 연구해본 결과 다음 예에서 보는 바와 같이 ,  ,  그리고  등으로 시작되는 문장들 가운데에서도 아주 똑같은 구조들이 발견되었다

이렇게 패턴들의 다양한 특성을 분석하는 과정을 점차적으로 정의문의 텍스트에도 확대하여 적용시킴으로써 그 텍스트 내에서 눈에 덜 띄는 패턴들을 찾아내고, 빈도가 낮은 첫 단어로 시작되는 문장들도 쉽게 연구할 수 있게 된다
 이 과정은 순환적이라서 첫 단어의 빈도목록은 단어에 내재하는 패턴들에 대한 단서를 제공해주며, 또 패턴일치 과정은 패턴의 유용성을 평가할 수 있게 해준다

문장 내에서의 텍스트 유형을 연구하기 위해서는 문맥행 추출 방법과    유사한 방법이 사용되었다
 텍스트 구조가 단순하였기 때문에 특별한 문맥행 추출 프로그램 대신 일반 텍스트 검색 프로그램을 사용하여 더욱 용이하면서도 효과적으로 작업할 수 있었다
 이 프로그램들을 사용하는 이유는 4장 3
3항을 참고하기 바란다
 각각의 정의문은 물론 별도의 텍스트이고 텍스트 파일에 한 행으로 저장되어 있다
 검색 프로그램을 사용하여 정의문 파일에서 뽑은 패턴에 일치하는 행들을 발췌할 때에는 각 행은 파일 안에서 유일하게 유의미한 텍스트 단위인 문장에 해당된다
 이것은 검색 도구 프로그램의 강력한 정규표현 기능은 물론 그 속도와 유연성을 최대한도로 활용할 수 있게 해준다

앞에서 언급한 프로젝트 개요는 정의문用 하위언어의 구조패턴을 찾아내기 위해서 했던 기초작업에 대해서 설명한 것이다
 이 작업의 결과 정의문에 대한 분류법을 작성할 수 있었는데, 이 분류법은 다시 정의문들이 단어들의 의미를 어떻게 설명해 놓았는지를 기술하는 기능문법과, 사전에서 정의를 떼어내어 그것을 문법에서 규정한 부분들로 분석할 수 있는 파싱 소프트웨어를 개발할 수 있도록 해주었다
 파싱 프로그램은  응용 프로그램에서 이용할 수 있는 정보를 생성하기 위해 사용할 수 있고, 또 사전 편찬학, 언어교육 등에서도 다양한 용도가 있음을 알게 되었는데, 이에 대해서는 1995에 자세히 설명되어 있다
 분류법은 3
3
1항에서 간단히 설명하고 문법과 파서에 대해서는 3
3
2항에서 설명하겠다

앞에서 기술한 연구를 통해서 정의문用으로 작성된 분류 시스템은 다음과 같이 요약할 수 있다
 정의패턴에 사용되는 부터 까지의 패턴명칭은 분류법을 개발하는 동안 결정되었고 패턴들 사이의 유의한 구조적인 관계를 나타낸다기보다는 패턴이 발견된 순서를 반영한다
 이 때문에 패턴들은 네 가지 주요 구조집단으로 나뉘어 분류되었고 개별유형들은 상호간의 대략적인 유사성 정도에 따른 순서별로 나열되어 있다
 각 유형별로 출현빈도를 부여하였고 또 가장 전형적인 예를 하나씩 포함시켰다

각 유형은 파격적인 정의형태의 예인  유형을 제외하고는 유형별로 문법과 파싱 소프트웨어가 따로 있다
 그 문법과 파싱 소프트웨어에 대해서는 다음 항에서 간단히 설명한다

각 유형별로 개발된 문법은 필요한 정보를 뽑아내기 위해서 적절한 형태로 그 구성요소들을 설명해준다
 전체문법을 형식적으로 기술해 놓으면 너무 복잡하고 중복되는 부분이 많기 때문에 문법의 주된 특징을 보여주는 한 예로서  유형에 대해 자세히 설명해보겠다:
선택적인 항목들은 정의에서 한 번만 나타날 수 있는 경우에는 하위첨자 1을 붙여서 일반괄호 안에 표시되어 있다
 일치관계에 있는 요소들은 하위첨자 을 붙였다

문법에서 사용되는 기호들의 의미는 파서가 실제 정의문에 나타나는 구성성분들에 과연 그 기호들을 배정하는가를 살펴보면 분명해진다
 ' 에 수록된 의 두 번째 의미의 정의를 살펴보면 다음과 같다 :
이 문장은 다음과 같이 파싱된다:
이 분석에 의해 정의되는 항목 - '    ' - 은 정의하는 항목 - '      ' - 과 분명히 분리되어 있다
 이 분석은 또한 이 두 주요단위를 구성하는 개별 구성성분들과 첫 부
분에 나타나는 항목들, 즉 과  등을 반복해놓은 두 번째 부분의 항목들도 밝혀준다
 파싱결과에서 밝혀진 각각의 구성성분들은  응용 프로그램에서 사용할 수 있다

-에 들어 있는 많은 텍스트들은 특수한 형식으로 보존되어 있다
 텍스트들이 너무 커서 압축되어 있거나 혹은 한꺼번에 다운로드되는 것을 방지하기 위해 비밀부호를 붙여서 보호해 놓았을 가능성도 있다
 어쨌든, 그 특수한 형식으로 인하여 단어빈도 프로그램, 혹은 문맥행 추출 프로그램 등과 같은 표준 텍스트 처리用 소프트웨어로는 처리하기가 불가능하기 때문에 그 텍스트와 같이 공급되는 소프트웨어를 사용해야 한다

  의 - 판에서도 상황은 비슷한데, 그 특징으로는 각 항목을 신속히 찾을 수 있게 전체 사전 텍스트에 대해서 완전히 색인을 해놓았다
 -과 같이 공급되는 소프트웨어는 상당히 정교한 질의어 를 사용할 수 있게 되어 있다
 사용자가 복잡한 검색기준을 설정할 수 있고, 또 검색결과를 파일로 저장할 수 있으며, 한 질의를 통해 얻은 자료파일을 다른 질의의 기본자료로 이용할 수 있다
 자세한 질의어 사용법은 -과 같이 제공되는 사용자 설명서에 들어 있다
 의 새단어 용례연구를 위하여  작품에서 인용한 의 제일 첫 번째 인용문과 그 첫 인용년도를 포함한 텍스트의 단어목록이 필요했던 경우가 있었다

이 작업을 하는데 있어서 질의어를 통해서 단어들을 쉽게 검색할 수 있었고, 또 그 소프트웨어에 내장되어 있는 다른 기능을 이용하여 각 단어의 내용 중에서 선택된 부분들을 텍스트 파일로 저장할 수 있었다
 유일한 문제점은 그 소프트웨어의 사용방법에 있어서 선택의 여지가 거의 없었다는 것이다
 이 텍스트 파일에서 처음에 나타나는 세 항목은 다음과 같다 :
이들 중에서 첫 번째와 두 번째 항목인 와 는 기준에 부합된다
 즉, 둘 다 가 인용문의 첫 번째 저자로 되어 있다
 세 번째 항목은 두 번째 인용에서만 가 저자로 되어 있다
 다른 문제는 단어별로 너무 많은 정보가 같이 출력된다는 것이다
 이 정보들 중에서 다만 첫 번째 인용에 관한 것만이 필요할 뿐이다

부록 3에서 설명한 아주 간단한 패턴일치 프로그램을 이용하여 표준 소프트웨어에서 얻어진 결과를 가지고 작업을 할 수 있다
 이 프로그램은 원래의 결과로부터 각 단어에 대한 첫 번째 인용만을 선택하여 출력해 주고, 그 중에서도 또 만이 첫 번째 인용의 저자로 되어 있는 단어만을 출력해 준다
 이 프로그램을 이용한 결과 새로 작성된 파일은 다음과 같다 :
남은 텍스트 파일에서 관련자료를 추출해내는 작업은 표준 소프트웨어를 효과적으로 수정하여 그 소프트웨어가 사용자의 필요에 더욱 잘 부응할 수 있도록 하였다

이 프로그램의 개발작업은 그 자체만 놓고 보면 사소한 작업이었고 이 프로그램을 이용하여 자료파일을 가지고 실행한 작업도 극히 간단한 것이었다
 그러나 많은 연구 프로젝트에서 이와 같이 간단한 도구 프로그램들을 이용해보면 모든 요구사항을 다 만족시키지는 못하는 표준 소프트웨어를 이용하는 것과 반대로 복잡하면서도 값비싼 전용 프로그램을 이용하는 것 사이의 차이를 알 수 있다

지금까지 살펴 본 사례연구들을 통해서 컴퓨터를 이용하여 할 수 있는 언어연구 프로젝트와 작업의 범위를 제시하였는데, 이것이 여러 가지 언어연구 작업들을 적절히 해나가기 위해서 필요한 방법론들에 대해서 실질적인 도움이 되었기를 바란다
 언어에 대한 연구와 분석을 하기 위해 컴퓨터를 이용하고자 하는 사람들에게 있어서 중요한 것은 상상력, 유연성 그리고 무엇보다도 인내력이다
